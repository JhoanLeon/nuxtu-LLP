
slave_i2c_nuxtu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b84  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d3c  08005d3c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08005d3c  08005d3c  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d3c  08005d3c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08005d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200000a4  08005de8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08005de8  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcf2  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b52  00000000  00000000  0002bdc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002d918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000938  00000000  00000000  0002e338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cc3c  00000000  00000000  0002ec70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e60  00000000  00000000  0004b8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae493  00000000  00000000  0005570c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103b9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a50  00000000  00000000  00103c1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a4 	.word	0x200000a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005cf4 	.word	0x08005cf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a8 	.word	0x200000a8
 80001c4:	08005cf4 	.word	0x08005cf4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <HAL_I2C_AddrCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// function to check address matching
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
 8000a10:	4613      	mov	r3, r2
 8000a12:	803b      	strh	r3, [r7, #0]
	#ifdef DEBUG
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a18:	4861      	ldr	r0, [pc, #388]	; (8000ba0 <HAL_I2C_AddrCallback+0x19c>)
 8000a1a:	f002 faf5 	bl	8003008 <HAL_GPIO_TogglePin>
	#endif

	if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) // Master sends a write instruction
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d107      	bne.n	8000a34 <HAL_I2C_AddrCallback+0x30>
	{
		// read byte sent by master (this is the request information command)
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, &last_command_received, sizeof(last_command_received), I2C_NEXT_FRAME);
 8000a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a28:	2201      	movs	r2, #1
 8000a2a:	495e      	ldr	r1, [pc, #376]	; (8000ba4 <HAL_I2C_AddrCallback+0x1a0>)
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f002 fc39 	bl	80032a4 <HAL_I2C_Slave_Seq_Receive_IT>
			{
				break;
			}
		}
	}
}
 8000a32:	e0b0      	b.n	8000b96 <HAL_I2C_AddrCallback+0x192>
		switch(last_command_received)
 8000a34:	4b5b      	ldr	r3, [pc, #364]	; (8000ba4 <HAL_I2C_AddrCallback+0x1a0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	f200 80ab 	bhi.w	8000b94 <HAL_I2C_AddrCallback+0x190>
 8000a3e:	a201      	add	r2, pc, #4	; (adr r2, 8000a44 <HAL_I2C_AddrCallback+0x40>)
 8000a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a44:	08000a59 	.word	0x08000a59
 8000a48:	08000a69 	.word	0x08000a69
 8000a4c:	08000a79 	.word	0x08000a79
 8000a50:	08000a89 	.word	0x08000a89
 8000a54:	08000b39 	.word	0x08000b39
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &DETECTION_VALUE, sizeof(DETECTION_VALUE), I2C_NEXT_FRAME);
 8000a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4952      	ldr	r1, [pc, #328]	; (8000ba8 <HAL_I2C_AddrCallback+0x1a4>)
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f002 fb7b 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
				break;
 8000a66:	e096      	b.n	8000b96 <HAL_I2C_AddrCallback+0x192>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &DEVICE_TYPE, sizeof(DEVICE_TYPE), I2C_NEXT_FRAME);
 8000a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	494f      	ldr	r1, [pc, #316]	; (8000bac <HAL_I2C_AddrCallback+0x1a8>)
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f002 fb73 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
				break;
 8000a76:	e08e      	b.n	8000b96 <HAL_I2C_AddrCallback+0x192>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, BASIC_DATA, sizeof(BASIC_DATA), I2C_NEXT_FRAME);
 8000a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a7c:	220e      	movs	r2, #14
 8000a7e:	494c      	ldr	r1, [pc, #304]	; (8000bb0 <HAL_I2C_AddrCallback+0x1ac>)
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f002 fb6b 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
				break;
 8000a86:	e086      	b.n	8000b96 <HAL_I2C_AddrCallback+0x192>
				for (int i = 0; i < gas_sensors; i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e050      	b.n	8000b30 <HAL_I2C_AddrCallback+0x12c>
					HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)N[i].name, sizeof(N[i].name), I2C_NEXT_FRAME);
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2234      	movs	r2, #52	; 0x34
 8000a92:	fb02 f303 	mul.w	r3, r2, r3
 8000a96:	4a47      	ldr	r2, [pc, #284]	; (8000bb4 <HAL_I2C_AddrCallback+0x1b0>)
 8000a98:	1899      	adds	r1, r3, r2
 8000a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a9e:	220b      	movs	r2, #11
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f002 fb5b 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
					HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)N[i].type, sizeof(N[i].type), I2C_NEXT_FRAME);
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	2234      	movs	r2, #52	; 0x34
 8000aaa:	fb02 f303 	mul.w	r3, r2, r3
 8000aae:	3308      	adds	r3, #8
 8000ab0:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <HAL_I2C_AddrCallback+0x1b0>)
 8000ab2:	4413      	add	r3, r2
 8000ab4:	1cd9      	adds	r1, r3, #3
 8000ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aba:	220e      	movs	r2, #14
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f002 fb4d 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
					HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)N[i].main_gas, sizeof(N[i].main_gas), I2C_NEXT_FRAME);
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2234      	movs	r2, #52	; 0x34
 8000ac6:	fb02 f303 	mul.w	r3, r2, r3
 8000aca:	3318      	adds	r3, #24
 8000acc:	4a39      	ldr	r2, [pc, #228]	; (8000bb4 <HAL_I2C_AddrCallback+0x1b0>)
 8000ace:	4413      	add	r3, r2
 8000ad0:	1c59      	adds	r1, r3, #1
 8000ad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad6:	2214      	movs	r2, #20
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f002 fb3f 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
					data_response_time = N[i].response_time;
 8000ade:	4a35      	ldr	r2, [pc, #212]	; (8000bb4 <HAL_I2C_AddrCallback+0x1b0>)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	2134      	movs	r1, #52	; 0x34
 8000ae4:	fb01 f303 	mul.w	r3, r1, r3
 8000ae8:	4413      	add	r3, r2
 8000aea:	332e      	adds	r3, #46	; 0x2e
 8000aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <HAL_I2C_AddrCallback+0x1b4>)
 8000af4:	801a      	strh	r2, [r3, #0]
					data = (data_response_time>>8)&(0xFF);
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <HAL_I2C_AddrCallback+0x1b4>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <HAL_I2C_AddrCallback+0x1b8>)
 8000b02:	701a      	strb	r2, [r3, #0]
					HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &data, sizeof(data), I2C_NEXT_FRAME);
 8000b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b08:	2201      	movs	r2, #1
 8000b0a:	492c      	ldr	r1, [pc, #176]	; (8000bbc <HAL_I2C_AddrCallback+0x1b8>)
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f002 fb25 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
					data = data_response_time & 0xFF;
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <HAL_I2C_AddrCallback+0x1b4>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <HAL_I2C_AddrCallback+0x1b8>)
 8000b1a:	701a      	strb	r2, [r3, #0]
					HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &data, sizeof(data), I2C_NEXT_FRAME);
 8000b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b20:	2201      	movs	r2, #1
 8000b22:	4926      	ldr	r1, [pc, #152]	; (8000bbc <HAL_I2C_AddrCallback+0x1b8>)
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f002 fb19 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
				for (int i = 0; i < gas_sensors; i++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	ddab      	ble.n	8000a8e <HAL_I2C_AddrCallback+0x8a>
				break;
 8000b36:	e02e      	b.n	8000b96 <HAL_I2C_AddrCallback+0x192>
				for (int i = 0; i < env_sensors; i++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	e010      	b.n	8000b60 <HAL_I2C_AddrCallback+0x15c>
					data_env = *env_variables[i];
 8000b3e:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <HAL_I2C_AddrCallback+0x1bc>)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <HAL_I2C_AddrCallback+0x1c0>)
 8000b4a:	6013      	str	r3, [r2, #0]
					HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)&data_env, sizeof(data_env), I2C_NEXT_FRAME); // try float values as a buffer to send through I2C
 8000b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b50:	2204      	movs	r2, #4
 8000b52:	491c      	ldr	r1, [pc, #112]	; (8000bc4 <HAL_I2C_AddrCallback+0x1c0>)
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f002 fb01 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
				for (int i = 0; i < env_sensors; i++)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	ddeb      	ble.n	8000b3e <HAL_I2C_AddrCallback+0x13a>
				for (int i = 0; i < gas_sensors; i++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	e00f      	b.n	8000b8c <HAL_I2C_AddrCallback+0x188>
					HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)&N[i].voltage, sizeof(N[i].voltage), I2C_NEXT_FRAME); // try float values as a buffer to send through I2C
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2234      	movs	r2, #52	; 0x34
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <HAL_I2C_AddrCallback+0x1b0>)
 8000b78:	1899      	adds	r1, r3, r2
 8000b7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b7e:	2204      	movs	r2, #4
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f002 faeb 	bl	800315c <HAL_I2C_Slave_Seq_Transmit_IT>
				for (int i = 0; i < gas_sensors; i++)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	ddec      	ble.n	8000b6c <HAL_I2C_AddrCallback+0x168>
				break;
 8000b92:	e000      	b.n	8000b96 <HAL_I2C_AddrCallback+0x192>
				break;
 8000b94:	bf00      	nop
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	48000800 	.word	0x48000800
 8000ba4:	200000d4 	.word	0x200000d4
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	200000c0 	.word	0x200000c0
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	20000014 	.word	0x20000014
 8000bb8:	20000124 	.word	0x20000124
 8000bbc:	200001bc 	.word	0x200001bc
 8000bc0:	20000088 	.word	0x20000088
 8000bc4:	200001c0 	.word	0x200001c0

08000bc8 <HAL_I2C_ListenCpltCallback>:

// function to put the slave ready again when listen mode finish
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c); // slave is ready again
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f002 fc0b 	bl	80033ec <HAL_I2C_EnableListen_IT>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_I2C_SlaveRxCpltCallback>:

#ifdef DEBUG
// function to detect complete reception of information
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // just for quick debug
 8000be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 8000bee:	f002 fa0b 	bl	8003008 <HAL_GPIO_TogglePin>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	48000800 	.word	0x48000800

08000c00 <HAL_I2C_SlaveTxCpltCallback>:

// function to detect complete transmission of information
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // just for quick debug
 8000c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8000c0e:	f002 f9fb 	bl	8003008 <HAL_GPIO_TogglePin>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	48000800 	.word	0x48000800

08000c20 <HAL_I2C_ErrorCallback>:

// function to manage i2c errors
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); // just for quick debug
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <HAL_I2C_ErrorCallback+0x30>)
 8000c2e:	f002 f9eb 	bl	8003008 <HAL_GPIO_TogglePin>

	if (HAL_I2C_GetError(hi2c) == HAL_I2C_ERROR_OVR ) // Error obtained in debug, due to no clock stretching
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f002 fca7 	bl	8003586 <HAL_I2C_GetError>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d104      	bne.n	8000c48 <HAL_I2C_ErrorCallback+0x28>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <HAL_I2C_ErrorCallback+0x30>)
 8000c44:	f002 f9e0 	bl	8003008 <HAL_GPIO_TogglePin>
	}
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	48000800 	.word	0x48000800
 8000c54:	00000000 	.word	0x00000000

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f000 fc81 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 f92d 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c66:	f000 fa9b 	bl	80011a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6a:	f000 fa7b 	bl	8001164 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c6e:	f000 f981 	bl	8000f74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c72:	f000 fa37 	bl	80010e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2C_EnableListen_IT(&hi2c1); // to activate the slave mode of I2C
 8000c76:	4884      	ldr	r0, [pc, #528]	; (8000e88 <main+0x230>)
 8000c78:	f002 fbb8 	bl	80033ec <HAL_I2C_EnableListen_IT>

  #ifdef DEBUG
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c82:	4882      	ldr	r0, [pc, #520]	; (8000e8c <main+0x234>)
 8000c84:	f002 f9a8 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8e:	487f      	ldr	r0, [pc, #508]	; (8000e8c <main+0x234>)
 8000c90:	f002 f9a2 	bl	8002fd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9a:	487c      	ldr	r0, [pc, #496]	; (8000e8c <main+0x234>)
 8000c9c:	f002 f99c 	bl	8002fd8 <HAL_GPIO_WritePin>
  #endif

  uint8_t total_adc_sensors = env_sensors + gas_sensors; // total ADC channels to be used for analog sensors
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	72fb      	strb	r3, [r7, #11]

  uint32_t adc_values[total_adc_sensors]; // to store all read ADC values, in channel name order (channel1 -> adc[0], ..., temp -> adc[total-1])
 8000ca4:	7af8      	ldrb	r0, [r7, #11]
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	b2c1      	uxtb	r1, r0
 8000cae:	f04f 0200 	mov.w	r2, #0
 8000cb2:	f04f 0300 	mov.w	r3, #0
 8000cb6:	f04f 0400 	mov.w	r4, #0
 8000cba:	0154      	lsls	r4, r2, #5
 8000cbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000cc0:	014b      	lsls	r3, r1, #5
 8000cc2:	b2c1      	uxtb	r1, r0
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	f04f 0400 	mov.w	r4, #0
 8000cd0:	0154      	lsls	r4, r2, #5
 8000cd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000cd6:	014b      	lsls	r3, r1, #5
 8000cd8:	4603      	mov	r3, r0
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	3303      	adds	r3, #3
 8000cde:	3307      	adds	r3, #7
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	ebad 0d03 	sub.w	sp, sp, r3
 8000ce8:	466b      	mov	r3, sp
 8000cea:	3303      	adds	r3, #3
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	603b      	str	r3, [r7, #0]

  HAL_ADC_Start_DMA(&hadc1, adc_values, sizeof(adc_values)); // start the ADC in DMA mode
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4865      	ldr	r0, [pc, #404]	; (8000e90 <main+0x238>)
 8000cfc:	f000 feb8 	bl	8001a70 <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ////// COMPUTATION OF ENVIRONMENTAL VALUES //////
	  #ifdef TEMP
	  temperature = -66.875 + 218.75*(adc_values[0]/4095); // formula taken from datasheet of SHT31-ARP-B pag.8 (°C -45 -> +125)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b63      	ldr	r3, [pc, #396]	; (8000e94 <main+0x23c>)
 8000d06:	fba3 1302 	umull	r1, r3, r3, r2
 8000d0a:	1ad2      	subs	r2, r2, r3
 8000d0c:	0852      	lsrs	r2, r2, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	0adb      	lsrs	r3, r3, #11
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fb9a 	bl	800044c <__aeabi_ui2d>
 8000d18:	a353      	add	r3, pc, #332	; (adr r3, 8000e68 <main+0x210>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f7ff fc0f 	bl	8000540 <__aeabi_dmul>
 8000d22:	4603      	mov	r3, r0
 8000d24:	460c      	mov	r4, r1
 8000d26:	4618      	mov	r0, r3
 8000d28:	4621      	mov	r1, r4
 8000d2a:	a351      	add	r3, pc, #324	; (adr r3, 8000e70 <main+0x218>)
 8000d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d30:	f7ff fa4e 	bl	80001d0 <__aeabi_dsub>
 8000d34:	4603      	mov	r3, r0
 8000d36:	460c      	mov	r4, r1
 8000d38:	4618      	mov	r0, r3
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	f7ff fe12 	bl	8000964 <__aeabi_d2f>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <main+0x240>)
 8000d44:	601a      	str	r2, [r3, #0]
	  #endif

	  #ifdef HUMD
	  humidity = -12.5 + 125*(adc_values[1]/4095); // formula taken from datasheet of SHT31-ARP-B pag.8 (%RH 0 -> 100)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4b52      	ldr	r3, [pc, #328]	; (8000e94 <main+0x23c>)
 8000d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d50:	1ad2      	subs	r2, r2, r3
 8000d52:	0852      	lsrs	r2, r2, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	0ada      	lsrs	r2, r3, #11
 8000d58:	4613      	mov	r3, r2
 8000d5a:	015b      	lsls	r3, r3, #5
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fb72 	bl	800044c <__aeabi_ui2d>
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	4b4b      	ldr	r3, [pc, #300]	; (8000e9c <main+0x244>)
 8000d6e:	f7ff fa2f 	bl	80001d0 <__aeabi_dsub>
 8000d72:	4603      	mov	r3, r0
 8000d74:	460c      	mov	r4, r1
 8000d76:	4618      	mov	r0, r3
 8000d78:	4621      	mov	r1, r4
 8000d7a:	f7ff fdf3 	bl	8000964 <__aeabi_d2f>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	4b47      	ldr	r3, [pc, #284]	; (8000ea0 <main+0x248>)
 8000d82:	601a      	str	r2, [r3, #0]
	  #endif

	  #ifdef PRES
	  pressure = ((adc_values[2]/4095) - 0.05069)/0.00293; // formula derived from datasheet of KP229E2701 pag.12
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <main+0x23c>)
 8000d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d8e:	1ad2      	subs	r2, r2, r3
 8000d90:	0852      	lsrs	r2, r2, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	0adb      	lsrs	r3, r3, #11
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fb58 	bl	800044c <__aeabi_ui2d>
 8000d9c:	a336      	add	r3, pc, #216	; (adr r3, 8000e78 <main+0x220>)
 8000d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da2:	f7ff fa15 	bl	80001d0 <__aeabi_dsub>
 8000da6:	4603      	mov	r3, r0
 8000da8:	460c      	mov	r4, r1
 8000daa:	4618      	mov	r0, r3
 8000dac:	4621      	mov	r1, r4
 8000dae:	a334      	add	r3, pc, #208	; (adr r3, 8000e80 <main+0x228>)
 8000db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db4:	f7ff fcee 	bl	8000794 <__aeabi_ddiv>
 8000db8:	4603      	mov	r3, r0
 8000dba:	460c      	mov	r4, r1
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	4621      	mov	r1, r4
 8000dc0:	f7ff fdd0 	bl	8000964 <__aeabi_d2f>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <main+0x24c>)
 8000dc8:	601a      	str	r2, [r3, #0]
	  #endif

	  #ifdef PCB_TEMP
	  pcb_temperature = ((adc_values[total_adc_sensors-1]*VSENSE - V25)/ Avg_slope) + 25; // formula taken from reference manual of STM32F303VCT6 pag.373
 8000dca:	7afb      	ldrb	r3, [r7, #11]
 8000dcc:	1e5a      	subs	r2, r3, #1
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ddc:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <main+0x250>)
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <main+0x254>)
 8000de8:	edd3 7a00 	vldr	s15, [r3]
 8000dec:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <main+0x258>)
 8000df2:	ed93 7a00 	vldr	s14, [r3]
 8000df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dfa:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e02:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <main+0x25c>)
 8000e04:	edc3 7a00 	vstr	s15, [r3]
	  #endif

	  ////// COMPUTATION OF GAS SENSORS VOLTAGES //////

	  for (int i = 0; i < gas_sensors; i++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e01d      	b.n	8000e4a <main+0x1f2>
	  {
		  N[i].voltage = adc_values[i+3]*VSENSE*1000; // mV from n_i gas sensor
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	1cda      	adds	r2, r3, #3
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e18:	ee07 3a90 	vmov	s15, r3
 8000e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <main+0x250>)
 8000e22:	edd3 7a00 	vldr	s15, [r3]
 8000e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e2a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000eb8 <main+0x260>
 8000e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <main+0x264>)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2134      	movs	r1, #52	; 0x34
 8000e38:	fb01 f303 	mul.w	r3, r1, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3330      	adds	r3, #48	; 0x30
 8000e40:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < gas_sensors; i++)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3301      	adds	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	ddde      	ble.n	8000e0e <main+0x1b6>
	  }

	  #ifdef DEBUG
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // blink led to know that main program is running
 8000e50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <main+0x234>)
 8000e56:	f002 f8d7 	bl	8003008 <HAL_GPIO_TogglePin>
	  #endif

	  HAL_Delay(50); // dummy delay, can be changed to a strategy to compute ADC values with callback
 8000e5a:	2032      	movs	r0, #50	; 0x32
 8000e5c:	f000 fbe8 	bl	8001630 <HAL_Delay>
	  temperature = -66.875 + 218.75*(adc_values[0]/4095); // formula taken from datasheet of SHT31-ARP-B pag.8 (°C -45 -> +125)
 8000e60:	e74e      	b.n	8000d00 <main+0xa8>
 8000e62:	bf00      	nop
 8000e64:	f3af 8000 	nop.w
 8000e68:	00000000 	.word	0x00000000
 8000e6c:	406b5800 	.word	0x406b5800
 8000e70:	00000000 	.word	0x00000000
 8000e74:	4050b800 	.word	0x4050b800
 8000e78:	2877ee4e 	.word	0x2877ee4e
 8000e7c:	3fa9f40a 	.word	0x3fa9f40a
 8000e80:	c5ac471b 	.word	0xc5ac471b
 8000e84:	3f6800a7 	.word	0x3f6800a7
 8000e88:	200000d8 	.word	0x200000d8
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	20000128 	.word	0x20000128
 8000e94:	00100101 	.word	0x00100101
 8000e98:	200000c8 	.word	0x200000c8
 8000e9c:	40290000 	.word	0x40290000
 8000ea0:	200000cc 	.word	0x200000cc
 8000ea4:	200000d0 	.word	0x200000d0
 8000ea8:	2000007c 	.word	0x2000007c
 8000eac:	20000080 	.word	0x20000080
 8000eb0:	20000084 	.word	0x20000084
 8000eb4:	200000c4 	.word	0x200000c4
 8000eb8:	447a0000 	.word	0x447a0000
 8000ebc:	20000014 	.word	0x20000014

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09e      	sub	sp, #120	; 0x78
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eca:	2228      	movs	r2, #40	; 0x28
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 ff08 	bl	8005ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	223c      	movs	r2, #60	; 0x3c
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 fefa 	bl	8005ce4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f04:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f08:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fc26 	bl	8004760 <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f1a:	f000 f999 	bl	8001250 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	230f      	movs	r3, #15
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f22:	2302      	movs	r3, #2
 8000f24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f004 fb18 	bl	8005570 <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f46:	f000 f983 	bl	8001250 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 8000f4a:	23a0      	movs	r3, #160	; 0xa0
 8000f4c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 fcee 	bl	800593c <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f66:	f000 f973 	bl	8001250 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3778      	adds	r7, #120	; 0x78
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f96:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000f98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f9e:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa4:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000faa:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fb0:	4b4b      	ldr	r3, [pc, #300]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbe:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc4:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fca:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000fd0:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fd2:	2206      	movs	r2, #6
 8000fd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fd6:	4b42      	ldr	r3, [pc, #264]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fde:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff0:	483b      	ldr	r0, [pc, #236]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8000ff2:	f000 fb5d 	bl	80016b0 <HAL_ADC_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000ffc:	f000 f928 	bl	8001250 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4835      	ldr	r0, [pc, #212]	; (80010e0 <MX_ADC1_Init+0x16c>)
 800100c:	f001 f938 	bl	8002280 <HAL_ADCEx_MultiModeConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001016:	f000 f91b 	bl	8001250 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800101a:	2301      	movs	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101e:	2301      	movs	r3, #1
 8001020:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	482a      	ldr	r0, [pc, #168]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8001038:	f000 fe36 	bl	8001ca8 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001042:	f000 f905 	bl	8001250 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001046:	2302      	movs	r3, #2
 8001048:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800104a:	2302      	movs	r3, #2
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4619      	mov	r1, r3
 8001052:	4823      	ldr	r0, [pc, #140]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8001054:	f000 fe28 	bl	8001ca8 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800105e:	f000 f8f7 	bl	8001250 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001062:	2303      	movs	r3, #3
 8001064:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001066:	2303      	movs	r3, #3
 8001068:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	481c      	ldr	r0, [pc, #112]	; (80010e0 <MX_ADC1_Init+0x16c>)
 8001070:	f000 fe1a 	bl	8001ca8 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 800107a:	f000 f8e9 	bl	8001250 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800107e:	2304      	movs	r3, #4
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001082:	2304      	movs	r3, #4
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4815      	ldr	r0, [pc, #84]	; (80010e0 <MX_ADC1_Init+0x16c>)
 800108c:	f000 fe0c 	bl	8001ca8 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8001096:	f000 f8db 	bl	8001250 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800109a:	2305      	movs	r3, #5
 800109c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800109e:	2305      	movs	r3, #5
 80010a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <MX_ADC1_Init+0x16c>)
 80010a8:	f000 fdfe 	bl	8001ca8 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 80010b2:	f000 f8cd 	bl	8001250 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010b6:	2310      	movs	r3, #16
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80010ba:	2306      	movs	r3, #6
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80010be:	2306      	movs	r3, #6
 80010c0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_ADC1_Init+0x16c>)
 80010c8:	f000 fdee 	bl	8001ca8 <HAL_ADC_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80010d2:	f000 f8bd 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000128 	.word	0x20000128

080010e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e8:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <MX_I2C1_Init+0x74>)
 80010ea:	4a1c      	ldr	r2, [pc, #112]	; (800115c <MX_I2C1_Init+0x78>)
 80010ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_I2C1_Init+0x74>)
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <MX_I2C1_Init+0x7c>)
 80010f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 160;
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <MX_I2C1_Init+0x74>)
 80010f6:	22a0      	movs	r2, #160	; 0xa0
 80010f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_I2C1_Init+0x74>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_I2C1_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_I2C1_Init+0x74>)
 800111a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800111e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_I2C1_Init+0x74>)
 8001122:	f001 ff8b 	bl	800303c <HAL_I2C_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800112c:	f000 f890 	bl	8001250 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	4809      	ldr	r0, [pc, #36]	; (8001158 <MX_I2C1_Init+0x74>)
 8001134:	f003 fa7c 	bl	8004630 <HAL_I2CEx_ConfigAnalogFilter>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800113e:	f000 f887 	bl	8001250 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_I2C1_Init+0x74>)
 8001146:	f003 fabe 	bl	80046c6 <HAL_I2CEx_ConfigDigitalFilter>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001150:	f000 f87e 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200000d8 	.word	0x200000d8
 800115c:	40005400 	.word	0x40005400
 8001160:	2000090e 	.word	0x2000090e

08001164 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_DMA_Init+0x38>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <MX_DMA_Init+0x38>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6153      	str	r3, [r2, #20]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_DMA_Init+0x38>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	200b      	movs	r0, #11
 8001188:	f001 fb77 	bl	800287a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800118c:	200b      	movs	r0, #11
 800118e:	f001 fb90 	bl	80028b2 <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <MX_GPIO_Init+0xa8>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a23      	ldr	r2, [pc, #140]	; (8001248 <MX_GPIO_Init+0xa8>)
 80011bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <MX_GPIO_Init+0xa8>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_GPIO_Init+0xa8>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <MX_GPIO_Init+0xa8>)
 80011d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d8:	6153      	str	r3, [r2, #20]
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_GPIO_Init+0xa8>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_GPIO_Init+0xa8>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <MX_GPIO_Init+0xa8>)
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_GPIO_Init+0xa8>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_GPIO_Init+0xa8>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a11      	ldr	r2, [pc, #68]	; (8001248 <MX_GPIO_Init+0xa8>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6153      	str	r3, [r2, #20]
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_GPIO_Init+0xa8>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <MX_GPIO_Init+0xac>)
 800121e:	f001 fedb 	bl	8002fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001222:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_GPIO_Init+0xac>)
 800123c:	f001 fd52 	bl	8002ce4 <HAL_GPIO_Init>

}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	48000800 	.word	0x48000800

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_MspInit+0x44>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_MspInit+0x44>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6193      	str	r3, [r2, #24]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_MspInit+0x44>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x44>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x44>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x44>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c8:	d164      	bne.n	8001394 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_ADC_MspInit+0xf4>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	4a33      	ldr	r2, [pc, #204]	; (800139c <HAL_ADC_MspInit+0xf4>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6153      	str	r3, [r2, #20]
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_ADC_MspInit+0xf4>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <HAL_ADC_MspInit+0xf4>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a2d      	ldr	r2, [pc, #180]	; (800139c <HAL_ADC_MspInit+0xf4>)
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	6153      	str	r3, [r2, #20]
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <HAL_ADC_MspInit+0xf4>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <HAL_ADC_MspInit+0xf4>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a27      	ldr	r2, [pc, #156]	; (800139c <HAL_ADC_MspInit+0xf4>)
 8001300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001304:	6153      	str	r3, [r2, #20]
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_ADC_MspInit+0xf4>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001312:	230f      	movs	r3, #15
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001328:	f001 fcdc 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800132c:	2310      	movs	r3, #16
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001330:	2303      	movs	r3, #3
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <HAL_ADC_MspInit+0xf8>)
 8001340:	f001 fcd0 	bl	8002ce4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <HAL_ADC_MspInit+0x100>)
 8001348:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 800134c:	2200      	movs	r2, #0
 800134e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 800135e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001362:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 8001366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 800136e:	2220      	movs	r2, #32
 8001370:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 800137a:	f001 fab4 	bl	80028e6 <HAL_DMA_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8001384:	f7ff ff64 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 800138c:	639a      	str	r2, [r3, #56]	; 0x38
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <HAL_ADC_MspInit+0xfc>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	48001400 	.word	0x48001400
 80013a4:	20000178 	.word	0x20000178
 80013a8:	40020008 	.word	0x40020008

080013ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1f      	ldr	r2, [pc, #124]	; (8001448 <HAL_I2C_MspInit+0x9c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d137      	bne.n	800143e <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_I2C_MspInit+0xa0>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a1e      	ldr	r2, [pc, #120]	; (800144c <HAL_I2C_MspInit+0xa0>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_I2C_MspInit+0xa0>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e6:	23c0      	movs	r3, #192	; 0xc0
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ea:	2312      	movs	r3, #18
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f6:	2304      	movs	r3, #4
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	4813      	ldr	r0, [pc, #76]	; (8001450 <HAL_I2C_MspInit+0xa4>)
 8001402:	f001 fc6f 	bl	8002ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_I2C_MspInit+0xa0>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_I2C_MspInit+0xa0>)
 800140c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_I2C_MspInit+0xa0>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	201f      	movs	r0, #31
 8001424:	f001 fa29 	bl	800287a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001428:	201f      	movs	r0, #31
 800142a:	f001 fa42 	bl	80028b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2020      	movs	r0, #32
 8001434:	f001 fa21 	bl	800287a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001438:	2020      	movs	r0, #32
 800143a:	f001 fa3a 	bl	80028b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40005400 	.word	0x40005400
 800144c:	40021000 	.word	0x40021000
 8001450:	48000400 	.word	0x48000400

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 f8a2 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <DMA1_Channel1_IRQHandler+0x10>)
 80014b6:	f001 fafa 	bl	8002aae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000178 	.word	0x20000178

080014c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <I2C1_EV_IRQHandler+0x10>)
 80014ca:	f001 ffaf 	bl	800342c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200000d8 	.word	0x200000d8

080014d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <I2C1_ER_IRQHandler+0x10>)
 80014de:	f001 ffbf 	bl	8003460 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000d8 	.word	0x200000d8

080014ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001548 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopForever+0x6>)
  ldr r1, =_edata
 8001516:	490e      	ldr	r1, [pc, #56]	; (8001550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <LoopForever+0xe>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800152c:	4c0b      	ldr	r4, [pc, #44]	; (800155c <LoopForever+0x16>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800153a:	f7ff ffd7 	bl	80014ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153e:	f004 fbad 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001542:	f7ff fb89 	bl	8000c58 <main>

08001546 <LoopForever>:

LoopForever:
    b LoopForever
 8001546:	e7fe      	b.n	8001546 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001548:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001554:	08005d44 	.word	0x08005d44
  ldr r2, =_sbss
 8001558:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800155c:	200001c8 	.word	0x200001c8

08001560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC1_2_IRQHandler>
	...

08001564 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_Init+0x28>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_Init+0x28>)
 800156e:	f043 0310 	orr.w	r3, r3, #16
 8001572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f001 f975 	bl	8002864 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff fe6e 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000

08001590 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 f98d 	bl	80028ce <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f001 f955 	bl	800287a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000098 	.word	0x20000098
 80015e8:	200000a0 	.word	0x200000a0
 80015ec:	2000009c 	.word	0x2000009c

080015f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	200000a0 	.word	0x200000a0
 8001614:	200001c4 	.word	0x200001c4

08001618 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;  
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200001c4 	.word	0x200001c4

08001630 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_Delay+0x40>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200000a0 	.word	0x200000a0

08001674 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b09a      	sub	sp, #104	; 0x68
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e1c9      	b.n	8001a64 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d176      	bne.n	80017d0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d152      	bne.n	8001790 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fdcf 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d13b      	bne.n	8001790 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 ff6d 	bl	80025f8 <ADC_Disable>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b00      	cmp	r3, #0
 800172e:	d12f      	bne.n	8001790 <HAL_ADC_Init+0xe0>
 8001730:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001734:	2b00      	cmp	r3, #0
 8001736:	d12b      	bne.n	8001790 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001740:	f023 0302 	bic.w	r3, r3, #2
 8001744:	f043 0202 	orr.w	r2, r3, #2
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800175a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800176a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800176c:	4b86      	ldr	r3, [pc, #536]	; (8001988 <HAL_ADC_Init+0x2d8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a86      	ldr	r2, [pc, #536]	; (800198c <HAL_ADC_Init+0x2dc>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	0c9a      	lsrs	r2, r3, #18
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001782:	e002      	b.n	800178a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	3b01      	subs	r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f9      	bne.n	8001784 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ac:	d110      	bne.n	80017d0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f023 0312 	bic.w	r3, r3, #18
 80017b6:	f043 0210 	orr.w	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 8136 	bne.w	8001a4a <HAL_ADC_Init+0x39a>
 80017de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 8131 	bne.w	8001a4a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 8129 	bne.w	8001a4a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001800:	f043 0202 	orr.w	r2, r3, #2
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001810:	d004      	beq.n	800181c <HAL_ADC_Init+0x16c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a5e      	ldr	r2, [pc, #376]	; (8001990 <HAL_ADC_Init+0x2e0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_ADC_Init+0x170>
 800181c:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <HAL_ADC_Init+0x2e4>)
 800181e:	e000      	b.n	8001822 <HAL_ADC_Init+0x172>
 8001820:	4b5d      	ldr	r3, [pc, #372]	; (8001998 <HAL_ADC_Init+0x2e8>)
 8001822:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800182c:	d102      	bne.n	8001834 <HAL_ADC_Init+0x184>
 800182e:	4b58      	ldr	r3, [pc, #352]	; (8001990 <HAL_ADC_Init+0x2e0>)
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	e01a      	b.n	800186a <HAL_ADC_Init+0x1ba>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a55      	ldr	r2, [pc, #340]	; (8001990 <HAL_ADC_Init+0x2e0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d103      	bne.n	8001846 <HAL_ADC_Init+0x196>
 800183e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e011      	b.n	800186a <HAL_ADC_Init+0x1ba>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a54      	ldr	r2, [pc, #336]	; (800199c <HAL_ADC_Init+0x2ec>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d102      	bne.n	8001856 <HAL_ADC_Init+0x1a6>
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_ADC_Init+0x2f0>)
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	e009      	b.n	800186a <HAL_ADC_Init+0x1ba>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <HAL_ADC_Init+0x2f0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d102      	bne.n	8001866 <HAL_ADC_Init+0x1b6>
 8001860:	4b4e      	ldr	r3, [pc, #312]	; (800199c <HAL_ADC_Init+0x2ec>)
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	e001      	b.n	800186a <HAL_ADC_Init+0x1ba>
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d108      	bne.n	800188a <HAL_ADC_Init+0x1da>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_ADC_Init+0x1da>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_ADC_Init+0x1dc>
 800188a:	2300      	movs	r3, #0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d11c      	bne.n	80018ca <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001890:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_ADC_Init+0x202>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Init+0x202>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_ADC_Init+0x204>
 80018b2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d108      	bne.n	80018ca <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80018b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7e5b      	ldrb	r3, [r3, #25]
 80018ce:	035b      	lsls	r3, r3, #13
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018d4:	2a01      	cmp	r2, #1
 80018d6:	d002      	beq.n	80018de <HAL_ADC_Init+0x22e>
 80018d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018dc:	e000      	b.n	80018e0 <HAL_ADC_Init+0x230>
 80018de:	2200      	movs	r2, #0
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018f0:	4313      	orrs	r3, r2
 80018f2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d11b      	bne.n	8001936 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7e5b      	ldrb	r3, [r3, #25]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	3b01      	subs	r3, #1
 800190c:	045a      	lsls	r2, r3, #17
 800190e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001910:	4313      	orrs	r3, r2
 8001912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001916:	663b      	str	r3, [r7, #96]	; 0x60
 8001918:	e00d      	b.n	8001936 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001922:	f043 0220 	orr.w	r2, r3, #32
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	2b01      	cmp	r3, #1
 800193c:	d03a      	beq.n	80019b4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a16      	ldr	r2, [pc, #88]	; (800199c <HAL_ADC_Init+0x2ec>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d004      	beq.n	8001952 <HAL_ADC_Init+0x2a2>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <HAL_ADC_Init+0x2f0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d128      	bne.n	80019a4 <HAL_ADC_Init+0x2f4>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800195a:	d012      	beq.n	8001982 <HAL_ADC_Init+0x2d2>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001964:	d00a      	beq.n	800197c <HAL_ADC_Init+0x2cc>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800196e:	d002      	beq.n	8001976 <HAL_ADC_Init+0x2c6>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	e018      	b.n	80019a8 <HAL_ADC_Init+0x2f8>
 8001976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800197a:	e015      	b.n	80019a8 <HAL_ADC_Init+0x2f8>
 800197c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001980:	e012      	b.n	80019a8 <HAL_ADC_Init+0x2f8>
 8001982:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001986:	e00f      	b.n	80019a8 <HAL_ADC_Init+0x2f8>
 8001988:	20000098 	.word	0x20000098
 800198c:	431bde83 	.word	0x431bde83
 8001990:	50000100 	.word	0x50000100
 8001994:	50000300 	.word	0x50000300
 8001998:	50000700 	.word	0x50000700
 800199c:	50000400 	.word	0x50000400
 80019a0:	50000500 	.word	0x50000500
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019ac:	4313      	orrs	r3, r2
 80019ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019b0:	4313      	orrs	r3, r2
 80019b2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d114      	bne.n	80019ec <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019d0:	f023 0302 	bic.w	r3, r3, #2
 80019d4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7e1b      	ldrb	r3, [r3, #24]
 80019da:	039a      	lsls	r2, r3, #14
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4313      	orrs	r3, r2
 80019e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019e8:	4313      	orrs	r3, r2
 80019ea:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <HAL_ADC_Init+0x3bc>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019fc:	430b      	orrs	r3, r1
 80019fe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10c      	bne.n	8001a22 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f023 010f 	bic.w	r1, r3, #15
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a20:	e007      	b.n	8001a32 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 020f 	bic.w	r2, r2, #15
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f023 0303 	bic.w	r3, r3, #3
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
 8001a48:	e00a      	b.n	8001a60 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f023 0312 	bic.w	r3, r3, #18
 8001a52:	f043 0210 	orr.w	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3768      	adds	r7, #104	; 0x68
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	fff0c007 	.word	0xfff0c007

08001a70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 80f7 	bne.w	8001c7e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Start_DMA+0x2e>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e0f2      	b.n	8001c84 <HAL_ADC_Start_DMA+0x214>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Start_DMA+0x4a>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a75      	ldr	r2, [pc, #468]	; (8001c8c <HAL_ADC_Start_DMA+0x21c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d109      	bne.n	8001ace <HAL_ADC_Start_DMA+0x5e>
 8001aba:	4b75      	ldr	r3, [pc, #468]	; (8001c90 <HAL_ADC_Start_DMA+0x220>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bf0c      	ite	eq
 8001ac6:	2301      	moveq	r3, #1
 8001ac8:	2300      	movne	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	e008      	b.n	8001ae0 <HAL_ADC_Start_DMA+0x70>
 8001ace:	4b71      	ldr	r3, [pc, #452]	; (8001c94 <HAL_ADC_Start_DMA+0x224>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80c5 	beq.w	8001c70 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 fd22 	bl	8002530 <ADC_Enable>
 8001aec:	4603      	mov	r3, r0
 8001aee:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 80b7 	bne.w	8001c66 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b14:	d004      	beq.n	8001b20 <HAL_ADC_Start_DMA+0xb0>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a5c      	ldr	r2, [pc, #368]	; (8001c8c <HAL_ADC_Start_DMA+0x21c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d106      	bne.n	8001b2e <HAL_ADC_Start_DMA+0xbe>
 8001b20:	4b5b      	ldr	r3, [pc, #364]	; (8001c90 <HAL_ADC_Start_DMA+0x220>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d010      	beq.n	8001b4e <HAL_ADC_Start_DMA+0xde>
 8001b2c:	e005      	b.n	8001b3a <HAL_ADC_Start_DMA+0xca>
 8001b2e:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_ADC_Start_DMA+0x224>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_ADC_Start_DMA+0xde>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b42:	d004      	beq.n	8001b4e <HAL_ADC_Start_DMA+0xde>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a53      	ldr	r2, [pc, #332]	; (8001c98 <HAL_ADC_Start_DMA+0x228>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d115      	bne.n	8001b7a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d036      	beq.n	8001bd6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b78:	e02d      	b.n	8001bd6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b8e:	d004      	beq.n	8001b9a <HAL_ADC_Start_DMA+0x12a>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a3d      	ldr	r2, [pc, #244]	; (8001c8c <HAL_ADC_Start_DMA+0x21c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10a      	bne.n	8001bb0 <HAL_ADC_Start_DMA+0x140>
 8001b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	e008      	b.n	8001bc2 <HAL_ADC_Start_DMA+0x152>
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_ADC_Start_DMA+0x228>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be2:	d106      	bne.n	8001bf2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	f023 0206 	bic.w	r2, r3, #6
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	645a      	str	r2, [r3, #68]	; 0x44
 8001bf0:	e002      	b.n	8001bf8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	4a25      	ldr	r2, [pc, #148]	; (8001c9c <HAL_ADC_Start_DMA+0x22c>)
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <HAL_ADC_Start_DMA+0x230>)
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c14:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_ADC_Start_DMA+0x234>)
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	221c      	movs	r2, #28
 8001c1e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0210 	orr.w	r2, r2, #16
 8001c2e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3340      	adds	r3, #64	; 0x40
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f000 fe90 	bl	8002974 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0204 	orr.w	r2, r2, #4
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	e00d      	b.n	8001c82 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c6e:	e008      	b.n	8001c82 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c7c:	e001      	b.n	8001c82 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	50000100 	.word	0x50000100
 8001c90:	50000300 	.word	0x50000300
 8001c94:	50000700 	.word	0x50000700
 8001c98:	50000400 	.word	0x50000400
 8001c9c:	08002465 	.word	0x08002465
 8001ca0:	080024df 	.word	0x080024df
 8001ca4:	080024fb 	.word	0x080024fb

08001ca8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b09b      	sub	sp, #108	; 0x6c
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x22>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e2cb      	b.n	8002262 <HAL_ADC_ConfigChannel+0x5ba>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 82af 	bne.w	8002240 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d81c      	bhi.n	8001d24 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	231f      	movs	r3, #31
 8001d00:	4093      	lsls	r3, r2
 8001d02:	43db      	mvns	r3, r3
 8001d04:	4019      	ands	r1, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
 8001d22:	e063      	b.n	8001dec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	d81e      	bhi.n	8001d6a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	3b1e      	subs	r3, #30
 8001d40:	221f      	movs	r2, #31
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	4019      	ands	r1, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	3b1e      	subs	r3, #30
 8001d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34
 8001d68:	e040      	b.n	8001dec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b0e      	cmp	r3, #14
 8001d70:	d81e      	bhi.n	8001db0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	3b3c      	subs	r3, #60	; 0x3c
 8001d86:	221f      	movs	r2, #31
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	4019      	ands	r1, r3
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	3b3c      	subs	r3, #60	; 0x3c
 8001da2:	fa00 f203 	lsl.w	r2, r0, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38
 8001dae:	e01d      	b.n	8001dec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	3b5a      	subs	r3, #90	; 0x5a
 8001dc4:	221f      	movs	r2, #31
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	4019      	ands	r1, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	3b5a      	subs	r3, #90	; 0x5a
 8001de0:	fa00 f203 	lsl.w	r2, r0, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 80e5 	bne.w	8001fc6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	d91c      	bls.n	8001e3e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6999      	ldr	r1, [r3, #24]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	3b1e      	subs	r3, #30
 8001e16:	2207      	movs	r2, #7
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4019      	ands	r1, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6898      	ldr	r0, [r3, #8]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b1e      	subs	r3, #30
 8001e30:	fa00 f203 	lsl.w	r2, r0, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	619a      	str	r2, [r3, #24]
 8001e3c:	e019      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6959      	ldr	r1, [r3, #20]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	2207      	movs	r2, #7
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	4019      	ands	r1, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6898      	ldr	r0, [r3, #8]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d84f      	bhi.n	8001f34 <HAL_ADC_ConfigChannel+0x28c>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <HAL_ADC_ConfigChannel+0x1f4>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ead 	.word	0x08001ead
 8001ea0:	08001ecf 	.word	0x08001ecf
 8001ea4:	08001ef1 	.word	0x08001ef1
 8001ea8:	08001f13 	.word	0x08001f13
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eb2:	4b9f      	ldr	r3, [pc, #636]	; (8002130 <HAL_ADC_ConfigChannel+0x488>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	0691      	lsls	r1, r2, #26
 8001ebc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ecc:	e07e      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ed4:	4b96      	ldr	r3, [pc, #600]	; (8002130 <HAL_ADC_ConfigChannel+0x488>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	0691      	lsls	r1, r2, #26
 8001ede:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eee:	e06d      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ef6:	4b8e      	ldr	r3, [pc, #568]	; (8002130 <HAL_ADC_ConfigChannel+0x488>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	0691      	lsls	r1, r2, #26
 8001f00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f02:	430a      	orrs	r2, r1
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f0e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f10:	e05c      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f18:	4b85      	ldr	r3, [pc, #532]	; (8002130 <HAL_ADC_ConfigChannel+0x488>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	0691      	lsls	r1, r2, #26
 8001f22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f24:	430a      	orrs	r2, r1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f30:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f32:	e04b      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	069b      	lsls	r3, r3, #26
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d107      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f56:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	069b      	lsls	r3, r3, #26
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d107      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f7a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	069b      	lsls	r3, r3, #26
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d107      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f9e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	069b      	lsls	r3, r3, #26
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d10a      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fc2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001fc4:	e001      	b.n	8001fca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001fc6:	bf00      	nop
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x324>
      break;
 8001fca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d108      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x344>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x344>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_ADC_ConfigChannel+0x346>
 8001fec:	2300      	movs	r3, #0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 8131 	bne.w	8002256 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d00f      	beq.n	800201c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	400a      	ands	r2, r1
 8002016:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800201a:	e049      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	409a      	lsls	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b09      	cmp	r3, #9
 800203c:	d91c      	bls.n	8002078 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6999      	ldr	r1, [r3, #24]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	3b1b      	subs	r3, #27
 8002050:	2207      	movs	r2, #7
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	4019      	ands	r1, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6898      	ldr	r0, [r3, #8]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	3b1b      	subs	r3, #27
 800206a:	fa00 f203 	lsl.w	r2, r0, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	619a      	str	r2, [r3, #24]
 8002076:	e01b      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6959      	ldr	r1, [r3, #20]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	2207      	movs	r2, #7
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	4019      	ands	r1, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6898      	ldr	r0, [r3, #8]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	fa00 f203 	lsl.w	r2, r0, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b8:	d004      	beq.n	80020c4 <HAL_ADC_ConfigChannel+0x41c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_ADC_ConfigChannel+0x48c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x420>
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_ADC_ConfigChannel+0x490>)
 80020c6:	e000      	b.n	80020ca <HAL_ADC_ConfigChannel+0x422>
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_ADC_ConfigChannel+0x494>)
 80020ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b10      	cmp	r3, #16
 80020d2:	d105      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d015      	beq.n	800210c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020e4:	2b11      	cmp	r3, #17
 80020e6:	d105      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00b      	beq.n	800210c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020f8:	2b12      	cmp	r3, #18
 80020fa:	f040 80ac 	bne.w	8002256 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80020fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 80a5 	bne.w	8002256 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002114:	d102      	bne.n	800211c <HAL_ADC_ConfigChannel+0x474>
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_ADC_ConfigChannel+0x48c>)
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e023      	b.n	8002164 <HAL_ADC_ConfigChannel+0x4bc>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <HAL_ADC_ConfigChannel+0x48c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10c      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x498>
 8002126:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e01a      	b.n	8002164 <HAL_ADC_ConfigChannel+0x4bc>
 800212e:	bf00      	nop
 8002130:	83fff000 	.word	0x83fff000
 8002134:	50000100 	.word	0x50000100
 8002138:	50000300 	.word	0x50000300
 800213c:	50000700 	.word	0x50000700
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <HAL_ADC_ConfigChannel+0x5c8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d102      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x4a8>
 800214a:	4b4a      	ldr	r3, [pc, #296]	; (8002274 <HAL_ADC_ConfigChannel+0x5cc>)
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	e009      	b.n	8002164 <HAL_ADC_ConfigChannel+0x4bc>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a47      	ldr	r2, [pc, #284]	; (8002274 <HAL_ADC_ConfigChannel+0x5cc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d102      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x4b8>
 800215a:	4b45      	ldr	r3, [pc, #276]	; (8002270 <HAL_ADC_ConfigChannel+0x5c8>)
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	e001      	b.n	8002164 <HAL_ADC_ConfigChannel+0x4bc>
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d108      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x4dc>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x4dc>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_ADC_ConfigChannel+0x4de>
 8002184:	2300      	movs	r3, #0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d150      	bne.n	800222c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800218a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800218c:	2b00      	cmp	r3, #0
 800218e:	d010      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d107      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x504>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x504>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <HAL_ADC_ConfigChannel+0x506>
 80021ac:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d13c      	bne.n	800222c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d11d      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x54e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c2:	d118      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80021c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_ADC_ConfigChannel+0x5d0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a29      	ldr	r2, [pc, #164]	; (800227c <HAL_ADC_ConfigChannel+0x5d4>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9a      	lsrs	r2, r3, #18
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021e6:	e002      	b.n	80021ee <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f9      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021f4:	e02e      	b.n	8002254 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b11      	cmp	r3, #17
 80021fc:	d10b      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x56e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002206:	d106      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002212:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002214:	e01e      	b.n	8002254 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b12      	cmp	r3, #18
 800221c:	d11a      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800221e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002228:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800222a:	e013      	b.n	8002254 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800223e:	e00a      	b.n	8002256 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f043 0220 	orr.w	r2, r3, #32
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002252:	e000      	b.n	8002256 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002254:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800225e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002262:	4618      	mov	r0, r3
 8002264:	376c      	adds	r7, #108	; 0x6c
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	50000400 	.word	0x50000400
 8002274:	50000500 	.word	0x50000500
 8002278:	20000098 	.word	0x20000098
 800227c:	431bde83 	.word	0x431bde83

08002280 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002280:	b480      	push	{r7}
 8002282:	b099      	sub	sp, #100	; 0x64
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002298:	d102      	bne.n	80022a0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800229a:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	e01a      	b.n	80022d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6a      	ldr	r2, [pc, #424]	; (8002450 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d103      	bne.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80022aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	e011      	b.n	80022d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a67      	ldr	r2, [pc, #412]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d102      	bne.n	80022c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022bc:	4b66      	ldr	r3, [pc, #408]	; (8002458 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	e009      	b.n	80022d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a64      	ldr	r2, [pc, #400]	; (8002458 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d102      	bne.n	80022d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80022cc:	4b61      	ldr	r3, [pc, #388]	; (8002454 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	e001      	b.n	80022d6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0b0      	b.n	8002442 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0a9      	b.n	8002442 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 808d 	bne.w	8002420 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 8086 	bne.w	8002420 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800231c:	d004      	beq.n	8002328 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a4b      	ldr	r2, [pc, #300]	; (8002450 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002328:	4b4c      	ldr	r3, [pc, #304]	; (800245c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800232a:	e000      	b.n	800232e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800232e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d040      	beq.n	80023ba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800234a:	035b      	lsls	r3, r3, #13
 800234c:	430b      	orrs	r3, r1
 800234e:	431a      	orrs	r2, r3
 8002350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002352:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d108      	bne.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002374:	2300      	movs	r3, #0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d15c      	bne.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002396:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002398:	2b00      	cmp	r3, #0
 800239a:	d14b      	bne.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800239c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023a4:	f023 030f 	bic.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	6811      	ldr	r1, [r2, #0]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	6892      	ldr	r2, [r2, #8]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023b8:	e03c      	b.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023c4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d108      	bne.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d123      	bne.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002408:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800240a:	2b00      	cmp	r3, #0
 800240c:	d112      	bne.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800240e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002416:	f023 030f 	bic.w	r3, r3, #15
 800241a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800241c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800241e:	e009      	b.n	8002434 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f043 0220 	orr.w	r2, r3, #32
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002432:	e000      	b.n	8002436 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002434:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800243e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002442:	4618      	mov	r0, r3
 8002444:	3764      	adds	r7, #100	; 0x64
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	50000100 	.word	0x50000100
 8002454:	50000400 	.word	0x50000400
 8002458:	50000500 	.word	0x50000500
 800245c:	50000300 	.word	0x50000300
 8002460:	50000700 	.word	0x50000700

08002464 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800247a:	2b00      	cmp	r3, #0
 800247c:	d126      	bne.n	80024cc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002494:	2b00      	cmp	r3, #0
 8002496:	d115      	bne.n	80024c4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800249c:	2b00      	cmp	r3, #0
 800249e:	d111      	bne.n	80024c4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff f8d5 	bl	8001674 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80024ca:	e004      	b.n	80024d6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4798      	blx	r3
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f7ff f8cb 	bl	8001688 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002518:	f043 0204 	orr.w	r2, r3, #4
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f7ff f8bb 	bl	800169c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d108      	bne.n	800255c <ADC_Enable+0x2c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <ADC_Enable+0x2c>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <ADC_Enable+0x2e>
 800255c:	2300      	movs	r3, #0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d143      	bne.n	80025ea <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <ADC_Enable+0xc4>)
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00d      	beq.n	800258c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f043 0210 	orr.w	r2, r3, #16
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e02f      	b.n	80025ec <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800259c:	f7ff f83c 	bl	8001618 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025a2:	e01b      	b.n	80025dc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025a4:	f7ff f838 	bl	8001618 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d914      	bls.n	80025dc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d00d      	beq.n	80025dc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f043 0210 	orr.w	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e007      	b.n	80025ec <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d1dc      	bne.n	80025a4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	8000003f 	.word	0x8000003f

080025f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d108      	bne.n	8002624 <ADC_Disable+0x2c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <ADC_Disable+0x2c>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <ADC_Disable+0x2e>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d047      	beq.n	80026ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030d 	and.w	r3, r3, #13
 8002634:	2b01      	cmp	r3, #1
 8002636:	d10f      	bne.n	8002658 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0202 	orr.w	r2, r2, #2
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2203      	movs	r2, #3
 800264e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002650:	f7fe ffe2 	bl	8001618 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002656:	e029      	b.n	80026ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f043 0210 	orr.w	r2, r3, #16
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e023      	b.n	80026bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002674:	f7fe ffd0 	bl	8001618 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d914      	bls.n	80026ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d10d      	bne.n	80026ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f043 0210 	orr.w	r2, r3, #16
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e007      	b.n	80026bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d0dc      	beq.n	8002674 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	60d3      	str	r3, [r2, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <__NVIC_GetPriorityGrouping+0x18>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0307 	and.w	r3, r3, #7
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db0b      	blt.n	8002752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <__NVIC_EnableIRQ+0x38>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2001      	movs	r0, #1
 800274a:	fa00 f202 	lsl.w	r2, r0, r2
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000e100 	.word	0xe000e100

08002764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	6039      	str	r1, [r7, #0]
 800276e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	2b00      	cmp	r3, #0
 8002776:	db0a      	blt.n	800278e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	490c      	ldr	r1, [pc, #48]	; (80027b0 <__NVIC_SetPriority+0x4c>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	0112      	lsls	r2, r2, #4
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	440b      	add	r3, r1
 8002788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800278c:	e00a      	b.n	80027a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4908      	ldr	r1, [pc, #32]	; (80027b4 <__NVIC_SetPriority+0x50>)
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3b04      	subs	r3, #4
 800279c:	0112      	lsls	r2, r2, #4
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	440b      	add	r3, r1
 80027a2:	761a      	strb	r2, [r3, #24]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000e100 	.word	0xe000e100
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f1c3 0307 	rsb	r3, r3, #7
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	bf28      	it	cs
 80027d6:	2304      	movcs	r3, #4
 80027d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3304      	adds	r3, #4
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d902      	bls.n	80027e8 <NVIC_EncodePriority+0x30>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3b03      	subs	r3, #3
 80027e6:	e000      	b.n	80027ea <NVIC_EncodePriority+0x32>
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43da      	mvns	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	401a      	ands	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002800:	f04f 31ff 	mov.w	r1, #4294967295
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	43d9      	mvns	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	4313      	orrs	r3, r2
         );
}
 8002812:	4618      	mov	r0, r3
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002830:	d301      	bcc.n	8002836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002832:	2301      	movs	r3, #1
 8002834:	e00f      	b.n	8002856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002836:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <SysTick_Config+0x40>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283e:	210f      	movs	r1, #15
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	f7ff ff8e 	bl	8002764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <SysTick_Config+0x40>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <SysTick_Config+0x40>)
 8002850:	2207      	movs	r2, #7
 8002852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000e010 	.word	0xe000e010

08002864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff29 	bl	80026c4 <__NVIC_SetPriorityGrouping>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800288c:	f7ff ff3e 	bl	800270c <__NVIC_GetPriorityGrouping>
 8002890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f7ff ff8e 	bl	80027b8 <NVIC_EncodePriority>
 800289c:	4602      	mov	r2, r0
 800289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff5d 	bl	8002764 <__NVIC_SetPriority>
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff31 	bl	8002728 <__NVIC_EnableIRQ>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ffa2 	bl	8002820 <SysTick_Config>
 80028dc:	4603      	mov	r3, r0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e037      	b.n	800296c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002912:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002916:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f98c 	bl	8002c6c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}  
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_DMA_Start_IT+0x20>
 8002990:	2302      	movs	r3, #2
 8002992:	e04a      	b.n	8002a2a <HAL_DMA_Start_IT+0xb6>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d13a      	bne.n	8002a1c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f91f 	bl	8002c0e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 020e 	orr.w	r2, r2, #14
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e00f      	b.n	8002a0a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 020a 	orr.w	r2, r2, #10
 80029f8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0204 	bic.w	r2, r2, #4
 8002a08:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e005      	b.n	8002a28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
 8002a26:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d005      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e027      	b.n	8002aa4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 020e 	bic.w	r2, r2, #14
 8002a62:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a82:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
    } 
  }
  return status;
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	2204      	movs	r2, #4
 8002acc:	409a      	lsls	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d024      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x72>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01f      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d107      	bne.n	8002afe <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0204 	bic.w	r2, r2, #4
 8002afc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	2104      	movs	r1, #4
 8002b08:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d06a      	beq.n	8002bec <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b1e:	e065      	b.n	8002bec <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	2202      	movs	r2, #2
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02c      	beq.n	8002b8a <HAL_DMA_IRQHandler+0xdc>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d027      	beq.n	8002b8a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10b      	bne.n	8002b60 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 020a 	bic.w	r2, r2, #10
 8002b56:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	2102      	movs	r1, #2
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d035      	beq.n	8002bec <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002b88:	e030      	b.n	8002bec <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2208      	movs	r2, #8
 8002b90:	409a      	lsls	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d028      	beq.n	8002bec <HAL_DMA_IRQHandler+0x13e>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d023      	beq.n	8002bec <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 020e 	bic.w	r2, r2, #14
 8002bb2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d004      	beq.n	8002bec <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
    }
  }
}  
 8002bea:	e7ff      	b.n	8002bec <HAL_DMA_IRQHandler+0x13e>
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d108      	bne.n	8002c4e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c4c:	e007      	b.n	8002c5e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	60da      	str	r2, [r3, #12]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <DMA_CalcBaseAndBitshift+0x60>)
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d80f      	bhi.n	8002ca0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	009a      	lsls	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <DMA_CalcBaseAndBitshift+0x6c>)
 8002c9c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002c9e:	e00e      	b.n	8002cbe <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <DMA_CalcBaseAndBitshift+0x70>)
 8002ca8:	4413      	add	r3, r2
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	009a      	lsls	r2, r3, #2
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <DMA_CalcBaseAndBitshift+0x74>)
 8002cbc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40020407 	.word	0x40020407
 8002cd0:	bffdfff8 	.word	0xbffdfff8
 8002cd4:	cccccccd 	.word	0xcccccccd
 8002cd8:	40020000 	.word	0x40020000
 8002cdc:	bffdfbf8 	.word	0xbffdfbf8
 8002ce0:	40020400 	.word	0x40020400

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf2:	e154      	b.n	8002f9e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8146 	beq.w	8002f98 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d005      	beq.n	8002d24 <HAL_GPIO_Init+0x40>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d130      	bne.n	8002d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	f003 0201 	and.w	r2, r3, #1
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d017      	beq.n	8002dc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d123      	bne.n	8002e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	08da      	lsrs	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3208      	adds	r2, #8
 8002dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	220f      	movs	r2, #15
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4013      	ands	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	08da      	lsrs	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3208      	adds	r2, #8
 8002e10:	6939      	ldr	r1, [r7, #16]
 8002e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2203      	movs	r2, #3
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0203 	and.w	r2, r3, #3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80a0 	beq.w	8002f98 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <HAL_GPIO_Init+0x2d8>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a57      	ldr	r2, [pc, #348]	; (8002fbc <HAL_GPIO_Init+0x2d8>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6193      	str	r3, [r2, #24]
 8002e64:	4b55      	ldr	r3, [pc, #340]	; (8002fbc <HAL_GPIO_Init+0x2d8>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e70:	4a53      	ldr	r2, [pc, #332]	; (8002fc0 <HAL_GPIO_Init+0x2dc>)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	089b      	lsrs	r3, r3, #2
 8002e76:	3302      	adds	r3, #2
 8002e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e9a:	d019      	beq.n	8002ed0 <HAL_GPIO_Init+0x1ec>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a49      	ldr	r2, [pc, #292]	; (8002fc4 <HAL_GPIO_Init+0x2e0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_GPIO_Init+0x1e8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a48      	ldr	r2, [pc, #288]	; (8002fc8 <HAL_GPIO_Init+0x2e4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_GPIO_Init+0x1e4>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a47      	ldr	r2, [pc, #284]	; (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <HAL_GPIO_Init+0x1e0>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a46      	ldr	r2, [pc, #280]	; (8002fd0 <HAL_GPIO_Init+0x2ec>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d101      	bne.n	8002ec0 <HAL_GPIO_Init+0x1dc>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	e008      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ec0:	2305      	movs	r3, #5
 8002ec2:	e006      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e004      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e002      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	f002 0203 	and.w	r2, r2, #3
 8002ed8:	0092      	lsls	r2, r2, #2
 8002eda:	4093      	lsls	r3, r2
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ee2:	4937      	ldr	r1, [pc, #220]	; (8002fc0 <HAL_GPIO_Init+0x2dc>)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	3302      	adds	r3, #2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef0:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f14:	4a2f      	ldr	r2, [pc, #188]	; (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f1a:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f3e:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f44:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f92:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f47f aea3 	bne.w	8002cf4 <HAL_GPIO_Init+0x10>
  }
}
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	48000400 	.word	0x48000400
 8002fc8:	48000800 	.word	0x48000800
 8002fcc:	48000c00 	.word	0x48000c00
 8002fd0:	48001000 	.word	0x48001000
 8002fd4:	40010400 	.word	0x40010400

08002fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe8:	787b      	ldrb	r3, [r7, #1]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ff6:	887a      	ldrh	r2, [r7, #2]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	041a      	lsls	r2, r3, #16
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	43d9      	mvns	r1, r3
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	400b      	ands	r3, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e081      	b.n	8003152 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe f9a2 	bl	80013ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800308c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800309c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	e006      	b.n	80030c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d104      	bne.n	80030d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69d9      	ldr	r1, [r3, #28]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1a      	ldr	r2, [r3, #32]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003178:	2b28      	cmp	r3, #40	; 0x28
 800317a:	f040 808a 	bne.w	8003292 <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003190:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e07e      	b.n	8003294 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003196:	f248 0101 	movw	r1, #32769	; 0x8001
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f001 f9ea 	bl	8004574 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e072      	b.n	8003294 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b2a      	cmp	r3, #42	; 0x2a
 80031c0:	d12a      	bne.n	8003218 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80031c2:	2102      	movs	r1, #2
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f001 f9d5 	bl	8004574 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d8:	d11e      	bne.n	8003218 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e8:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d012      	beq.n	8003218 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	4a29      	ldr	r2, [pc, #164]	; (800329c <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fc17 	bl	8002a32 <HAL_DMA_Abort_IT>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d006      	beq.n	8003218 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003214:	4610      	mov	r0, r2
 8003216:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2229      	movs	r2, #41	; 0x29
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	88fa      	ldrh	r2, [r7, #6]
 8003248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 800325e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d103      	bne.n	800327c <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2208      	movs	r2, #8
 800327a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003284:	f248 0101 	movw	r1, #32769	; 0x8001
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f001 f90f 	bl	80044ac <I2C_Enable_IRQ>

    return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	08004413 	.word	0x08004413
 80032a0:	0800359f 	.word	0x0800359f

080032a4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032c0:	2b28      	cmp	r3, #40	; 0x28
 80032c2:	f040 808a 	bne.w	80033da <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d105      	bne.n	80032de <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e07e      	b.n	80033dc <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032de:	f248 0102 	movw	r1, #32770	; 0x8002
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f001 f946 	bl	8004574 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e072      	b.n	80033dc <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b29      	cmp	r3, #41	; 0x29
 8003308:	d12a      	bne.n	8003360 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800330a:	2101      	movs	r1, #1
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f001 f931 	bl	8004574 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800331c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003320:	d11e      	bne.n	8003360 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003330:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 8003340:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fb73 	bl	8002a32 <HAL_DMA_Abort_IT>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d006      	beq.n	8003360 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800335c:	4610      	mov	r0, r2
 800335e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	222a      	movs	r2, #42	; 0x2a
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003384:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	0c1b      	lsrs	r3, r3, #16
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2208      	movs	r2, #8
 80033c2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80033cc:	f248 0102 	movw	r1, #32770	; 0x8002
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f001 f86b 	bl	80044ac <I2C_Enable_IRQ>

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	08004413 	.word	0x08004413
 80033e8:	0800359f 	.word	0x0800359f

080033ec <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d10d      	bne.n	800341c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2228      	movs	r2, #40	; 0x28
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a07      	ldr	r2, [pc, #28]	; (8003428 <HAL_I2C_EnableListen_IT+0x3c>)
 800340c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800340e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f001 f84a 	bl	80044ac <I2C_Enable_IRQ>

    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	0800359f 	.word	0x0800359f

0800342c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
  }
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d010      	beq.n	80034a6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	09db      	lsrs	r3, r3, #7
 8003488:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	0a9b      	lsrs	r3, r3, #10
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d010      	beq.n	80034d4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	09db      	lsrs	r3, r3, #7
 80034b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f043 0208 	orr.w	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	0a5b      	lsrs	r3, r3, #9
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	09db      	lsrs	r3, r3, #7
 80034e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f0:	f043 0202 	orr.w	r2, r3, #2
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003500:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 030b 	and.w	r3, r3, #11
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fe61 	bl	80041dc <I2C_ITError>
  }
}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <I2C_Slave_ISR_IT+0x24>
 80035be:	2302      	movs	r3, #2
 80035c0:	e0ec      	b.n	800379c <I2C_Slave_ISR_IT+0x1fe>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80035e2:	6939      	ldr	r1, [r7, #16]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fc99 	bl	8003f1c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d04d      	beq.n	8003692 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d047      	beq.n	8003692 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d128      	bne.n	800365e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b28      	cmp	r3, #40	; 0x28
 8003616:	d108      	bne.n	800362a <I2C_Slave_ISR_IT+0x8c>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361e:	d104      	bne.n	800362a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003620:	6939      	ldr	r1, [r7, #16]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 fd84 	bl	8004130 <I2C_ITListenCplt>
 8003628:	e032      	b.n	8003690 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b29      	cmp	r3, #41	; 0x29
 8003634:	d10e      	bne.n	8003654 <I2C_Slave_ISR_IT+0xb6>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800363c:	d00a      	beq.n	8003654 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2210      	movs	r2, #16
 8003644:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 febf 	bl	80043ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 fb3d 	bl	8003ccc <I2C_ITSlaveSeqCplt>
 8003652:	e01d      	b.n	8003690 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2210      	movs	r2, #16
 800365a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800365c:	e096      	b.n	800378c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2210      	movs	r2, #16
 8003664:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f043 0204 	orr.w	r2, r3, #4
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <I2C_Slave_ISR_IT+0xe4>
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800367e:	f040 8085 	bne.w	800378c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	4619      	mov	r1, r3
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fda7 	bl	80041dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800368e:	e07d      	b.n	800378c <I2C_Slave_ISR_IT+0x1ee>
 8003690:	e07c      	b.n	800378c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d030      	beq.n	8003700 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d02a      	beq.n	8003700 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d018      	beq.n	80036e6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d14f      	bne.n	8003790 <I2C_Slave_ISR_IT+0x1f2>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036f6:	d04b      	beq.n	8003790 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fae7 	bl	8003ccc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80036fe:	e047      	b.n	8003790 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	08db      	lsrs	r3, r3, #3
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003718:	6939      	ldr	r1, [r7, #16]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fa15 	bl	8003b4a <I2C_ITAddrCplt>
 8003720:	e037      	b.n	8003792 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d031      	beq.n	8003792 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02b      	beq.n	8003792 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d018      	beq.n	8003776 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
 8003774:	e00d      	b.n	8003792 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800377c:	d002      	beq.n	8003784 <I2C_Slave_ISR_IT+0x1e6>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 faa1 	bl	8003ccc <I2C_ITSlaveSeqCplt>
 800378a:	e002      	b.n	8003792 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800378c:	bf00      	nop
 800378e:	e000      	b.n	8003792 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003790:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <I2C_Master_ISR_DMA+0x1a>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e0e1      	b.n	8003982 <I2C_Master_ISR_DMA+0x1de>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d017      	beq.n	8003802 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2210      	movs	r2, #16
 80037e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f043 0204 	orr.w	r2, r3, #4
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80037f2:	2120      	movs	r1, #32
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fe59 	bl	80044ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fde5 	bl	80043ca <I2C_Flush_TXDR>
 8003800:	e0ba      	b.n	8003978 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	09db      	lsrs	r3, r3, #7
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d072      	beq.n	80038f4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003816:	2b00      	cmp	r3, #0
 8003818:	d06c      	beq.n	80038f4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003828:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d04e      	beq.n	80038d2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	b29b      	uxth	r3, r3
 800383c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003840:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2bff      	cmp	r3, #255	; 0xff
 800384a:	d906      	bls.n	800385a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	22ff      	movs	r2, #255	; 0xff
 8003850:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003852:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e010      	b.n	800387c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800386c:	d003      	beq.n	8003876 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e002      	b.n	800387c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003880:	b2da      	uxtb	r2, r3
 8003882:	8a79      	ldrh	r1, [r7, #18]
 8003884:	2300      	movs	r3, #0
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fde0 	bl	8004450 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b22      	cmp	r3, #34	; 0x22
 80038ac:	d108      	bne.n	80038c0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80038be:	e05b      	b.n	8003978 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80038d0:	e052      	b.n	8003978 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038e0:	d003      	beq.n	80038ea <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f9b5 	bl	8003c52 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80038e8:	e046      	b.n	8003978 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80038ea:	2140      	movs	r1, #64	; 0x40
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fc75 	bl	80041dc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80038f2:	e041      	b.n	8003978 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d029      	beq.n	8003954 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	099b      	lsrs	r3, r3, #6
 8003904:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003908:	2b00      	cmp	r3, #0
 800390a:	d023      	beq.n	8003954 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d119      	bne.n	800394a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003924:	d027      	beq.n	8003976 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800392e:	d108      	bne.n	8003942 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800393e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003940:	e019      	b.n	8003976 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f985 	bl	8003c52 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003948:	e015      	b.n	8003976 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800394a:	2140      	movs	r1, #64	; 0x40
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fc45 	bl	80041dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003952:	e010      	b.n	8003976 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fa0a 	bl	8003d88 <I2C_ITMasterCplt>
 8003974:	e000      	b.n	8003978 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003976:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b088      	sub	sp, #32
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <I2C_Slave_ISR_DMA+0x24>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e0c9      	b.n	8003b42 <I2C_Slave_ISR_DMA+0x1b8>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 faa3 	bl	8003f1c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 809a 	beq.w	8003b18 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8093 	beq.w	8003b18 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0b9b      	lsrs	r3, r3, #14
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d105      	bne.n	8003a0a <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0bdb      	lsrs	r3, r3, #15
 8003a02:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d07f      	beq.n	8003b0a <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0bdb      	lsrs	r3, r3, #15
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	0b9b      	lsrs	r3, r3, #14
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d128      	bne.n	8003aaa <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b28      	cmp	r3, #40	; 0x28
 8003a62:	d108      	bne.n	8003a76 <I2C_Slave_ISR_DMA+0xec>
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a6a:	d104      	bne.n	8003a76 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fb5e 	bl	8004130 <I2C_ITListenCplt>
 8003a74:	e048      	b.n	8003b08 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b29      	cmp	r3, #41	; 0x29
 8003a80:	d10e      	bne.n	8003aa0 <I2C_Slave_ISR_DMA+0x116>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a88:	d00a      	beq.n	8003aa0 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2210      	movs	r2, #16
 8003a90:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fc99 	bl	80043ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f917 	bl	8003ccc <I2C_ITSlaveSeqCplt>
 8003a9e:	e033      	b.n	8003b08 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003aa8:	e034      	b.n	8003b14 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2210      	movs	r2, #16
 8003ab0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <I2C_Slave_ISR_DMA+0x14a>
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ad2:	d11f      	bne.n	8003b14 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	2b21      	cmp	r3, #33	; 0x21
 8003ad8:	d002      	beq.n	8003ae0 <I2C_Slave_ISR_DMA+0x156>
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	2b29      	cmp	r3, #41	; 0x29
 8003ade:	d103      	bne.n	8003ae8 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2221      	movs	r2, #33	; 0x21
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ae6:	e008      	b.n	8003afa <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	2b22      	cmp	r3, #34	; 0x22
 8003aec:	d002      	beq.n	8003af4 <I2C_Slave_ISR_DMA+0x16a>
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	2b2a      	cmp	r3, #42	; 0x2a
 8003af2:	d102      	bne.n	8003afa <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2222      	movs	r2, #34	; 0x22
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	4619      	mov	r1, r3
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fb6b 	bl	80041dc <I2C_ITError>
      if (treatdmanack == 1U)
 8003b06:	e005      	b.n	8003b14 <I2C_Slave_ISR_DMA+0x18a>
 8003b08:	e004      	b.n	8003b14 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2210      	movs	r2, #16
 8003b10:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b12:	e011      	b.n	8003b38 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003b14:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b16:	e00f      	b.n	8003b38 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	08db      	lsrs	r3, r3, #3
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	08db      	lsrs	r3, r3, #3
 8003b28:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f809 	bl	8003b4a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b60:	2b28      	cmp	r3, #40	; 0x28
 8003b62:	d16a      	bne.n	8003c3a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	0c1b      	lsrs	r3, r3, #16
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b82:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b90:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b9e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d138      	bne.n	8003c1a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003ba8:	897b      	ldrh	r3, [r7, #10]
 8003baa:	09db      	lsrs	r3, r3, #7
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	89bb      	ldrh	r3, [r7, #12]
 8003bb0:	4053      	eors	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f003 0306 	and.w	r3, r3, #6
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d11c      	bne.n	8003bf6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003bbc:	897b      	ldrh	r3, [r7, #10]
 8003bbe:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d13b      	bne.n	8003c4a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003be8:	89ba      	ldrh	r2, [r7, #12]
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fc ff08 	bl	8000a04 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003bf4:	e029      	b.n	8003c4a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003bf6:	893b      	ldrh	r3, [r7, #8]
 8003bf8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fcb8 	bl	8004574 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c0c:	89ba      	ldrh	r2, [r7, #12]
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fc fef6 	bl	8000a04 <HAL_I2C_AddrCallback>
}
 8003c18:	e017      	b.n	8003c4a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fca8 	bl	8004574 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c2c:	89ba      	ldrh	r2, [r7, #12]
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fc fee6 	bl	8000a04 <HAL_I2C_AddrCallback>
}
 8003c38:	e007      	b.n	8003c4a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2208      	movs	r2, #8
 8003c40:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b21      	cmp	r3, #33	; 0x21
 8003c6c:	d115      	bne.n	8003c9a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2211      	movs	r2, #17
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c82:	2101      	movs	r1, #1
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fc75 	bl	8004574 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fc45 	bl	8003522 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c98:	e014      	b.n	8003cc4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2212      	movs	r2, #18
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003cae:	2102      	movs	r1, #2
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fc5f 	bl	8004574 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fc39 	bl	8003536 <HAL_I2C_MasterRxCpltCallback>
}
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	0b9b      	lsrs	r3, r3, #14
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e00d      	b.n	8003d1e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	0bdb      	lsrs	r3, r3, #15
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d1c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b29      	cmp	r3, #41	; 0x29
 8003d28:	d112      	bne.n	8003d50 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2228      	movs	r2, #40	; 0x28
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2221      	movs	r2, #33	; 0x21
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d38:	2101      	movs	r1, #1
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fc1a 	bl	8004574 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7fc ff59 	bl	8000c00 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d4e:	e017      	b.n	8003d80 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b2a      	cmp	r3, #42	; 0x2a
 8003d5a:	d111      	bne.n	8003d80 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2228      	movs	r2, #40	; 0x28
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2222      	movs	r2, #34	; 0x22
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fc01 	bl	8004574 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fc ff30 	bl	8000be0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b21      	cmp	r3, #33	; 0x21
 8003da8:	d107      	bne.n	8003dba <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003daa:	2101      	movs	r1, #1
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fbe1 	bl	8004574 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2211      	movs	r2, #17
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
 8003db8:	e00c      	b.n	8003dd4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b22      	cmp	r3, #34	; 0x22
 8003dc4:	d106      	bne.n	8003dd4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fbd3 	bl	8004574 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2212      	movs	r2, #18
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6859      	ldr	r1, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b4d      	ldr	r3, [pc, #308]	; (8003f14 <I2C_ITMasterCplt+0x18c>)
 8003de0:	400b      	ands	r3, r1
 8003de2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4a      	ldr	r2, [pc, #296]	; (8003f18 <I2C_ITMasterCplt+0x190>)
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d009      	beq.n	8003e10 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2210      	movs	r2, #16
 8003e02:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	f043 0204 	orr.w	r2, r3, #4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b60      	cmp	r3, #96	; 0x60
 8003e1a:	d10b      	bne.n	8003e34 <I2C_ITMasterCplt+0xac>
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003e32:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fac8 	bl	80043ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b60      	cmp	r3, #96	; 0x60
 8003e4a:	d002      	beq.n	8003e52 <I2C_ITMasterCplt+0xca>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f9bf 	bl	80041dc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e5e:	e054      	b.n	8003f0a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b21      	cmp	r3, #33	; 0x21
 8003e6a:	d124      	bne.n	8003eb6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d10b      	bne.n	8003e9e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fb57 	bl	800354a <HAL_I2C_MemTxCpltCallback>
}
 8003e9c:	e035      	b.n	8003f0a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fb37 	bl	8003522 <HAL_I2C_MasterTxCpltCallback>
}
 8003eb4:	e029      	b.n	8003f0a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b22      	cmp	r3, #34	; 0x22
 8003ec0:	d123      	bne.n	8003f0a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b40      	cmp	r3, #64	; 0x40
 8003eda:	d10b      	bne.n	8003ef4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff fb36 	bl	800355e <HAL_I2C_MemRxCpltCallback>
}
 8003ef2:	e00a      	b.n	8003f0a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fb16 	bl	8003536 <HAL_I2C_MasterRxCpltCallback>
}
 8003f0a:	bf00      	nop
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	fe00e800 	.word	0xfe00e800
 8003f18:	ffff0000 	.word	0xffff0000

08003f1c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f38:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b21      	cmp	r3, #33	; 0x21
 8003f46:	d002      	beq.n	8003f4e <I2C_ITSlaveCplt+0x32>
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b29      	cmp	r3, #41	; 0x29
 8003f4c:	d108      	bne.n	8003f60 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f4e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fb0e 	bl	8004574 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2221      	movs	r2, #33	; 0x21
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f5e:	e00d      	b.n	8003f7c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b22      	cmp	r3, #34	; 0x22
 8003f64:	d002      	beq.n	8003f6c <I2C_ITSlaveCplt+0x50>
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b2a      	cmp	r3, #42	; 0x2a
 8003f6a:	d107      	bne.n	8003f7c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f6c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 faff 	bl	8004574 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2222      	movs	r2, #34	; 0x22
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4b64      	ldr	r3, [pc, #400]	; (8004128 <I2C_ITSlaveCplt+0x20c>)
 8003f98:	400b      	ands	r3, r1
 8003f9a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fa14 	bl	80043ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	0b9b      	lsrs	r3, r3, #14
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d013      	beq.n	8003fd6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fbc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d020      	beq.n	8004008 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fd4:	e018      	b.n	8004008 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	0bdb      	lsrs	r3, r3, #15
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d012      	beq.n	8004008 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ff0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f023 0304 	bic.w	r3, r3, #4
 800401a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00c      	beq.n	8004056 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	f043 0204 	orr.w	r2, r3, #4
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f8a7 	bl	80041dc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b28      	cmp	r3, #40	; 0x28
 8004098:	d141      	bne.n	800411e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800409a:	6979      	ldr	r1, [r7, #20]
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f847 	bl	8004130 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040a2:	e03c      	b.n	800411e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ac:	d014      	beq.n	80040d8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff fe0c 	bl	8003ccc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1d      	ldr	r2, [pc, #116]	; (800412c <I2C_ITSlaveCplt+0x210>)
 80040b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7fc fd79 	bl	8000bc8 <HAL_I2C_ListenCpltCallback>
}
 80040d6:	e022      	b.n	800411e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b22      	cmp	r3, #34	; 0x22
 80040e2:	d10e      	bne.n	8004102 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fc fd70 	bl	8000be0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004100:	e00d      	b.n	800411e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7fc fd71 	bl	8000c00 <HAL_I2C_SlaveTxCpltCallback>
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	fe00e800 	.word	0xfe00e800
 800412c:	ffff0000 	.word	0xffff0000

08004130 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <I2C_ITListenCplt+0xa8>)
 800413e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d022      	beq.n	80041ae <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f043 0204 	orr.w	r2, r3, #4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041ae:	f248 0103 	movw	r1, #32771	; 0x8003
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f9de 	bl	8004574 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2210      	movs	r2, #16
 80041be:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7fc fcfd 	bl	8000bc8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	ffff0000 	.word	0xffff0000

080041dc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a5d      	ldr	r2, [pc, #372]	; (8004370 <I2C_ITError+0x194>)
 80041fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b28      	cmp	r3, #40	; 0x28
 8004212:	d005      	beq.n	8004220 <I2C_ITError+0x44>
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b29      	cmp	r3, #41	; 0x29
 8004218:	d002      	beq.n	8004220 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	2b2a      	cmp	r3, #42	; 0x2a
 800421e:	d10b      	bne.n	8004238 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004220:	2103      	movs	r1, #3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f9a6 	bl	8004574 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2228      	movs	r2, #40	; 0x28
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a50      	ldr	r2, [pc, #320]	; (8004374 <I2C_ITError+0x198>)
 8004234:	635a      	str	r2, [r3, #52]	; 0x34
 8004236:	e011      	b.n	800425c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004238:	f248 0103 	movw	r1, #32771	; 0x8003
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f999 	bl	8004574 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b60      	cmp	r3, #96	; 0x60
 800424c:	d003      	beq.n	8004256 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	2b00      	cmp	r3, #0
 8004268:	d039      	beq.n	80042de <I2C_ITError+0x102>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b11      	cmp	r3, #17
 800426e:	d002      	beq.n	8004276 <I2C_ITError+0x9a>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b21      	cmp	r3, #33	; 0x21
 8004274:	d133      	bne.n	80042de <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004284:	d107      	bne.n	8004296 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004294:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe fcaa 	bl	8002bf4 <HAL_DMA_GetState>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d017      	beq.n	80042d6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	4a33      	ldr	r2, [pc, #204]	; (8004378 <I2C_ITError+0x19c>)
 80042ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe fbb9 	bl	8002a32 <HAL_DMA_Abort_IT>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04d      	beq.n	8004362 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042d0:	4610      	mov	r0, r2
 80042d2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042d4:	e045      	b.n	8004362 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f850 	bl	800437c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042dc:	e041      	b.n	8004362 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d039      	beq.n	800435a <I2C_ITError+0x17e>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b12      	cmp	r3, #18
 80042ea:	d002      	beq.n	80042f2 <I2C_ITError+0x116>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b22      	cmp	r3, #34	; 0x22
 80042f0:	d133      	bne.n	800435a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004300:	d107      	bne.n	8004312 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004310:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fc6c 	bl	8002bf4 <HAL_DMA_GetState>
 800431c:	4603      	mov	r3, r0
 800431e:	2b01      	cmp	r3, #1
 8004320:	d017      	beq.n	8004352 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	4a14      	ldr	r2, [pc, #80]	; (8004378 <I2C_ITError+0x19c>)
 8004328:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fb7b 	bl	8002a32 <HAL_DMA_Abort_IT>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800434c:	4610      	mov	r0, r2
 800434e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004350:	e009      	b.n	8004366 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f812 	bl	800437c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004358:	e005      	b.n	8004366 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f80e 	bl	800437c <I2C_TreatErrorCallback>
  }
}
 8004360:	e002      	b.n	8004368 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004366:	bf00      	nop
}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	ffff0000 	.word	0xffff0000
 8004374:	0800359f 	.word	0x0800359f
 8004378:	08004413 	.word	0x08004413

0800437c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b60      	cmp	r3, #96	; 0x60
 800438e:	d10e      	bne.n	80043ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff f8e3 	bl	8003572 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043ac:	e009      	b.n	80043c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fc fc2f 	bl	8000c20 <HAL_I2C_ErrorCallback>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d103      	bne.n	80043e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2200      	movs	r2, #0
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d007      	beq.n	8004406 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0201 	orr.w	r2, r2, #1
 8004404:	619a      	str	r2, [r3, #24]
  }
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	2200      	movs	r2, #0
 800442e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	2200      	movs	r2, #0
 800443e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff ff9b 	bl	800437c <I2C_TreatErrorCallback>
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	817b      	strh	r3, [r7, #10]
 800445e:	4613      	mov	r3, r2
 8004460:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	0d5b      	lsrs	r3, r3, #21
 800446c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004470:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <I2C_TransferConfig+0x58>)
 8004472:	430b      	orrs	r3, r1
 8004474:	43db      	mvns	r3, r3
 8004476:	ea02 0103 	and.w	r1, r2, r3
 800447a:	897b      	ldrh	r3, [r7, #10]
 800447c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004480:	7a7b      	ldrb	r3, [r7, #9]
 8004482:	041b      	lsls	r3, r3, #16
 8004484:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	431a      	orrs	r2, r3
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	03ff63ff 	.word	0x03ff63ff

080044ac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	4a2a      	ldr	r2, [pc, #168]	; (800456c <I2C_Enable_IRQ+0xc0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80044ca:	4a29      	ldr	r2, [pc, #164]	; (8004570 <I2C_Enable_IRQ+0xc4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d11d      	bne.n	800450c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	da03      	bge.n	80044e0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80044de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80044e0:	887b      	ldrh	r3, [r7, #2]
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d103      	bne.n	80044ee <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80044ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044ee:	887b      	ldrh	r3, [r7, #2]
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d103      	bne.n	80044fc <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80044fc:	887b      	ldrh	r3, [r7, #2]
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d125      	bne.n	800454e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004508:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800450a:	e020      	b.n	800454e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800450c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004510:	2b00      	cmp	r3, #0
 8004512:	da03      	bge.n	800451c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800451a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800452c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800452e:	887b      	ldrh	r3, [r7, #2]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800453e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004540:	887b      	ldrh	r3, [r7, #2]
 8004542:	2b20      	cmp	r3, #32
 8004544:	d103      	bne.n	800454e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f043 0320 	orr.w	r3, r3, #32
 800454c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	430a      	orrs	r2, r1
 800455c:	601a      	str	r2, [r3, #0]
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	080037a5 	.word	0x080037a5
 8004570:	0800398b 	.word	0x0800398b

08004574 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004584:	887b      	ldrh	r3, [r7, #2]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00f      	beq.n	80045ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004594:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045a2:	2b28      	cmp	r3, #40	; 0x28
 80045a4:	d003      	beq.n	80045ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80045ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80045ae:	887b      	ldrh	r3, [r7, #2]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00f      	beq.n	80045d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80045be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045cc:	2b28      	cmp	r3, #40	; 0x28
 80045ce:	d003      	beq.n	80045d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80045d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80045d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da03      	bge.n	80045e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	2b10      	cmp	r3, #16
 80045ec:	d103      	bne.n	80045f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80045f6:	887b      	ldrh	r3, [r7, #2]
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d103      	bne.n	8004604 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f043 0320 	orr.w	r3, r3, #32
 8004602:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004604:	887b      	ldrh	r3, [r7, #2]
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d103      	bne.n	8004612 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004610:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6819      	ldr	r1, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	43da      	mvns	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	400a      	ands	r2, r1
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b20      	cmp	r3, #32
 8004644:	d138      	bne.n	80046b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004650:	2302      	movs	r3, #2
 8004652:	e032      	b.n	80046ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2224      	movs	r2, #36	; 0x24
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0201 	bic.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004682:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e000      	b.n	80046ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b085      	sub	sp, #20
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d139      	bne.n	8004750 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e033      	b.n	8004752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2224      	movs	r2, #36	; 0x24
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004718:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004766:	af00      	add	r7, sp, #0
 8004768:	1d3b      	adds	r3, r7, #4
 800476a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800476c:	1d3b      	adds	r3, r7, #4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f000 bef4 	b.w	8005562 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 816a 	beq.w	8004a5e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800478a:	4bb3      	ldr	r3, [pc, #716]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 030c 	and.w	r3, r3, #12
 8004792:	2b04      	cmp	r3, #4
 8004794:	d00c      	beq.n	80047b0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004796:	4bb0      	ldr	r3, [pc, #704]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d159      	bne.n	8004856 <HAL_RCC_OscConfig+0xf6>
 80047a2:	4bad      	ldr	r3, [pc, #692]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ae:	d152      	bne.n	8004856 <HAL_RCC_OscConfig+0xf6>
 80047b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d102      	bne.n	80047e2 <HAL_RCC_OscConfig+0x82>
 80047dc:	4b9e      	ldr	r3, [pc, #632]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	e015      	b.n	800480e <HAL_RCC_OscConfig+0xae>
 80047e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80047f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80047fe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004802:	fa93 f3a3 	rbit	r3, r3
 8004806:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800480a:	4b93      	ldr	r3, [pc, #588]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004812:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004816:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800481a:	fa92 f2a2 	rbit	r2, r2
 800481e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004822:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004826:	fab2 f282 	clz	r2, r2
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	f042 0220 	orr.w	r2, r2, #32
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	f002 021f 	and.w	r2, r2, #31
 8004836:	2101      	movs	r1, #1
 8004838:	fa01 f202 	lsl.w	r2, r1, r2
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 810c 	beq.w	8004a5c <HAL_RCC_OscConfig+0x2fc>
 8004844:	1d3b      	adds	r3, r7, #4
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f040 8106 	bne.w	8004a5c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	f000 be86 	b.w	8005562 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d106      	bne.n	8004870 <HAL_RCC_OscConfig+0x110>
 8004862:	4b7d      	ldr	r3, [pc, #500]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7c      	ldr	r2, [pc, #496]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e030      	b.n	80048d2 <HAL_RCC_OscConfig+0x172>
 8004870:	1d3b      	adds	r3, r7, #4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0x134>
 800487a:	4b77      	ldr	r3, [pc, #476]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a76      	ldr	r2, [pc, #472]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 8004880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b74      	ldr	r3, [pc, #464]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a73      	ldr	r2, [pc, #460]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 800488c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e01e      	b.n	80048d2 <HAL_RCC_OscConfig+0x172>
 8004894:	1d3b      	adds	r3, r7, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800489e:	d10c      	bne.n	80048ba <HAL_RCC_OscConfig+0x15a>
 80048a0:	4b6d      	ldr	r3, [pc, #436]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a6c      	ldr	r2, [pc, #432]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80048a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4b6a      	ldr	r3, [pc, #424]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a69      	ldr	r2, [pc, #420]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80048b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	e00b      	b.n	80048d2 <HAL_RCC_OscConfig+0x172>
 80048ba:	4b67      	ldr	r3, [pc, #412]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a66      	ldr	r2, [pc, #408]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80048c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4b64      	ldr	r3, [pc, #400]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a63      	ldr	r2, [pc, #396]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80048cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048d2:	4b61      	ldr	r3, [pc, #388]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	f023 020f 	bic.w	r2, r3, #15
 80048da:	1d3b      	adds	r3, r7, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	495d      	ldr	r1, [pc, #372]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d059      	beq.n	80049a4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fc fe92 	bl	8001618 <HAL_GetTick>
 80048f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048fa:	f7fc fe8d 	bl	8001618 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	; 0x64
 8004908:	d902      	bls.n	8004910 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	f000 be29 	b.w	8005562 <HAL_RCC_OscConfig+0xe02>
 8004910:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004914:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004924:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	b2db      	uxtb	r3, r3
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d102      	bne.n	8004942 <HAL_RCC_OscConfig+0x1e2>
 800493c:	4b46      	ldr	r3, [pc, #280]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	e015      	b.n	800496e <HAL_RCC_OscConfig+0x20e>
 8004942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004946:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004956:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800495a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800495e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004962:	fa93 f3a3 	rbit	r3, r3
 8004966:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800496a:	4b3b      	ldr	r3, [pc, #236]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004972:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004976:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800497a:	fa92 f2a2 	rbit	r2, r2
 800497e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004982:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004986:	fab2 f282 	clz	r2, r2
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	f042 0220 	orr.w	r2, r2, #32
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	f002 021f 	and.w	r2, r2, #31
 8004996:	2101      	movs	r1, #1
 8004998:	fa01 f202 	lsl.w	r2, r1, r2
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0ab      	beq.n	80048fa <HAL_RCC_OscConfig+0x19a>
 80049a2:	e05c      	b.n	8004a5e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7fc fe38 	bl	8001618 <HAL_GetTick>
 80049a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ac:	e00a      	b.n	80049c4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ae:	f7fc fe33 	bl	8001618 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	; 0x64
 80049bc:	d902      	bls.n	80049c4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	f000 bdcf 	b.w	8005562 <HAL_RCC_OscConfig+0xe02>
 80049c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80049d0:	fa93 f3a3 	rbit	r3, r3
 80049d4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80049d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d102      	bne.n	80049f6 <HAL_RCC_OscConfig+0x296>
 80049f0:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	e015      	b.n	8004a22 <HAL_RCC_OscConfig+0x2c2>
 80049f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a0e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a12:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004a16:	fa93 f3a3 	rbit	r3, r3
 8004a1a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004a1e:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <HAL_RCC_OscConfig+0x2f8>)
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a26:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004a2a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a2e:	fa92 f2a2 	rbit	r2, r2
 8004a32:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004a36:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004a3a:	fab2 f282 	clz	r2, r2
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	f042 0220 	orr.w	r2, r2, #32
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	f002 021f 	and.w	r2, r2, #31
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1ab      	bne.n	80049ae <HAL_RCC_OscConfig+0x24e>
 8004a56:	e002      	b.n	8004a5e <HAL_RCC_OscConfig+0x2fe>
 8004a58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 816f 	beq.w	8004d4c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a6e:	4bd0      	ldr	r3, [pc, #832]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a7a:	4bcd      	ldr	r3, [pc, #820]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d16c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x400>
 8004a86:	4bca      	ldr	r3, [pc, #808]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d166      	bne.n	8004b60 <HAL_RCC_OscConfig+0x400>
 8004a92:	2302      	movs	r3, #2
 8004a94:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a98:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a9c:	fa93 f3a3 	rbit	r3, r3
 8004aa0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004aa4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa8:	fab3 f383 	clz	r3, r3
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d102      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x362>
 8004abc:	4bbc      	ldr	r3, [pc, #752]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	e013      	b.n	8004aea <HAL_RCC_OscConfig+0x38a>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004acc:	fa93 f3a3 	rbit	r3, r3
 8004ad0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ada:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004ae6:	4bb2      	ldr	r3, [pc, #712]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2202      	movs	r2, #2
 8004aec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004af0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004af4:	fa92 f2a2 	rbit	r2, r2
 8004af8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004afc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004b00:	fab2 f282 	clz	r2, r2
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	f042 0220 	orr.w	r2, r2, #32
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	f002 021f 	and.w	r2, r2, #31
 8004b10:	2101      	movs	r1, #1
 8004b12:	fa01 f202 	lsl.w	r2, r1, r2
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <HAL_RCC_OscConfig+0x3cc>
 8004b1c:	1d3b      	adds	r3, r7, #4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f000 bd1b 	b.w	8005562 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4ba0      	ldr	r3, [pc, #640]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b34:	1d3b      	adds	r3, r7, #4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	21f8      	movs	r1, #248	; 0xf8
 8004b3c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b44:	fa91 f1a1 	rbit	r1, r1
 8004b48:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004b4c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004b50:	fab1 f181 	clz	r1, r1
 8004b54:	b2c9      	uxtb	r1, r1
 8004b56:	408b      	lsls	r3, r1
 8004b58:	4995      	ldr	r1, [pc, #596]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5e:	e0f5      	b.n	8004d4c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 8085 	beq.w	8004c76 <HAL_RCC_OscConfig+0x516>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b72:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b76:	fa93 f3a3 	rbit	r3, r3
 8004b7a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004b7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b82:	fab3 f383 	clz	r3, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	461a      	mov	r2, r3
 8004b94:	2301      	movs	r3, #1
 8004b96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b98:	f7fc fd3e 	bl	8001618 <HAL_GetTick>
 8004b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba0:	e00a      	b.n	8004bb8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba2:	f7fc fd39 	bl	8001618 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d902      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	f000 bcd5 	b.w	8005562 <HAL_RCC_OscConfig+0xe02>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004bca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bce:	fab3 f383 	clz	r3, r3
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d102      	bne.n	8004be8 <HAL_RCC_OscConfig+0x488>
 8004be2:	4b73      	ldr	r3, [pc, #460]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	e013      	b.n	8004c10 <HAL_RCC_OscConfig+0x4b0>
 8004be8:	2302      	movs	r3, #2
 8004bea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c04:	fa93 f3a3 	rbit	r3, r3
 8004c08:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c0c:	4b68      	ldr	r3, [pc, #416]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2202      	movs	r2, #2
 8004c12:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004c16:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c1a:	fa92 f2a2 	rbit	r2, r2
 8004c1e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004c22:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c26:	fab2 f282 	clz	r2, r2
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	f042 0220 	orr.w	r2, r2, #32
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	f002 021f 	and.w	r2, r2, #31
 8004c36:	2101      	movs	r1, #1
 8004c38:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0af      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c42:	4b5b      	ldr	r3, [pc, #364]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	21f8      	movs	r1, #248	; 0xf8
 8004c52:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c5a:	fa91 f1a1 	rbit	r1, r1
 8004c5e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004c62:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004c66:	fab1 f181 	clz	r1, r1
 8004c6a:	b2c9      	uxtb	r1, r1
 8004c6c:	408b      	lsls	r3, r1
 8004c6e:	4950      	ldr	r1, [pc, #320]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]
 8004c74:	e06a      	b.n	8004d4c <HAL_RCC_OscConfig+0x5ec>
 8004c76:	2301      	movs	r3, #1
 8004c78:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004c88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca2:	f7fc fcb9 	bl	8001618 <HAL_GetTick>
 8004ca6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cac:	f7fc fcb4 	bl	8001618 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d902      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	f000 bc50 	b.w	8005562 <HAL_RCC_OscConfig+0xe02>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ccc:	fa93 f3a3 	rbit	r3, r3
 8004cd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd8:	fab3 f383 	clz	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d102      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x592>
 8004cec:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	e013      	b.n	8004d1a <HAL_RCC_OscConfig+0x5ba>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d04:	2302      	movs	r3, #2
 8004d06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d0e:	fa93 f3a3 	rbit	r3, r3
 8004d12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d16:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <HAL_RCC_OscConfig+0x650>)
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004d20:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d24:	fa92 f2a2 	rbit	r2, r2
 8004d28:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004d2c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004d30:	fab2 f282 	clz	r2, r2
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	f042 0220 	orr.w	r2, r2, #32
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	f002 021f 	and.w	r2, r2, #31
 8004d40:	2101      	movs	r1, #1
 8004d42:	fa01 f202 	lsl.w	r2, r1, r2
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1af      	bne.n	8004cac <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4c:	1d3b      	adds	r3, r7, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80da 	beq.w	8004f10 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d5c:	1d3b      	adds	r3, r7, #4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d069      	beq.n	8004e3a <HAL_RCC_OscConfig+0x6da>
 8004d66:	2301      	movs	r3, #1
 8004d68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <HAL_RCC_OscConfig+0x654>)
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d90:	f7fc fc42 	bl	8001618 <HAL_GetTick>
 8004d94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d98:	e00e      	b.n	8004db8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d9a:	f7fc fc3d 	bl	8001618 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d906      	bls.n	8004db8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e3d9      	b.n	8005562 <HAL_RCC_OscConfig+0xe02>
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000
 8004db4:	10908120 	.word	0x10908120
 8004db8:	2302      	movs	r3, #2
 8004dba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004dca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004dce:	2202      	movs	r2, #2
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	fa93 f2a3 	rbit	r2, r3
 8004ddc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004de6:	2202      	movs	r2, #2
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	fa93 f2a3 	rbit	r2, r3
 8004df4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004df8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfa:	4ba5      	ldr	r3, [pc, #660]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dfe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e02:	2102      	movs	r1, #2
 8004e04:	6019      	str	r1, [r3, #0]
 8004e06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	fa93 f1a3 	rbit	r1, r3
 8004e10:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e14:	6019      	str	r1, [r3, #0]
  return result;
 8004e16:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	fab3 f383 	clz	r3, r3
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0b0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x63a>
 8004e38:	e06a      	b.n	8004f10 <HAL_RCC_OscConfig+0x7b0>
 8004e3a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e3e:	2201      	movs	r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	fa93 f2a3 	rbit	r2, r3
 8004e4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004e50:	601a      	str	r2, [r3, #0]
  return result;
 8004e52:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004e56:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e58:	fab3 f383 	clz	r3, r3
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	4b8c      	ldr	r3, [pc, #560]	; (8005094 <HAL_RCC_OscConfig+0x934>)
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	461a      	mov	r2, r3
 8004e68:	2300      	movs	r3, #0
 8004e6a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e6c:	f7fc fbd4 	bl	8001618 <HAL_GetTick>
 8004e70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e74:	e009      	b.n	8004e8a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e76:	f7fc fbcf 	bl	8001618 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e36b      	b.n	8005562 <HAL_RCC_OscConfig+0xe02>
 8004e8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004e8e:	2202      	movs	r2, #2
 8004e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	fa93 f2a3 	rbit	r2, r3
 8004e9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	fa93 f2a3 	rbit	r2, r3
 8004eb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	fa93 f2a3 	rbit	r2, r3
 8004ecc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ed0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed2:	4b6f      	ldr	r3, [pc, #444]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004eda:	2102      	movs	r1, #2
 8004edc:	6019      	str	r1, [r3, #0]
 8004ede:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	fa93 f1a3 	rbit	r1, r3
 8004ee8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004eec:	6019      	str	r1, [r3, #0]
  return result;
 8004eee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	fab3 f383 	clz	r3, r3
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	2101      	movs	r1, #1
 8004f06:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1b2      	bne.n	8004e76 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f10:	1d3b      	adds	r3, r7, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8158 	beq.w	80051d0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f20:	2300      	movs	r3, #0
 8004f22:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f26:	4b5a      	ldr	r3, [pc, #360]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d112      	bne.n	8004f58 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f32:	4b57      	ldr	r3, [pc, #348]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	4a56      	ldr	r2, [pc, #344]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	61d3      	str	r3, [r2, #28]
 8004f3e:	4b54      	ldr	r3, [pc, #336]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004f46:	f107 0308 	add.w	r3, r7, #8
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	f107 0308 	add.w	r3, r7, #8
 8004f50:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004f52:	2301      	movs	r3, #1
 8004f54:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f58:	4b4f      	ldr	r3, [pc, #316]	; (8005098 <HAL_RCC_OscConfig+0x938>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d11a      	bne.n	8004f9a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f64:	4b4c      	ldr	r3, [pc, #304]	; (8005098 <HAL_RCC_OscConfig+0x938>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a4b      	ldr	r2, [pc, #300]	; (8005098 <HAL_RCC_OscConfig+0x938>)
 8004f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f70:	f7fc fb52 	bl	8001618 <HAL_GetTick>
 8004f74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f78:	e009      	b.n	8004f8e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7a:	f7fc fb4d 	bl	8001618 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b64      	cmp	r3, #100	; 0x64
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e2e9      	b.n	8005562 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8e:	4b42      	ldr	r3, [pc, #264]	; (8005098 <HAL_RCC_OscConfig+0x938>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0ef      	beq.n	8004f7a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d106      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x852>
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	4a39      	ldr	r2, [pc, #228]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	6213      	str	r3, [r2, #32]
 8004fb0:	e02f      	b.n	8005012 <HAL_RCC_OscConfig+0x8b2>
 8004fb2:	1d3b      	adds	r3, r7, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10c      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x876>
 8004fbc:	4b34      	ldr	r3, [pc, #208]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4a33      	ldr	r2, [pc, #204]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	6213      	str	r3, [r2, #32]
 8004fc8:	4b31      	ldr	r3, [pc, #196]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	4a30      	ldr	r2, [pc, #192]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004fce:	f023 0304 	bic.w	r3, r3, #4
 8004fd2:	6213      	str	r3, [r2, #32]
 8004fd4:	e01d      	b.n	8005012 <HAL_RCC_OscConfig+0x8b2>
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b05      	cmp	r3, #5
 8004fde:	d10c      	bne.n	8004ffa <HAL_RCC_OscConfig+0x89a>
 8004fe0:	4b2b      	ldr	r3, [pc, #172]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	4a2a      	ldr	r2, [pc, #168]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004fe6:	f043 0304 	orr.w	r3, r3, #4
 8004fea:	6213      	str	r3, [r2, #32]
 8004fec:	4b28      	ldr	r3, [pc, #160]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	4a27      	ldr	r2, [pc, #156]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6213      	str	r3, [r2, #32]
 8004ff8:	e00b      	b.n	8005012 <HAL_RCC_OscConfig+0x8b2>
 8004ffa:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	4a24      	ldr	r2, [pc, #144]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8005000:	f023 0301 	bic.w	r3, r3, #1
 8005004:	6213      	str	r3, [r2, #32]
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	4a21      	ldr	r2, [pc, #132]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 800500c:	f023 0304 	bic.w	r3, r3, #4
 8005010:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005012:	1d3b      	adds	r3, r7, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d06b      	beq.n	80050f4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501c:	f7fc fafc 	bl	8001618 <HAL_GetTick>
 8005020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005024:	e00b      	b.n	800503e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005026:	f7fc faf7 	bl	8001618 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	; 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e291      	b.n	8005562 <HAL_RCC_OscConfig+0xe02>
 800503e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005042:	2202      	movs	r2, #2
 8005044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	fa93 f2a3 	rbit	r2, r3
 8005050:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800505a:	2202      	movs	r2, #2
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	fa93 f2a3 	rbit	r2, r3
 8005068:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800506c:	601a      	str	r2, [r3, #0]
  return result;
 800506e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005072:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005074:	fab3 f383 	clz	r3, r3
 8005078:	b2db      	uxtb	r3, r3
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f043 0302 	orr.w	r3, r3, #2
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d109      	bne.n	800509c <HAL_RCC_OscConfig+0x93c>
 8005088:	4b01      	ldr	r3, [pc, #4]	; (8005090 <HAL_RCC_OscConfig+0x930>)
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	e014      	b.n	80050b8 <HAL_RCC_OscConfig+0x958>
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	10908120 	.word	0x10908120
 8005098:	40007000 	.word	0x40007000
 800509c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80050a0:	2202      	movs	r2, #2
 80050a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	fa93 f2a3 	rbit	r2, r3
 80050ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	4bbb      	ldr	r3, [pc, #748]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80050bc:	2102      	movs	r1, #2
 80050be:	6011      	str	r1, [r2, #0]
 80050c0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	fa92 f1a2 	rbit	r1, r2
 80050ca:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80050ce:	6011      	str	r1, [r2, #0]
  return result;
 80050d0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	fab2 f282 	clz	r2, r2
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	f002 021f 	and.w	r2, r2, #31
 80050e6:	2101      	movs	r1, #1
 80050e8:	fa01 f202 	lsl.w	r2, r1, r2
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d099      	beq.n	8005026 <HAL_RCC_OscConfig+0x8c6>
 80050f2:	e063      	b.n	80051bc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f4:	f7fc fa90 	bl	8001618 <HAL_GetTick>
 80050f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050fc:	e00b      	b.n	8005116 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fc fa8b 	bl	8001618 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e225      	b.n	8005562 <HAL_RCC_OscConfig+0xe02>
 8005116:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800511a:	2202      	movs	r2, #2
 800511c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	fa93 f2a3 	rbit	r2, r3
 8005128:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005132:	2202      	movs	r2, #2
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	fa93 f2a3 	rbit	r2, r3
 8005140:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005144:	601a      	str	r2, [r3, #0]
  return result;
 8005146:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800514a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514c:	fab3 f383 	clz	r3, r3
 8005150:	b2db      	uxtb	r3, r3
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f043 0302 	orr.w	r3, r3, #2
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d102      	bne.n	8005166 <HAL_RCC_OscConfig+0xa06>
 8005160:	4b90      	ldr	r3, [pc, #576]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	e00d      	b.n	8005182 <HAL_RCC_OscConfig+0xa22>
 8005166:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800516a:	2202      	movs	r2, #2
 800516c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	fa93 f2a3 	rbit	r2, r3
 8005178:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	4b89      	ldr	r3, [pc, #548]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005186:	2102      	movs	r1, #2
 8005188:	6011      	str	r1, [r2, #0]
 800518a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	fa92 f1a2 	rbit	r1, r2
 8005194:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005198:	6011      	str	r1, [r2, #0]
  return result;
 800519a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	fab2 f282 	clz	r2, r2
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	f002 021f 	and.w	r2, r2, #31
 80051b0:	2101      	movs	r1, #1
 80051b2:	fa01 f202 	lsl.w	r2, r1, r2
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1a0      	bne.n	80050fe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c4:	4b77      	ldr	r3, [pc, #476]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	4a76      	ldr	r2, [pc, #472]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 80051ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d0:	1d3b      	adds	r3, r7, #4
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 81c2 	beq.w	8005560 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051dc:	4b71      	ldr	r3, [pc, #452]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 030c 	and.w	r3, r3, #12
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	f000 819c 	beq.w	8005522 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	f040 8114 	bne.w	800541e <HAL_RCC_OscConfig+0xcbe>
 80051f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80051fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005200:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	fa93 f2a3 	rbit	r2, r3
 800520a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800520e:	601a      	str	r2, [r3, #0]
  return result;
 8005210:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005214:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005216:	fab3 f383 	clz	r3, r3
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005220:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	461a      	mov	r2, r3
 8005228:	2300      	movs	r3, #0
 800522a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522c:	f7fc f9f4 	bl	8001618 <HAL_GetTick>
 8005230:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005234:	e009      	b.n	800524a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005236:	f7fc f9ef 	bl	8001618 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e18b      	b.n	8005562 <HAL_RCC_OscConfig+0xe02>
 800524a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800524e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005252:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005254:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	fa93 f2a3 	rbit	r2, r3
 800525e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005262:	601a      	str	r2, [r3, #0]
  return result;
 8005264:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005268:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	d102      	bne.n	8005284 <HAL_RCC_OscConfig+0xb24>
 800527e:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	e01b      	b.n	80052bc <HAL_RCC_OscConfig+0xb5c>
 8005284:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800528c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	fa93 f2a3 	rbit	r2, r3
 8005298:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80052a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	fa93 f2a3 	rbit	r2, r3
 80052b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	4b3a      	ldr	r3, [pc, #232]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052c4:	6011      	str	r1, [r2, #0]
 80052c6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	fa92 f1a2 	rbit	r1, r2
 80052d0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80052d4:	6011      	str	r1, [r2, #0]
  return result;
 80052d6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	fab2 f282 	clz	r2, r2
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	f042 0220 	orr.w	r2, r2, #32
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	f002 021f 	and.w	r2, r2, #31
 80052ec:	2101      	movs	r1, #1
 80052ee:	fa01 f202 	lsl.w	r2, r1, r2
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d19e      	bne.n	8005236 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f8:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005306:	1d3b      	adds	r3, r7, #4
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	430b      	orrs	r3, r1
 800530e:	4925      	ldr	r1, [pc, #148]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]
 8005314:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800531c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	fa93 f2a3 	rbit	r2, r3
 8005328:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800532c:	601a      	str	r2, [r3, #0]
  return result;
 800532e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005332:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800533e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	461a      	mov	r2, r3
 8005346:	2301      	movs	r3, #1
 8005348:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534a:	f7fc f965 	bl	8001618 <HAL_GetTick>
 800534e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005352:	e009      	b.n	8005368 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005354:	f7fc f960 	bl	8001618 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e0fc      	b.n	8005562 <HAL_RCC_OscConfig+0xe02>
 8005368:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800536c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	fa93 f2a3 	rbit	r2, r3
 800537c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005380:	601a      	str	r2, [r3, #0]
  return result;
 8005382:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005386:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005388:	fab3 f383 	clz	r3, r3
 800538c:	b2db      	uxtb	r3, r3
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <HAL_RCC_OscConfig+0xc48>
 800539c:	4b01      	ldr	r3, [pc, #4]	; (80053a4 <HAL_RCC_OscConfig+0xc44>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	e01e      	b.n	80053e0 <HAL_RCC_OscConfig+0xc80>
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80053ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	fa93 f2a3 	rbit	r2, r3
 80053bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	fa93 f2a3 	rbit	r2, r3
 80053d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	4b63      	ldr	r3, [pc, #396]	; (800556c <HAL_RCC_OscConfig+0xe0c>)
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80053e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053e8:	6011      	str	r1, [r2, #0]
 80053ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	fa92 f1a2 	rbit	r1, r2
 80053f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80053f8:	6011      	str	r1, [r2, #0]
  return result;
 80053fa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	fab2 f282 	clz	r2, r2
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	f042 0220 	orr.w	r2, r2, #32
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	f002 021f 	and.w	r2, r2, #31
 8005410:	2101      	movs	r1, #1
 8005412:	fa01 f202 	lsl.w	r2, r1, r2
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d09b      	beq.n	8005354 <HAL_RCC_OscConfig+0xbf4>
 800541c:	e0a0      	b.n	8005560 <HAL_RCC_OscConfig+0xe00>
 800541e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005422:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	fa93 f2a3 	rbit	r2, r3
 8005432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005436:	601a      	str	r2, [r3, #0]
  return result;
 8005438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800543c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	fab3 f383 	clz	r3, r3
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005448:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	461a      	mov	r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fc f8e0 	bl	8001618 <HAL_GetTick>
 8005458:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800545c:	e009      	b.n	8005472 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800545e:	f7fc f8db 	bl	8001618 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e077      	b.n	8005562 <HAL_RCC_OscConfig+0xe02>
 8005472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005476:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800547a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	fa93 f2a3 	rbit	r2, r3
 8005486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800548a:	601a      	str	r2, [r3, #0]
  return result;
 800548c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005490:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005492:	fab3 f383 	clz	r3, r3
 8005496:	b2db      	uxtb	r3, r3
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d102      	bne.n	80054ac <HAL_RCC_OscConfig+0xd4c>
 80054a6:	4b31      	ldr	r3, [pc, #196]	; (800556c <HAL_RCC_OscConfig+0xe0c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	e01b      	b.n	80054e4 <HAL_RCC_OscConfig+0xd84>
 80054ac:	f107 0320 	add.w	r3, r7, #32
 80054b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	f107 0320 	add.w	r3, r7, #32
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	fa93 f2a3 	rbit	r2, r3
 80054c0:	f107 031c 	add.w	r3, r7, #28
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	f107 0318 	add.w	r3, r7, #24
 80054ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f107 0318 	add.w	r3, r7, #24
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	fa93 f2a3 	rbit	r2, r3
 80054da:	f107 0314 	add.w	r3, r7, #20
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	4b22      	ldr	r3, [pc, #136]	; (800556c <HAL_RCC_OscConfig+0xe0c>)
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f107 0210 	add.w	r2, r7, #16
 80054e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054ec:	6011      	str	r1, [r2, #0]
 80054ee:	f107 0210 	add.w	r2, r7, #16
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	fa92 f1a2 	rbit	r1, r2
 80054f8:	f107 020c 	add.w	r2, r7, #12
 80054fc:	6011      	str	r1, [r2, #0]
  return result;
 80054fe:	f107 020c 	add.w	r2, r7, #12
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	fab2 f282 	clz	r2, r2
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	f042 0220 	orr.w	r2, r2, #32
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	f002 021f 	and.w	r2, r2, #31
 8005514:	2101      	movs	r1, #1
 8005516:	fa01 f202 	lsl.w	r2, r1, r2
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d19e      	bne.n	800545e <HAL_RCC_OscConfig+0xcfe>
 8005520:	e01e      	b.n	8005560 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005522:	1d3b      	adds	r3, r7, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e018      	b.n	8005562 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005530:	4b0e      	ldr	r3, [pc, #56]	; (800556c <HAL_RCC_OscConfig+0xe0c>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005538:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800553c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005540:	1d3b      	adds	r3, r7, #4
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	429a      	cmp	r2, r3
 8005548:	d108      	bne.n	800555c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800554a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800554e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005552:	1d3b      	adds	r3, r7, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021000 	.word	0x40021000

08005570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b09e      	sub	sp, #120	; 0x78
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e162      	b.n	800584e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005588:	4b90      	ldr	r3, [pc, #576]	; (80057cc <HAL_RCC_ClockConfig+0x25c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d910      	bls.n	80055b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005596:	4b8d      	ldr	r3, [pc, #564]	; (80057cc <HAL_RCC_ClockConfig+0x25c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f023 0207 	bic.w	r2, r3, #7
 800559e:	498b      	ldr	r1, [pc, #556]	; (80057cc <HAL_RCC_ClockConfig+0x25c>)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	4b89      	ldr	r3, [pc, #548]	; (80057cc <HAL_RCC_ClockConfig+0x25c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e14a      	b.n	800584e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c4:	4b82      	ldr	r3, [pc, #520]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	497f      	ldr	r1, [pc, #508]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 80dc 	beq.w	800579c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d13c      	bne.n	8005666 <HAL_RCC_ClockConfig+0xf6>
 80055ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f4:	fa93 f3a3 	rbit	r3, r3
 80055f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fc:	fab3 f383 	clz	r3, r3
 8005600:	b2db      	uxtb	r3, r3
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	d102      	bne.n	8005616 <HAL_RCC_ClockConfig+0xa6>
 8005610:	4b6f      	ldr	r3, [pc, #444]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	e00f      	b.n	8005636 <HAL_RCC_ClockConfig+0xc6>
 8005616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800561a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800561e:	fa93 f3a3 	rbit	r3, r3
 8005622:	667b      	str	r3, [r7, #100]	; 0x64
 8005624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005628:	663b      	str	r3, [r7, #96]	; 0x60
 800562a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800562c:	fa93 f3a3 	rbit	r3, r3
 8005630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005632:	4b67      	ldr	r3, [pc, #412]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800563a:	65ba      	str	r2, [r7, #88]	; 0x58
 800563c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800563e:	fa92 f2a2 	rbit	r2, r2
 8005642:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005646:	fab2 f282 	clz	r2, r2
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	f042 0220 	orr.w	r2, r2, #32
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	f002 021f 	and.w	r2, r2, #31
 8005656:	2101      	movs	r1, #1
 8005658:	fa01 f202 	lsl.w	r2, r1, r2
 800565c:	4013      	ands	r3, r2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d17b      	bne.n	800575a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e0f3      	b.n	800584e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d13c      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x178>
 800566e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005672:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005676:	fa93 f3a3 	rbit	r3, r3
 800567a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800567c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567e:	fab3 f383 	clz	r3, r3
 8005682:	b2db      	uxtb	r3, r3
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b01      	cmp	r3, #1
 8005690:	d102      	bne.n	8005698 <HAL_RCC_ClockConfig+0x128>
 8005692:	4b4f      	ldr	r3, [pc, #316]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	e00f      	b.n	80056b8 <HAL_RCC_ClockConfig+0x148>
 8005698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800569c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a0:	fa93 f3a3 	rbit	r3, r3
 80056a4:	647b      	str	r3, [r7, #68]	; 0x44
 80056a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056aa:	643b      	str	r3, [r7, #64]	; 0x40
 80056ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b4:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80056be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056c0:	fa92 f2a2 	rbit	r2, r2
 80056c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80056c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056c8:	fab2 f282 	clz	r2, r2
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	f042 0220 	orr.w	r2, r2, #32
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	f002 021f 	and.w	r2, r2, #31
 80056d8:	2101      	movs	r1, #1
 80056da:	fa01 f202 	lsl.w	r2, r1, r2
 80056de:	4013      	ands	r3, r2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d13a      	bne.n	800575a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0b2      	b.n	800584e <HAL_RCC_ClockConfig+0x2de>
 80056e8:	2302      	movs	r3, #2
 80056ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	fa93 f3a3 	rbit	r3, r3
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f6:	fab3 f383 	clz	r3, r3
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b01      	cmp	r3, #1
 8005708:	d102      	bne.n	8005710 <HAL_RCC_ClockConfig+0x1a0>
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	e00d      	b.n	800572c <HAL_RCC_ClockConfig+0x1bc>
 8005710:	2302      	movs	r3, #2
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	fa93 f3a3 	rbit	r3, r3
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
 800571c:	2302      	movs	r3, #2
 800571e:	623b      	str	r3, [r7, #32]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	fa93 f3a3 	rbit	r3, r3
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	4b29      	ldr	r3, [pc, #164]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	2202      	movs	r2, #2
 800572e:	61ba      	str	r2, [r7, #24]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	fa92 f2a2 	rbit	r2, r2
 8005736:	617a      	str	r2, [r7, #20]
  return result;
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	fab2 f282 	clz	r2, r2
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	f042 0220 	orr.w	r2, r2, #32
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	f002 021f 	and.w	r2, r2, #31
 800574a:	2101      	movs	r1, #1
 800574c:	fa01 f202 	lsl.w	r2, r1, r2
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e079      	b.n	800584e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800575a:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f023 0203 	bic.w	r2, r3, #3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	491a      	ldr	r1, [pc, #104]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 8005768:	4313      	orrs	r3, r2
 800576a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800576c:	f7fb ff54 	bl	8001618 <HAL_GetTick>
 8005770:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005772:	e00a      	b.n	800578a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005774:	f7fb ff50 	bl	8001618 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e061      	b.n	800584e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578a:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <HAL_RCC_ClockConfig+0x260>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f003 020c 	and.w	r2, r3, #12
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	429a      	cmp	r2, r3
 800579a:	d1eb      	bne.n	8005774 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800579c:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <HAL_RCC_ClockConfig+0x25c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d214      	bcs.n	80057d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b08      	ldr	r3, [pc, #32]	; (80057cc <HAL_RCC_ClockConfig+0x25c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 0207 	bic.w	r2, r3, #7
 80057b2:	4906      	ldr	r1, [pc, #24]	; (80057cc <HAL_RCC_ClockConfig+0x25c>)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b04      	ldr	r3, [pc, #16]	; (80057cc <HAL_RCC_ClockConfig+0x25c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d005      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e040      	b.n	800584e <HAL_RCC_ClockConfig+0x2de>
 80057cc:	40022000 	.word	0x40022000
 80057d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e0:	4b1d      	ldr	r3, [pc, #116]	; (8005858 <HAL_RCC_ClockConfig+0x2e8>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	491a      	ldr	r1, [pc, #104]	; (8005858 <HAL_RCC_ClockConfig+0x2e8>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fe:	4b16      	ldr	r3, [pc, #88]	; (8005858 <HAL_RCC_ClockConfig+0x2e8>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4912      	ldr	r1, [pc, #72]	; (8005858 <HAL_RCC_ClockConfig+0x2e8>)
 800580e:	4313      	orrs	r3, r2
 8005810:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005812:	f000 f829 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8005816:	4601      	mov	r1, r0
 8005818:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <HAL_RCC_ClockConfig+0x2e8>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005820:	22f0      	movs	r2, #240	; 0xf0
 8005822:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	fa92 f2a2 	rbit	r2, r2
 800582a:	60fa      	str	r2, [r7, #12]
  return result;
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	fab2 f282 	clz	r2, r2
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	40d3      	lsrs	r3, r2
 8005836:	4a09      	ldr	r2, [pc, #36]	; (800585c <HAL_RCC_ClockConfig+0x2ec>)
 8005838:	5cd3      	ldrb	r3, [r2, r3]
 800583a:	fa21 f303 	lsr.w	r3, r1, r3
 800583e:	4a08      	ldr	r2, [pc, #32]	; (8005860 <HAL_RCC_ClockConfig+0x2f0>)
 8005840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <HAL_RCC_ClockConfig+0x2f4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7fb fea2 	bl	8001590 <HAL_InitTick>
  
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3778      	adds	r7, #120	; 0x78
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000
 800585c:	08005d0c 	.word	0x08005d0c
 8005860:	20000098 	.word	0x20000098
 8005864:	2000009c 	.word	0x2000009c

08005868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005868:	b480      	push	{r7}
 800586a:	b08b      	sub	sp, #44	; 0x2c
 800586c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	2300      	movs	r3, #0
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	2300      	movs	r3, #0
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005882:	4b29      	ldr	r3, [pc, #164]	; (8005928 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 030c 	and.w	r3, r3, #12
 800588e:	2b04      	cmp	r3, #4
 8005890:	d002      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x30>
 8005892:	2b08      	cmp	r3, #8
 8005894:	d003      	beq.n	800589e <HAL_RCC_GetSysClockFreq+0x36>
 8005896:	e03c      	b.n	8005912 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005898:	4b24      	ldr	r3, [pc, #144]	; (800592c <HAL_RCC_GetSysClockFreq+0xc4>)
 800589a:	623b      	str	r3, [r7, #32]
      break;
 800589c:	e03c      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80058a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80058a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	fa92 f2a2 	rbit	r2, r2
 80058b0:	607a      	str	r2, [r7, #4]
  return result;
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	fab2 f282 	clz	r2, r2
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	40d3      	lsrs	r3, r2
 80058bc:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <HAL_RCC_GetSysClockFreq+0xc8>)
 80058be:	5cd3      	ldrb	r3, [r2, r3]
 80058c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80058c2:	4b19      	ldr	r3, [pc, #100]	; (8005928 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	220f      	movs	r2, #15
 80058cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	fa92 f2a2 	rbit	r2, r2
 80058d4:	60fa      	str	r2, [r7, #12]
  return result;
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	fab2 f282 	clz	r2, r2
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	40d3      	lsrs	r3, r2
 80058e0:	4a14      	ldr	r2, [pc, #80]	; (8005934 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058e2:	5cd3      	ldrb	r3, [r2, r3]
 80058e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80058f0:	4a0e      	ldr	r2, [pc, #56]	; (800592c <HAL_RCC_GetSysClockFreq+0xc4>)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005900:	e004      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	4a0c      	ldr	r2, [pc, #48]	; (8005938 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005906:	fb02 f303 	mul.w	r3, r2, r3
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	623b      	str	r3, [r7, #32]
      break;
 8005910:	e002      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005914:	623b      	str	r3, [r7, #32]
      break;
 8005916:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005918:	6a3b      	ldr	r3, [r7, #32]
}
 800591a:	4618      	mov	r0, r3
 800591c:	372c      	adds	r7, #44	; 0x2c
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000
 800592c:	007a1200 	.word	0x007a1200
 8005930:	08005d1c 	.word	0x08005d1c
 8005934:	08005d2c 	.word	0x08005d2c
 8005938:	003d0900 	.word	0x003d0900

0800593c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b092      	sub	sp, #72	; 0x48
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80d4 	beq.w	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005960:	4b4e      	ldr	r3, [pc, #312]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10e      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800596c:	4b4b      	ldr	r3, [pc, #300]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	4a4a      	ldr	r2, [pc, #296]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005976:	61d3      	str	r3, [r2, #28]
 8005978:	4b48      	ldr	r3, [pc, #288]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005980:	60bb      	str	r3, [r7, #8]
 8005982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800598a:	4b45      	ldr	r3, [pc, #276]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d118      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005996:	4b42      	ldr	r3, [pc, #264]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a41      	ldr	r2, [pc, #260]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800599c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059a2:	f7fb fe39 	bl	8001618 <HAL_GetTick>
 80059a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a8:	e008      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059aa:	f7fb fe35 	bl	8001618 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b64      	cmp	r3, #100	; 0x64
 80059b6:	d901      	bls.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e169      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059bc:	4b38      	ldr	r3, [pc, #224]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0f0      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059c8:	4b34      	ldr	r3, [pc, #208]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8084 	beq.w	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d07c      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059e8:	4b2c      	ldr	r3, [pc, #176]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	fa93 f3a3 	rbit	r3, r3
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a02:	fab3 f383 	clz	r3, r3
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4b26      	ldr	r3, [pc, #152]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	461a      	mov	r2, r3
 8005a12:	2301      	movs	r3, #1
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	fa93 f3a3 	rbit	r3, r3
 8005a22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a26:	fab3 f383 	clz	r3, r3
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	461a      	mov	r2, r3
 8005a36:	2300      	movs	r3, #0
 8005a38:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a3a:	4a18      	ldr	r2, [pc, #96]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d04b      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4a:	f7fb fde5 	bl	8001618 <HAL_GetTick>
 8005a4e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a50:	e00a      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a52:	f7fb fde1 	bl	8001618 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e113      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	fa93 f3a3 	rbit	r3, r3
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
 8005a74:	2302      	movs	r3, #2
 8005a76:	623b      	str	r3, [r7, #32]
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	fa93 f3a3 	rbit	r3, r3
 8005a7e:	61fb      	str	r3, [r7, #28]
  return result;
 8005a80:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a82:	fab3 f383 	clz	r3, r3
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f043 0302 	orr.w	r3, r3, #2
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d108      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a96:	4b01      	ldr	r3, [pc, #4]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	e00d      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	40007000 	.word	0x40007000
 8005aa4:	10908100 	.word	0x10908100
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	fa93 f3a3 	rbit	r3, r3
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	4b78      	ldr	r3, [pc, #480]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	2202      	movs	r2, #2
 8005aba:	613a      	str	r2, [r7, #16]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	fa92 f2a2 	rbit	r2, r2
 8005ac2:	60fa      	str	r2, [r7, #12]
  return result;
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	fab2 f282 	clz	r2, r2
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	f002 021f 	and.w	r2, r2, #31
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0b7      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005ae2:	4b6d      	ldr	r3, [pc, #436]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	496a      	ldr	r1, [pc, #424]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005af4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d105      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005afc:	4b66      	ldr	r3, [pc, #408]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	4a65      	ldr	r2, [pc, #404]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b14:	4b60      	ldr	r3, [pc, #384]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	f023 0203 	bic.w	r2, r3, #3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	495d      	ldr	r1, [pc, #372]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b32:	4b59      	ldr	r3, [pc, #356]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	4956      	ldr	r1, [pc, #344]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b50:	4b51      	ldr	r3, [pc, #324]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	494e      	ldr	r1, [pc, #312]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d008      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b6e:	4b4a      	ldr	r3, [pc, #296]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	f023 0210 	bic.w	r2, r3, #16
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	4947      	ldr	r1, [pc, #284]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005b8c:	4b42      	ldr	r3, [pc, #264]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	493f      	ldr	r1, [pc, #252]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005baa:	4b3b      	ldr	r3, [pc, #236]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	f023 0220 	bic.w	r2, r3, #32
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	4938      	ldr	r1, [pc, #224]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bc8:	4b33      	ldr	r3, [pc, #204]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	4930      	ldr	r1, [pc, #192]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005be6:	4b2c      	ldr	r3, [pc, #176]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	4929      	ldr	r1, [pc, #164]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c04:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4921      	ldr	r1, [pc, #132]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d008      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005c22:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	491a      	ldr	r1, [pc, #104]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005c40:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	4912      	ldr	r1, [pc, #72]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	490b      	ldr	r1, [pc, #44]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c88:	4903      	ldr	r1, [pc, #12]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3748      	adds	r7, #72	; 0x48
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40021000 	.word	0x40021000

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4e0d      	ldr	r6, [pc, #52]	; (8005cd4 <__libc_init_array+0x38>)
 8005ca0:	4c0d      	ldr	r4, [pc, #52]	; (8005cd8 <__libc_init_array+0x3c>)
 8005ca2:	1ba4      	subs	r4, r4, r6
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	2500      	movs	r5, #0
 8005ca8:	42a5      	cmp	r5, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	4e0b      	ldr	r6, [pc, #44]	; (8005cdc <__libc_init_array+0x40>)
 8005cae:	4c0c      	ldr	r4, [pc, #48]	; (8005ce0 <__libc_init_array+0x44>)
 8005cb0:	f000 f820 	bl	8005cf4 <_init>
 8005cb4:	1ba4      	subs	r4, r4, r6
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	2500      	movs	r5, #0
 8005cba:	42a5      	cmp	r5, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cc4:	4798      	blx	r3
 8005cc6:	3501      	adds	r5, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cce:	4798      	blx	r3
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	08005d3c 	.word	0x08005d3c
 8005cd8:	08005d3c 	.word	0x08005d3c
 8005cdc:	08005d3c 	.word	0x08005d3c
 8005ce0:	08005d40 	.word	0x08005d40

08005ce4 <memset>:
 8005ce4:	4402      	add	r2, r0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d100      	bne.n	8005cee <memset+0xa>
 8005cec:	4770      	bx	lr
 8005cee:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf2:	e7f9      	b.n	8005ce8 <memset+0x4>

08005cf4 <_init>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	bf00      	nop
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr

08005d00 <_fini>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr
