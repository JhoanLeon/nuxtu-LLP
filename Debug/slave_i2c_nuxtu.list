
slave_i2c_nuxtu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006078  08006078  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08006078  08006078  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006078  08006078  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08006080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000028  080060a8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080060a8  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdc9  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b3a  00000000  00000000  0002be21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  0002d960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000920  00000000  00000000  0002e368  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cc2a  00000000  00000000  0002ec88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009efc  00000000  00000000  0004b8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ae4c1  00000000  00000000  000557ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103c6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e8  00000000  00000000  00103cec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f70 	.word	0x08005f70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08005f70 	.word	0x08005f70

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <HAL_I2C_AddrCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// function to check address matching
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
 8000a10:	4613      	mov	r3, r2
 8000a12:	803b      	strh	r3, [r7, #0]
	if ( TransferDirection == I2C_DIRECTION_TRANSMIT ) // Master sends a write instruction
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d107      	bne.n	8000a2a <HAL_I2C_AddrCallback+0x26>
	{
		// read byte sent by master (this is the request information command)
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, &last_command_received, sizeof(last_command_received), I2C_NEXT_FRAME);
 8000a1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4937      	ldr	r1, [pc, #220]	; (8000b00 <HAL_I2C_AddrCallback+0xfc>)
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f002 fd6a 	bl	80034fc <HAL_I2C_Slave_Seq_Receive_IT>
				break;
			}
		}
		last_command_received = 0; // to repeat detection
	}
}
 8000a28:	e066      	b.n	8000af8 <HAL_I2C_AddrCallback+0xf4>
		switch(last_command_received)
 8000a2a:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <HAL_I2C_AddrCallback+0xfc>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d85e      	bhi.n	8000af0 <HAL_I2C_AddrCallback+0xec>
 8000a32:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <HAL_I2C_AddrCallback+0x34>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000a4d 	.word	0x08000a4d
 8000a3c:	08000a5d 	.word	0x08000a5d
 8000a40:	08000a6d 	.word	0x08000a6d
 8000a44:	08000a7d 	.word	0x08000a7d
 8000a48:	08000a8d 	.word	0x08000a8d
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &DETECTION_VALUE, sizeof(DETECTION_VALUE), I2C_NEXT_FRAME);
 8000a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a50:	2201      	movs	r2, #1
 8000a52:	492c      	ldr	r1, [pc, #176]	; (8000b04 <HAL_I2C_AddrCallback+0x100>)
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f002 fcad 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				break;
 8000a5a:	e04a      	b.n	8000af2 <HAL_I2C_AddrCallback+0xee>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &DEVICE_TYPE, sizeof(DEVICE_TYPE), I2C_NEXT_FRAME);
 8000a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a60:	2201      	movs	r2, #1
 8000a62:	4929      	ldr	r1, [pc, #164]	; (8000b08 <HAL_I2C_AddrCallback+0x104>)
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f002 fca5 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				break;
 8000a6a:	e042      	b.n	8000af2 <HAL_I2C_AddrCallback+0xee>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, BASIC_DATA, sizeof(BASIC_DATA), I2C_NEXT_FRAME);
 8000a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a70:	220e      	movs	r2, #14
 8000a72:	4926      	ldr	r1, [pc, #152]	; (8000b0c <HAL_I2C_AddrCallback+0x108>)
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f002 fc9d 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				break;
 8000a7a:	e03a      	b.n	8000af2 <HAL_I2C_AddrCallback+0xee>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, COMPLETE_DATA, sizeof(COMPLETE_DATA), I2C_NEXT_FRAME);
 8000a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a80:	228d      	movs	r2, #141	; 0x8d
 8000a82:	4923      	ldr	r1, [pc, #140]	; (8000b10 <HAL_I2C_AddrCallback+0x10c>)
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f002 fc95 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				break;
 8000a8a:	e032      	b.n	8000af2 <HAL_I2C_AddrCallback+0xee>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)&temperature, 16+4*gas_sensors, I2C_NEXT_FRAME); // treat float values as a buffer to send through I2C
 8000a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a90:	221c      	movs	r2, #28
 8000a92:	4920      	ldr	r1, [pc, #128]	; (8000b14 <HAL_I2C_AddrCallback+0x110>)
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f002 fc8d 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)&pcb_temperature, 16+4*gas_sensors, I2C_NEXT_FRAME); // treat float values as a buffer to send through I2C
 8000a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a9e:	221c      	movs	r2, #28
 8000aa0:	491d      	ldr	r1, [pc, #116]	; (8000b18 <HAL_I2C_AddrCallback+0x114>)
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f002 fc86 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)&humidity, 16+4*gas_sensors, I2C_NEXT_FRAME); // treat float values as a buffer to send through I2C
 8000aa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aac:	221c      	movs	r2, #28
 8000aae:	491b      	ldr	r1, [pc, #108]	; (8000b1c <HAL_I2C_AddrCallback+0x118>)
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f002 fc7f 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)&pressure, 16+4*gas_sensors, I2C_NEXT_FRAME); // treat float values as a buffer to send through I2C
 8000ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aba:	221c      	movs	r2, #28
 8000abc:	4918      	ldr	r1, [pc, #96]	; (8000b20 <HAL_I2C_AddrCallback+0x11c>)
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f002 fc78 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)&n1_voltage, 16+4*gas_sensors, I2C_NEXT_FRAME); // treat float values as a buffer to send through I2C
 8000ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac8:	221c      	movs	r2, #28
 8000aca:	4916      	ldr	r1, [pc, #88]	; (8000b24 <HAL_I2C_AddrCallback+0x120>)
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f002 fc71 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)&n2_voltage, 16+4*gas_sensors, I2C_NEXT_FRAME); // treat float values as a buffer to send through I2C
 8000ad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad6:	221c      	movs	r2, #28
 8000ad8:	4913      	ldr	r1, [pc, #76]	; (8000b28 <HAL_I2C_AddrCallback+0x124>)
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f002 fc6a 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, (uint8_t*)&n3_voltage, 16+4*gas_sensors, I2C_NEXT_FRAME); // treat float values as a buffer to send through I2C
 8000ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae4:	221c      	movs	r2, #28
 8000ae6:	4911      	ldr	r1, [pc, #68]	; (8000b2c <HAL_I2C_AddrCallback+0x128>)
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f002 fc63 	bl	80033b4 <HAL_I2C_Slave_Seq_Transmit_IT>
				break;
 8000aee:	e000      	b.n	8000af2 <HAL_I2C_AddrCallback+0xee>
				break;
 8000af0:	bf00      	nop
		last_command_received = 0; // to repeat detection
 8000af2:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_I2C_AddrCallback+0xfc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000064 	.word	0x20000064
 8000b04:	20000044 	.word	0x20000044
 8000b08:	20000045 	.word	0x20000045
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000098 	.word	0x20000098
 8000b14:	20000058 	.word	0x20000058
 8000b18:	20000054 	.word	0x20000054
 8000b1c:	2000005c 	.word	0x2000005c
 8000b20:	20000060 	.word	0x20000060
 8000b24:	20000048 	.word	0x20000048
 8000b28:	2000004c 	.word	0x2000004c
 8000b2c:	20000050 	.word	0x20000050

08000b30 <HAL_I2C_ListenCpltCallback>:

// function to put the slave ready again when listen mode finish
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c); // slave is ready again
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f002 fd83 	bl	8003644 <HAL_I2C_EnableListen_IT>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b5b0      	push	{r4, r5, r7, lr}
 8000b4a:	b0c2      	sub	sp, #264	; 0x108
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f000 fe4f 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 fae5 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b56:	f000 fc45 	bl	80013e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b5a:	f000 fc25 	bl	80013a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b5e:	f000 fb39 	bl	80011d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b62:	f000 fbe1 	bl	8001328 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2C_EnableListen_IT(&hi2c1); // to activate the slave mode of I2C
 8000b66:	48cb      	ldr	r0, [pc, #812]	; (8000e94 <main+0x34c>)
 8000b68:	f002 fd6c 	bl	8003644 <HAL_I2C_EnableListen_IT>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, RESET);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, RESET);
  #endif

  uint8_t total_adc_sensors = env_sensors + gas_sensors; // total ADC channels to be used for analog sensors
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

  uint32_t adc_values[total_adc_sensors]; // to store all read ADC values, in channel name order (channel1 -> adc[0], ..., temp -> adc[total-1])
 8000b72:	f897 00cf 	ldrb.w	r0, [r7, #207]	; 0xcf
 8000b76:	4603      	mov	r3, r0
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000b7e:	b2c1      	uxtb	r1, r0
 8000b80:	f04f 0200 	mov.w	r2, #0
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	f04f 0400 	mov.w	r4, #0
 8000b8c:	0154      	lsls	r4, r2, #5
 8000b8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000b92:	014b      	lsls	r3, r1, #5
 8000b94:	b2c1      	uxtb	r1, r0
 8000b96:	f04f 0200 	mov.w	r2, #0
 8000b9a:	f04f 0300 	mov.w	r3, #0
 8000b9e:	f04f 0400 	mov.w	r4, #0
 8000ba2:	0154      	lsls	r4, r2, #5
 8000ba4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000ba8:	014b      	lsls	r3, r1, #5
 8000baa:	4603      	mov	r3, r0
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	3303      	adds	r3, #3
 8000bb0:	3307      	adds	r3, #7
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	ebad 0d03 	sub.w	sp, sp, r3
 8000bba:	466b      	mov	r3, sp
 8000bbc:	3303      	adds	r3, #3
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  //PA1 -> pressure
  //PA2 -> FEC
  //PA3 -> CO
  //PF4 -> 4-NOC

  HAL_ADC_Start_DMA(&hadc1, adc_values, sizeof(adc_values)); // start the ADC in DMA mode
 8000bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000bca:	4602      	mov	r2, r0
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	4619      	mov	r1, r3
 8000bd0:	48b1      	ldr	r0, [pc, #708]	; (8000e98 <main+0x350>)
 8000bd2:	f001 f893 	bl	8001cfc <HAL_ADC_Start_DMA>

  gas_sensor N1 = {"FECS40-1000", "Electroquimico", "Monoxido de carbono", 30};
 8000bd6:	4bb1      	ldr	r3, [pc, #708]	; (8000e9c <main+0x354>)
 8000bd8:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8000bdc:	461d      	mov	r5, r3
 8000bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  gas_sensor N2 = {"CO-CE-10000", "Electroquimico", "Monoxido de carbono", 75};
 8000bee:	4bac      	ldr	r3, [pc, #688]	; (8000ea0 <main+0x358>)
 8000bf0:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  gas_sensor N3 = {"4-NO2-20000", "Electroquimico", "Dioxido de nitrogeno", 60};
 8000c06:	4ba7      	ldr	r3, [pc, #668]	; (8000ea4 <main+0x35c>)
 8000c08:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000c0c:	461d      	mov	r5, r3
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  gas_sensor N4 = {"X-XXX-XXXXX", "XXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXX", 0}; // dummy value
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4aa1      	ldr	r2, [pc, #644]	; (8000ea8 <main+0x360>)
 8000c22:	461c      	mov	r4, r3
 8000c24:	4615      	mov	r5, r2
 8000c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int i = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 11; k++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000c42:	e015      	b.n	8000c70 <main+0x128>
  {
	  COMPLETE_DATA1[i] = N1.name[k];
 8000c44:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000c48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000c4c:	4413      	add	r3, r2
 8000c4e:	7819      	ldrb	r1, [r3, #0]
 8000c50:	4a96      	ldr	r2, [pc, #600]	; (8000eac <main+0x364>)
 8000c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c56:	4413      	add	r3, r2
 8000c58:	460a      	mov	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
	  i++;
 8000c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c60:	3301      	adds	r3, #1
 8000c62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 11; k++)
 8000c66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000c70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000c74:	2b0a      	cmp	r3, #10
 8000c76:	dde5      	ble.n	8000c44 <main+0xfc>
  }
  for (int k = 0; k < 14; k++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000c7e:	e015      	b.n	8000cac <main+0x164>
  {
	  COMPLETE_DATA1[i] = N1.type[k];
 8000c80:	f107 029f 	add.w	r2, r7, #159	; 0x9f
 8000c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000c88:	4413      	add	r3, r2
 8000c8a:	7819      	ldrb	r1, [r3, #0]
 8000c8c:	4a87      	ldr	r2, [pc, #540]	; (8000eac <main+0x364>)
 8000c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c92:	4413      	add	r3, r2
 8000c94:	460a      	mov	r2, r1
 8000c96:	701a      	strb	r2, [r3, #0]
	  i++;
 8000c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 14; k++)
 8000ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000cb0:	2b0d      	cmp	r3, #13
 8000cb2:	dde5      	ble.n	8000c80 <main+0x138>
  }
  for (int k = 0; k < 20; k++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000cba:	e015      	b.n	8000ce8 <main+0x1a0>
  {
	  COMPLETE_DATA1[i] = N1.main_gas[k];
 8000cbc:	f107 02ad 	add.w	r2, r7, #173	; 0xad
 8000cc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000cc4:	4413      	add	r3, r2
 8000cc6:	7819      	ldrb	r1, [r3, #0]
 8000cc8:	4a78      	ldr	r2, [pc, #480]	; (8000eac <main+0x364>)
 8000cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000cce:	4413      	add	r3, r2
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	701a      	strb	r2, [r3, #0]
	  i++;
 8000cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 20; k++)
 8000cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000ce8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000cec:	2b13      	cmp	r3, #19
 8000cee:	dde5      	ble.n	8000cbc <main+0x174>
  }

  COMPLETE_DATA1[i] =  (N1.response_time >> 8) & 0xFF;
 8000cf0:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b2d9      	uxtb	r1, r3
 8000cfa:	4a6c      	ldr	r2, [pc, #432]	; (8000eac <main+0x364>)
 8000cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d00:	4413      	add	r3, r2
 8000d02:	460a      	mov	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
  i++;
 8000d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  COMPLETE_DATA1[i] = (N1.response_time) & 0xFF;
 8000d10:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8000d14:	b2d9      	uxtb	r1, r3
 8000d16:	4a65      	ldr	r2, [pc, #404]	; (8000eac <main+0x364>)
 8000d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d1c:	4413      	add	r3, r2
 8000d1e:	460a      	mov	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]

  i = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 11; k++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000d2e:	e015      	b.n	8000d5c <main+0x214>
  {
	  COMPLETE_DATA2[i] = N2.name[k];
 8000d30:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d38:	4413      	add	r3, r2
 8000d3a:	7819      	ldrb	r1, [r3, #0]
 8000d3c:	4a5c      	ldr	r2, [pc, #368]	; (8000eb0 <main+0x368>)
 8000d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d42:	4413      	add	r3, r2
 8000d44:	460a      	mov	r2, r1
 8000d46:	701a      	strb	r2, [r3, #0]
	  i++;
 8000d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 11; k++)
 8000d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d56:	3301      	adds	r3, #1
 8000d58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d60:	2b0a      	cmp	r3, #10
 8000d62:	dde5      	ble.n	8000d30 <main+0x1e8>
  }
  for (int k = 0; k < 14; k++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000d6a:	e015      	b.n	8000d98 <main+0x250>
  {
	  COMPLETE_DATA2[i] = N2.type[k];
 8000d6c:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 8000d70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d74:	4413      	add	r3, r2
 8000d76:	7819      	ldrb	r1, [r3, #0]
 8000d78:	4a4d      	ldr	r2, [pc, #308]	; (8000eb0 <main+0x368>)
 8000d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d7e:	4413      	add	r3, r2
 8000d80:	460a      	mov	r2, r1
 8000d82:	701a      	strb	r2, [r3, #0]
	  i++;
 8000d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 14; k++)
 8000d8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d92:	3301      	adds	r3, #1
 8000d94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000d98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000d9c:	2b0d      	cmp	r3, #13
 8000d9e:	dde5      	ble.n	8000d6c <main+0x224>
  }
  for (int k = 0; k < 20; k++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000da6:	e015      	b.n	8000dd4 <main+0x28c>
  {
	  COMPLETE_DATA2[i] = N2.main_gas[k];
 8000da8:	f107 027d 	add.w	r2, r7, #125	; 0x7d
 8000dac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000db0:	4413      	add	r3, r2
 8000db2:	7819      	ldrb	r1, [r3, #0]
 8000db4:	4a3e      	ldr	r2, [pc, #248]	; (8000eb0 <main+0x368>)
 8000db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000dba:	4413      	add	r3, r2
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	701a      	strb	r2, [r3, #0]
	  i++;
 8000dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 20; k++)
 8000dca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000dce:	3301      	adds	r3, #1
 8000dd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000dd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000dd8:	2b13      	cmp	r3, #19
 8000dda:	dde5      	ble.n	8000da8 <main+0x260>
  }


  COMPLETE_DATA2[i] = (N2.response_time >> 8) & 0xFF;
 8000ddc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	b2d9      	uxtb	r1, r3
 8000de6:	4a32      	ldr	r2, [pc, #200]	; (8000eb0 <main+0x368>)
 8000de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000dec:	4413      	add	r3, r2
 8000dee:	460a      	mov	r2, r1
 8000df0:	701a      	strb	r2, [r3, #0]
  i++;
 8000df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000df6:	3301      	adds	r3, #1
 8000df8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  COMPLETE_DATA2[i] = (N2.response_time) & 0xFF;
 8000dfc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8000e00:	b2d9      	uxtb	r1, r3
 8000e02:	4a2b      	ldr	r2, [pc, #172]	; (8000eb0 <main+0x368>)
 8000e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e08:	4413      	add	r3, r2
 8000e0a:	460a      	mov	r2, r1
 8000e0c:	701a      	strb	r2, [r3, #0]

  i = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 11; k++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e1a:	e015      	b.n	8000e48 <main+0x300>
  {
	  COMPLETE_DATA3[i] = N3.name[k];
 8000e1c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e24:	4413      	add	r3, r2
 8000e26:	7819      	ldrb	r1, [r3, #0]
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <main+0x36c>)
 8000e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e2e:	4413      	add	r3, r2
 8000e30:	460a      	mov	r2, r1
 8000e32:	701a      	strb	r2, [r3, #0]
	  i++;
 8000e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e38:	3301      	adds	r3, #1
 8000e3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 11; k++)
 8000e3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e42:	3301      	adds	r3, #1
 8000e44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000e48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e4c:	2b0a      	cmp	r3, #10
 8000e4e:	dde5      	ble.n	8000e1c <main+0x2d4>
  }
  for (int k = 0; k < 14; k++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000e56:	e015      	b.n	8000e84 <main+0x33c>
  {
	  COMPLETE_DATA3[i] = N3.type[k];
 8000e58:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8000e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e60:	4413      	add	r3, r2
 8000e62:	7819      	ldrb	r1, [r3, #0]
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <main+0x36c>)
 8000e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e6a:	4413      	add	r3, r2
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	701a      	strb	r2, [r3, #0]
	  i++;
 8000e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e74:	3301      	adds	r3, #1
 8000e76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 14; k++)
 8000e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e7e:	3301      	adds	r3, #1
 8000e80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e88:	2b0d      	cmp	r3, #13
 8000e8a:	dde5      	ble.n	8000e58 <main+0x310>
  }
  for (int k = 0; k < 20; k++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000e92:	e027      	b.n	8000ee4 <main+0x39c>
 8000e94:	20000128 	.word	0x20000128
 8000e98:	200001a4 	.word	0x200001a4
 8000e9c:	08005f88 	.word	0x08005f88
 8000ea0:	08005fb8 	.word	0x08005fb8
 8000ea4:	08005fe8 	.word	0x08005fe8
 8000ea8:	08006018 	.word	0x08006018
 8000eac:	20000238 	.word	0x20000238
 8000eb0:	20000174 	.word	0x20000174
 8000eb4:	20000068 	.word	0x20000068
  {
	  COMPLETE_DATA3[i] = N3.main_gas[k];
 8000eb8:	f107 024d 	add.w	r2, r7, #77	; 0x4d
 8000ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000ec0:	4413      	add	r3, r2
 8000ec2:	7819      	ldrb	r1, [r3, #0]
 8000ec4:	4a88      	ldr	r2, [pc, #544]	; (80010e8 <main+0x5a0>)
 8000ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000eca:	4413      	add	r3, r2
 8000ecc:	460a      	mov	r2, r1
 8000ece:	701a      	strb	r2, [r3, #0]
	  i++;
 8000ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  for (int k = 0; k < 20; k++)
 8000eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000ede:	3301      	adds	r3, #1
 8000ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000ee8:	2b13      	cmp	r3, #19
 8000eea:	dde5      	ble.n	8000eb8 <main+0x370>
  }

  COMPLETE_DATA3[i] =  (N3.response_time >> 8) & 0xFF;
 8000eec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b2d9      	uxtb	r1, r3
 8000ef6:	4a7c      	ldr	r2, [pc, #496]	; (80010e8 <main+0x5a0>)
 8000ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000efc:	4413      	add	r3, r2
 8000efe:	460a      	mov	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
  i++;
 8000f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f06:	3301      	adds	r3, #1
 8000f08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  COMPLETE_DATA3[i] =  (N3.response_time) & 0xFF;
 8000f0c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000f10:	b2d9      	uxtb	r1, r3
 8000f12:	4a75      	ldr	r2, [pc, #468]	; (80010e8 <main+0x5a0>)
 8000f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000f18:	4413      	add	r3, r2
 8000f1a:	460a      	mov	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]

  int j = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  for (int i = 0; i < 47; i++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000f2a:	e014      	b.n	8000f56 <main+0x40e>
  {
	  COMPLETE_DATA[j] = COMPLETE_DATA1[i];
 8000f2c:	4a6f      	ldr	r2, [pc, #444]	; (80010ec <main+0x5a4>)
 8000f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f32:	4413      	add	r3, r2
 8000f34:	7819      	ldrb	r1, [r3, #0]
 8000f36:	4a6e      	ldr	r2, [pc, #440]	; (80010f0 <main+0x5a8>)
 8000f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f3c:	4413      	add	r3, r2
 8000f3e:	460a      	mov	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
	  j++;
 8000f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f46:	3301      	adds	r3, #1
 8000f48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  for (int i = 0; i < 47; i++)
 8000f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f50:	3301      	adds	r3, #1
 8000f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8000f5c:	dde6      	ble.n	8000f2c <main+0x3e4>
  }
  for (int i = 0; i < 47; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f64:	e014      	b.n	8000f90 <main+0x448>
  {
	  COMPLETE_DATA[j] = COMPLETE_DATA2[i];
 8000f66:	4a63      	ldr	r2, [pc, #396]	; (80010f4 <main+0x5ac>)
 8000f68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f6c:	4413      	add	r3, r2
 8000f6e:	7819      	ldrb	r1, [r3, #0]
 8000f70:	4a5f      	ldr	r2, [pc, #380]	; (80010f0 <main+0x5a8>)
 8000f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f76:	4413      	add	r3, r2
 8000f78:	460a      	mov	r2, r1
 8000f7a:	701a      	strb	r2, [r3, #0]
	  j++;
 8000f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f80:	3301      	adds	r3, #1
 8000f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  for (int i = 0; i < 47; i++)
 8000f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000f94:	2b2e      	cmp	r3, #46	; 0x2e
 8000f96:	dde6      	ble.n	8000f66 <main+0x41e>
  }
  for (int i = 0; i < 47; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000f9e:	e014      	b.n	8000fca <main+0x482>
  {
	  COMPLETE_DATA[j] = COMPLETE_DATA3[i];
 8000fa0:	4a51      	ldr	r2, [pc, #324]	; (80010e8 <main+0x5a0>)
 8000fa2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000fa6:	4413      	add	r3, r2
 8000fa8:	7819      	ldrb	r1, [r3, #0]
 8000faa:	4a51      	ldr	r2, [pc, #324]	; (80010f0 <main+0x5a8>)
 8000fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fb0:	4413      	add	r3, r2
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
	  j++;
 8000fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  for (int i = 0; i < 47; i++)
 8000fc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000fca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000fce:	2b2e      	cmp	r3, #46	; 0x2e
 8000fd0:	dde6      	ble.n	8000fa0 <main+0x458>
	  #ifdef HUMD
	  humidity = -12.5 + 125*(adc_values[1]/4095); // formula taken from datasheet of SHT31-ARP-B pag.8 (%RH 0 -> 100)
	  #endif

	  #ifdef PRES
	  pressure = ((adc_values[0]/4095) - 0.05069)/0.00293; // formula derived from datasheet of KP229E2701 pag.12
 8000fd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b47      	ldr	r3, [pc, #284]	; (80010f8 <main+0x5b0>)
 8000fda:	fba3 1302 	umull	r1, r3, r3, r2
 8000fde:	1ad2      	subs	r2, r2, r3
 8000fe0:	0852      	lsrs	r2, r2, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	0adb      	lsrs	r3, r3, #11
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa30 	bl	800044c <__aeabi_ui2d>
 8000fec:	a33a      	add	r3, pc, #232	; (adr r3, 80010d8 <main+0x590>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff f8ed 	bl	80001d0 <__aeabi_dsub>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460c      	mov	r4, r1
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	a338      	add	r3, pc, #224	; (adr r3, 80010e0 <main+0x598>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff fbc6 	bl	8000794 <__aeabi_ddiv>
 8001008:	4603      	mov	r3, r0
 800100a:	460c      	mov	r4, r1
 800100c:	4618      	mov	r0, r3
 800100e:	4621      	mov	r1, r4
 8001010:	f7ff fca8 	bl	8000964 <__aeabi_d2f>
 8001014:	4602      	mov	r2, r0
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <main+0x5b4>)
 8001018:	601a      	str	r2, [r3, #0]
	  #endif

	  #ifdef PCB_TEMP
	  pcb_temperature = ((V25 - adc_values[total_adc_sensors-1]*VSENSE)/ Avg_slope) + 25; // formula taken from reference manual of STM32F303VCT6 pag.373
 800101a:	4b39      	ldr	r3, [pc, #228]	; (8001100 <main+0x5b8>)
 800101c:	ed93 7a00 	vldr	s14, [r3]
 8001020:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001024:	1e5a      	subs	r2, r3, #1
 8001026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800102a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102e:	ee07 3a90 	vmov	s15, r3
 8001032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001036:	4b33      	ldr	r3, [pc, #204]	; (8001104 <main+0x5bc>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001040:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001044:	4b30      	ldr	r3, [pc, #192]	; (8001108 <main+0x5c0>)
 8001046:	ed93 7a00 	vldr	s14, [r3]
 800104a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800104e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001052:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <main+0x5c4>)
 8001058:	edc3 7a00 	vstr	s15, [r3]
	  #endif

	  ////// COMPUTATION OF GAS SENSORS VOLTAGES //////

	  n1_voltage = adc_values[1]*VSENSE*1000; // mV from n_1 gas sensor
 800105c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <main+0x5bc>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001110 <main+0x5c8>
 8001078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <main+0x5cc>)
 800107e:	edc3 7a00 	vstr	s15, [r3]
	  n2_voltage = adc_values[2]*VSENSE*1000; // mV from n_2 gas sensor
 8001082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <main+0x5bc>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001110 <main+0x5c8>
 800109e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <main+0x5d0>)
 80010a4:	edc3 7a00 	vstr	s15, [r3]
	  n3_voltage = adc_values[3]*VSENSE*1000; // mV from n_3 gas sensor
 80010a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <main+0x5bc>)
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001110 <main+0x5c8>
 80010c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <main+0x5d4>)
 80010ca:	edc3 7a00 	vstr	s15, [r3]

	  #ifdef DEBUG_MODE
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8); // blink led to know that main program is running
	  #endif

	  HAL_Delay(50); // dummy delay, can be changed to a strategy to compute ADC values with callback
 80010ce:	2032      	movs	r0, #50	; 0x32
 80010d0:	f000 fbf4 	bl	80018bc <HAL_Delay>
	  pressure = ((adc_values[0]/4095) - 0.05069)/0.00293; // formula derived from datasheet of KP229E2701 pag.12
 80010d4:	e77d      	b.n	8000fd2 <main+0x48a>
 80010d6:	bf00      	nop
 80010d8:	2877ee4e 	.word	0x2877ee4e
 80010dc:	3fa9f40a 	.word	0x3fa9f40a
 80010e0:	c5ac471b 	.word	0xc5ac471b
 80010e4:	3f6800a7 	.word	0x3f6800a7
 80010e8:	20000068 	.word	0x20000068
 80010ec:	20000238 	.word	0x20000238
 80010f0:	20000098 	.word	0x20000098
 80010f4:	20000174 	.word	0x20000174
 80010f8:	00100101 	.word	0x00100101
 80010fc:	20000060 	.word	0x20000060
 8001100:	20000014 	.word	0x20000014
 8001104:	20000010 	.word	0x20000010
 8001108:	20000018 	.word	0x20000018
 800110c:	20000054 	.word	0x20000054
 8001110:	447a0000 	.word	0x447a0000
 8001114:	20000048 	.word	0x20000048
 8001118:	2000004c 	.word	0x2000004c
 800111c:	20000050 	.word	0x20000050

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b09e      	sub	sp, #120	; 0x78
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800112a:	2228      	movs	r2, #40	; 0x28
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f004 ff16 	bl	8005f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	223c      	movs	r2, #60	; 0x3c
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 ff08 	bl	8005f60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001150:	2302      	movs	r3, #2
 8001152:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001158:	2310      	movs	r3, #16
 800115a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115c:	2302      	movs	r3, #2
 800115e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001160:	2300      	movs	r3, #0
 8001162:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001164:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001168:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fc34 	bl	80049dc <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800117a:	f000 f9af 	bl	80014dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800118a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001194:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001198:	2101      	movs	r1, #1
 800119a:	4618      	mov	r0, r3
 800119c:	f004 fb26 	bl	80057ec <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80011a6:	f000 f999 	bl	80014dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
 80011aa:	23a0      	movs	r3, #160	; 0xa0
 80011ac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80011ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 fcfc 	bl	8005bb8 <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011c6:	f000 f989 	bl	80014dc <Error_Handler>
  }
}
 80011ca:	bf00      	nop
 80011cc:	3778      	adds	r7, #120	; 0x78
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011f6:	4b4b      	ldr	r3, [pc, #300]	; (8001324 <MX_ADC1_Init+0x150>)
 80011f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011fe:	4b49      	ldr	r3, [pc, #292]	; (8001324 <MX_ADC1_Init+0x150>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001204:	4b47      	ldr	r3, [pc, #284]	; (8001324 <MX_ADC1_Init+0x150>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <MX_ADC1_Init+0x150>)
 800120c:	2201      	movs	r2, #1
 800120e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001210:	4b44      	ldr	r3, [pc, #272]	; (8001324 <MX_ADC1_Init+0x150>)
 8001212:	2201      	movs	r2, #1
 8001214:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001216:	4b43      	ldr	r3, [pc, #268]	; (8001324 <MX_ADC1_Init+0x150>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121e:	4b41      	ldr	r3, [pc, #260]	; (8001324 <MX_ADC1_Init+0x150>)
 8001220:	2200      	movs	r2, #0
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001224:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <MX_ADC1_Init+0x150>)
 8001226:	2201      	movs	r2, #1
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <MX_ADC1_Init+0x150>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001230:	4b3c      	ldr	r3, [pc, #240]	; (8001324 <MX_ADC1_Init+0x150>)
 8001232:	2205      	movs	r2, #5
 8001234:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001236:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <MX_ADC1_Init+0x150>)
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <MX_ADC1_Init+0x150>)
 8001240:	2204      	movs	r2, #4
 8001242:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001244:	4b37      	ldr	r3, [pc, #220]	; (8001324 <MX_ADC1_Init+0x150>)
 8001246:	2200      	movs	r2, #0
 8001248:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <MX_ADC1_Init+0x150>)
 800124c:	2200      	movs	r2, #0
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001250:	4834      	ldr	r0, [pc, #208]	; (8001324 <MX_ADC1_Init+0x150>)
 8001252:	f000 fb73 	bl	800193c <HAL_ADC_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800125c:	f000 f93e 	bl	80014dc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4619      	mov	r1, r3
 800126a:	482e      	ldr	r0, [pc, #184]	; (8001324 <MX_ADC1_Init+0x150>)
 800126c:	f001 f94e 	bl	800250c <HAL_ADCEx_MultiModeConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001276:	f000 f931 	bl	80014dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800127a:	2302      	movs	r3, #2
 800127c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127e:	2301      	movs	r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4619      	mov	r1, r3
 8001296:	4823      	ldr	r0, [pc, #140]	; (8001324 <MX_ADC1_Init+0x150>)
 8001298:	f000 fe4c 	bl	8001f34 <HAL_ADC_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80012a2:	f000 f91b 	bl	80014dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012a6:	2303      	movs	r3, #3
 80012a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	481c      	ldr	r0, [pc, #112]	; (8001324 <MX_ADC1_Init+0x150>)
 80012b4:	f000 fe3e 	bl	8001f34 <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80012be:	f000 f90d 	bl	80014dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012c2:	2304      	movs	r3, #4
 80012c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012c6:	2303      	movs	r3, #3
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4815      	ldr	r0, [pc, #84]	; (8001324 <MX_ADC1_Init+0x150>)
 80012d0:	f000 fe30 	bl	8001f34 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80012da:	f000 f8ff 	bl	80014dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012de:	2305      	movs	r3, #5
 80012e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012e2:	2304      	movs	r3, #4
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <MX_ADC1_Init+0x150>)
 80012ec:	f000 fe22 	bl	8001f34 <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80012f6:	f000 f8f1 	bl	80014dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012fa:	2310      	movs	r3, #16
 80012fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012fe:	2305      	movs	r3, #5
 8001300:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001302:	2307      	movs	r3, #7
 8001304:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_ADC1_Init+0x150>)
 800130c:	f000 fe12 	bl	8001f34 <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 8001316:	f000 f8e1 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200001a4 	.word	0x200001a4

08001328 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_I2C1_Init+0x74>)
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <MX_I2C1_Init+0x78>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_I2C1_Init+0x74>)
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <MX_I2C1_Init+0x7c>)
 8001336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 26;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_I2C1_Init+0x74>)
 800133a:	221a      	movs	r2, #26
 800133c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_I2C1_Init+0x74>)
 8001340:	2201      	movs	r2, #1
 8001342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_I2C1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_I2C1_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_I2C1_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_I2C1_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_I2C1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001362:	480e      	ldr	r0, [pc, #56]	; (800139c <MX_I2C1_Init+0x74>)
 8001364:	f001 ff96 	bl	8003294 <HAL_I2C_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800136e:	f000 f8b5 	bl	80014dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001372:	2100      	movs	r1, #0
 8001374:	4809      	ldr	r0, [pc, #36]	; (800139c <MX_I2C1_Init+0x74>)
 8001376:	f003 fa99 	bl	80048ac <HAL_I2CEx_ConfigAnalogFilter>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001380:	f000 f8ac 	bl	80014dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_I2C1_Init+0x74>)
 8001388:	f003 fadb 	bl	8004942 <HAL_I2CEx_ConfigDigitalFilter>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001392:	f000 f8a3 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000128 	.word	0x20000128
 80013a0:	40005400 	.word	0x40005400
 80013a4:	2000090e 	.word	0x2000090e

080013a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_DMA_Init+0x38>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <MX_DMA_Init+0x38>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6153      	str	r3, [r2, #20]
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_DMA_Init+0x38>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	200b      	movs	r0, #11
 80013cc:	f001 fb9b 	bl	8002b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013d0:	200b      	movs	r0, #11
 80013d2:	f001 fbb4 	bl	8002b3e <HAL_NVIC_EnableIRQ>

}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <MX_GPIO_Init+0xec>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4a34      	ldr	r2, [pc, #208]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001400:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001404:	6153      	str	r3, [r2, #20]
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	4a2e      	ldr	r2, [pc, #184]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001418:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800141c:	6153      	str	r3, [r2, #20]
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <MX_GPIO_Init+0xec>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	6153      	str	r3, [r2, #20]
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_GPIO_Init+0xec>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001464:	6153      	str	r3, [r2, #20]
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_GPIO_Init+0xec>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001478:	4816      	ldr	r0, [pc, #88]	; (80014d4 <MX_GPIO_Init+0xf0>)
 800147a:	f001 fef3 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001484:	4814      	ldr	r0, [pc, #80]	; (80014d8 <MX_GPIO_Init+0xf4>)
 8001486:	f001 feed 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800148a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	480c      	ldr	r0, [pc, #48]	; (80014d4 <MX_GPIO_Init+0xf0>)
 80014a4:	f001 fd64 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80014a8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_GPIO_Init+0xf4>)
 80014c2:	f001 fd55 	bl	8002f70 <HAL_GPIO_Init>

}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	48000800 	.word	0x48000800
 80014d8:	48001000 	.word	0x48001000

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_MspInit+0x44>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_MspInit+0x44>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_MspInit+0x44>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_MspInit+0x44>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_MspInit+0x44>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_MspInit+0x44>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001554:	d164      	bne.n	8001620 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_ADC_MspInit+0xf4>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	4a33      	ldr	r2, [pc, #204]	; (8001628 <HAL_ADC_MspInit+0xf4>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001560:	6153      	str	r3, [r2, #20]
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_ADC_MspInit+0xf4>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	4b2e      	ldr	r3, [pc, #184]	; (8001628 <HAL_ADC_MspInit+0xf4>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4a2d      	ldr	r2, [pc, #180]	; (8001628 <HAL_ADC_MspInit+0xf4>)
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	6153      	str	r3, [r2, #20]
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <HAL_ADC_MspInit+0xf4>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <HAL_ADC_MspInit+0xf4>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	4a27      	ldr	r2, [pc, #156]	; (8001628 <HAL_ADC_MspInit+0xf4>)
 800158c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001590:	6153      	str	r3, [r2, #20]
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_ADC_MspInit+0xf4>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800159e:	230e      	movs	r3, #14
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a2:	2303      	movs	r3, #3
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f001 fcdc 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015b8:	2310      	movs	r3, #16
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015bc:	2303      	movs	r3, #3
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4818      	ldr	r0, [pc, #96]	; (800162c <HAL_ADC_MspInit+0xf8>)
 80015cc:	f001 fcd0 	bl	8002f70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 80015d2:	4a18      	ldr	r2, [pc, #96]	; (8001634 <HAL_ADC_MspInit+0x100>)
 80015d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 80015ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 80015f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 80015fa:	2220      	movs	r2, #32
 80015fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 8001606:	f001 fab4 	bl	8002b72 <HAL_DMA_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8001610:	f7ff ff64 	bl	80014dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 8001618:	639a      	str	r2, [r3, #56]	; 0x38
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <HAL_ADC_MspInit+0xfc>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	48001400 	.word	0x48001400
 8001630:	200001f4 	.word	0x200001f4
 8001634:	40020008 	.word	0x40020008

08001638 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_I2C_MspInit+0x9c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d138      	bne.n	80016cc <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_I2C_MspInit+0xa0>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_I2C_MspInit+0xa0>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6153      	str	r3, [r2, #20]
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_I2C_MspInit+0xa0>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001672:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001678:	2312      	movs	r3, #18
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167c:	2301      	movs	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001684:	2304      	movs	r3, #4
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4813      	ldr	r0, [pc, #76]	; (80016dc <HAL_I2C_MspInit+0xa4>)
 8001690:	f001 fc6e 	bl	8002f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_I2C_MspInit+0xa0>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_I2C_MspInit+0xa0>)
 800169a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169e:	61d3      	str	r3, [r2, #28]
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_I2C_MspInit+0xa0>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	201f      	movs	r0, #31
 80016b2:	f001 fa28 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016b6:	201f      	movs	r0, #31
 80016b8:	f001 fa41 	bl	8002b3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2020      	movs	r0, #32
 80016c2:	f001 fa20 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016c6:	2020      	movs	r0, #32
 80016c8:	f001 fa39 	bl	8002b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48000400 	.word	0x48000400

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001734:	f000 f8a2 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA1_Channel1_IRQHandler+0x10>)
 8001742:	f001 fafa 	bl	8002d3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200001f4 	.word	0x200001f4

08001750 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <I2C1_EV_IRQHandler+0x10>)
 8001756:	f001 ff95 	bl	8003684 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000128 	.word	0x20000128

08001764 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <I2C1_ER_IRQHandler+0x10>)
 800176a:	f001 ffa5 	bl	80036b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000128 	.word	0x20000128

08001778 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800179c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a2:	490e      	ldr	r1, [pc, #56]	; (80017dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <LoopForever+0xe>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b8:	4c0b      	ldr	r4, [pc, #44]	; (80017e8 <LoopForever+0x16>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017c6:	f7ff ffd7 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f004 fba5 	bl	8005f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ce:	f7ff f9bb 	bl	8000b48 <main>

080017d2 <LoopForever>:

LoopForever:
    b LoopForever
 80017d2:	e7fe      	b.n	80017d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80017e0:	08006080 	.word	0x08006080
  ldr r2, =_sbss
 80017e4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80017e8:	2000026c 	.word	0x2000026c

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x28>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x28>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f001 f975 	bl	8002af0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fe6e 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40022000 	.word	0x40022000

0800181c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f001 f98d 	bl	8002b5a <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f001 f955 	bl	8002b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000001c 	.word	0x2000001c
 8001874:	20000024 	.word	0x20000024
 8001878:	20000020 	.word	0x20000020

0800187c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000024 	.word	0x20000024
 80018a0:	20000268 	.word	0x20000268

080018a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000268 	.word	0x20000268

080018bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff ffee 	bl	80018a4 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d005      	beq.n	80018e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_Delay+0x40>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018e2:	bf00      	nop
 80018e4:	f7ff ffde 	bl	80018a4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f7      	bhi.n	80018e4 <HAL_Delay+0x28>
  {
  }
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000024 	.word	0x20000024

08001900 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b09a      	sub	sp, #104	; 0x68
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e1c9      	b.n	8001cf0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	d176      	bne.n	8001a5c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	2b00      	cmp	r3, #0
 8001974:	d152      	bne.n	8001a1c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fdcf 	bl	8001534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d13b      	bne.n	8001a1c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 ff6d 	bl	8002884 <ADC_Disable>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d12f      	bne.n	8001a1c <HAL_ADC_Init+0xe0>
 80019bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d12b      	bne.n	8001a1c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019cc:	f023 0302 	bic.w	r3, r3, #2
 80019d0:	f043 0202 	orr.w	r2, r3, #2
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019f8:	4b86      	ldr	r3, [pc, #536]	; (8001c14 <HAL_ADC_Init+0x2d8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a86      	ldr	r2, [pc, #536]	; (8001c18 <HAL_ADC_Init+0x2dc>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9a      	lsrs	r2, r3, #18
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a0e:	e002      	b.n	8001a16 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f9      	bne.n	8001a10 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a38:	d110      	bne.n	8001a5c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f023 0312 	bic.w	r3, r3, #18
 8001a42:	f043 0210 	orr.w	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 8136 	bne.w	8001cd6 <HAL_ADC_Init+0x39a>
 8001a6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 8131 	bne.w	8001cd6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 8129 	bne.w	8001cd6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a8c:	f043 0202 	orr.w	r2, r3, #2
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_Init+0x16c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a5e      	ldr	r2, [pc, #376]	; (8001c1c <HAL_ADC_Init+0x2e0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_Init+0x170>
 8001aa8:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_ADC_Init+0x2e4>)
 8001aaa:	e000      	b.n	8001aae <HAL_ADC_Init+0x172>
 8001aac:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_ADC_Init+0x2e8>)
 8001aae:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab8:	d102      	bne.n	8001ac0 <HAL_ADC_Init+0x184>
 8001aba:	4b58      	ldr	r3, [pc, #352]	; (8001c1c <HAL_ADC_Init+0x2e0>)
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	e01a      	b.n	8001af6 <HAL_ADC_Init+0x1ba>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a55      	ldr	r2, [pc, #340]	; (8001c1c <HAL_ADC_Init+0x2e0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d103      	bne.n	8001ad2 <HAL_ADC_Init+0x196>
 8001aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e011      	b.n	8001af6 <HAL_ADC_Init+0x1ba>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a54      	ldr	r2, [pc, #336]	; (8001c28 <HAL_ADC_Init+0x2ec>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d102      	bne.n	8001ae2 <HAL_ADC_Init+0x1a6>
 8001adc:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_ADC_Init+0x2f0>)
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e009      	b.n	8001af6 <HAL_ADC_Init+0x1ba>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <HAL_ADC_Init+0x2f0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d102      	bne.n	8001af2 <HAL_ADC_Init+0x1b6>
 8001aec:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <HAL_ADC_Init+0x2ec>)
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e001      	b.n	8001af6 <HAL_ADC_Init+0x1ba>
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_ADC_Init+0x1da>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Init+0x1da>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_ADC_Init+0x1dc>
 8001b16:	2300      	movs	r3, #0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d11c      	bne.n	8001b56 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d010      	beq.n	8001b44 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <HAL_ADC_Init+0x202>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Init+0x202>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_ADC_Init+0x204>
 8001b3e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d108      	bne.n	8001b56 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b54:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7e5b      	ldrb	r3, [r3, #25]
 8001b5a:	035b      	lsls	r3, r3, #13
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b60:	2a01      	cmp	r2, #1
 8001b62:	d002      	beq.n	8001b6a <HAL_ADC_Init+0x22e>
 8001b64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b68:	e000      	b.n	8001b6c <HAL_ADC_Init+0x230>
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d11b      	bne.n	8001bc2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7e5b      	ldrb	r3, [r3, #25]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	3b01      	subs	r3, #1
 8001b98:	045a      	lsls	r2, r3, #17
 8001b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ba4:	e00d      	b.n	8001bc2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001bae:	f043 0220 	orr.w	r2, r3, #32
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d03a      	beq.n	8001c40 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <HAL_ADC_Init+0x2ec>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d004      	beq.n	8001bde <HAL_ADC_Init+0x2a2>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <HAL_ADC_Init+0x2f0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d128      	bne.n	8001c30 <HAL_ADC_Init+0x2f4>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001be6:	d012      	beq.n	8001c0e <HAL_ADC_Init+0x2d2>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf0:	d00a      	beq.n	8001c08 <HAL_ADC_Init+0x2cc>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001bfa:	d002      	beq.n	8001c02 <HAL_ADC_Init+0x2c6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	e018      	b.n	8001c34 <HAL_ADC_Init+0x2f8>
 8001c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c06:	e015      	b.n	8001c34 <HAL_ADC_Init+0x2f8>
 8001c08:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001c0c:	e012      	b.n	8001c34 <HAL_ADC_Init+0x2f8>
 8001c0e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c12:	e00f      	b.n	8001c34 <HAL_ADC_Init+0x2f8>
 8001c14:	2000001c 	.word	0x2000001c
 8001c18:	431bde83 	.word	0x431bde83
 8001c1c:	50000100 	.word	0x50000100
 8001c20:	50000300 	.word	0x50000300
 8001c24:	50000700 	.word	0x50000700
 8001c28:	50000400 	.word	0x50000400
 8001c2c:	50000500 	.word	0x50000500
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d114      	bne.n	8001c78 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c5c:	f023 0302 	bic.w	r3, r3, #2
 8001c60:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7e1b      	ldrb	r3, [r3, #24]
 8001c66:	039a      	lsls	r2, r3, #14
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4313      	orrs	r3, r2
 8001c72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c74:	4313      	orrs	r3, r2
 8001c76:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_ADC_Init+0x3bc>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d10c      	bne.n	8001cae <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f023 010f 	bic.w	r1, r3, #15
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	1e5a      	subs	r2, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
 8001cac:	e007      	b.n	8001cbe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 020f 	bic.w	r2, r2, #15
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f023 0303 	bic.w	r3, r3, #3
 8001ccc:	f043 0201 	orr.w	r2, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd4:	e00a      	b.n	8001cec <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f023 0312 	bic.w	r3, r3, #18
 8001cde:	f043 0210 	orr.w	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001cec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3768      	adds	r7, #104	; 0x68
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	fff0c007 	.word	0xfff0c007

08001cfc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 80f7 	bne.w	8001f0a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Start_DMA+0x2e>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e0f2      	b.n	8001f10 <HAL_ADC_Start_DMA+0x214>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d3a:	d004      	beq.n	8001d46 <HAL_ADC_Start_DMA+0x4a>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a75      	ldr	r2, [pc, #468]	; (8001f18 <HAL_ADC_Start_DMA+0x21c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d109      	bne.n	8001d5a <HAL_ADC_Start_DMA+0x5e>
 8001d46:	4b75      	ldr	r3, [pc, #468]	; (8001f1c <HAL_ADC_Start_DMA+0x220>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf0c      	ite	eq
 8001d52:	2301      	moveq	r3, #1
 8001d54:	2300      	movne	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	e008      	b.n	8001d6c <HAL_ADC_Start_DMA+0x70>
 8001d5a:	4b71      	ldr	r3, [pc, #452]	; (8001f20 <HAL_ADC_Start_DMA+0x224>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf0c      	ite	eq
 8001d66:	2301      	moveq	r3, #1
 8001d68:	2300      	movne	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80c5 	beq.w	8001efc <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fd22 	bl	80027bc <ADC_Enable>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 80b7 	bne.w	8001ef2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da0:	d004      	beq.n	8001dac <HAL_ADC_Start_DMA+0xb0>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a5c      	ldr	r2, [pc, #368]	; (8001f18 <HAL_ADC_Start_DMA+0x21c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d106      	bne.n	8001dba <HAL_ADC_Start_DMA+0xbe>
 8001dac:	4b5b      	ldr	r3, [pc, #364]	; (8001f1c <HAL_ADC_Start_DMA+0x220>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d010      	beq.n	8001dda <HAL_ADC_Start_DMA+0xde>
 8001db8:	e005      	b.n	8001dc6 <HAL_ADC_Start_DMA+0xca>
 8001dba:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_ADC_Start_DMA+0x224>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_ADC_Start_DMA+0xde>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dce:	d004      	beq.n	8001dda <HAL_ADC_Start_DMA+0xde>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a53      	ldr	r2, [pc, #332]	; (8001f24 <HAL_ADC_Start_DMA+0x228>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d115      	bne.n	8001e06 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d036      	beq.n	8001e62 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dfc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e04:	e02d      	b.n	8001e62 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e1a:	d004      	beq.n	8001e26 <HAL_ADC_Start_DMA+0x12a>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3d      	ldr	r2, [pc, #244]	; (8001f18 <HAL_ADC_Start_DMA+0x21c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10a      	bne.n	8001e3c <HAL_ADC_Start_DMA+0x140>
 8001e26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e008      	b.n	8001e4e <HAL_ADC_Start_DMA+0x152>
 8001e3c:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_ADC_Start_DMA+0x228>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e6e:	d106      	bne.n	8001e7e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f023 0206 	bic.w	r2, r3, #6
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e7c:	e002      	b.n	8001e84 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	4a25      	ldr	r2, [pc, #148]	; (8001f28 <HAL_ADC_Start_DMA+0x22c>)
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <HAL_ADC_Start_DMA+0x230>)
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <HAL_ADC_Start_DMA+0x234>)
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	221c      	movs	r2, #28
 8001eaa:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0210 	orr.w	r2, r2, #16
 8001eba:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3340      	adds	r3, #64	; 0x40
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f000 fe90 	bl	8002c00 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0204 	orr.w	r2, r2, #4
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	e00d      	b.n	8001f0e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001efa:	e008      	b.n	8001f0e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f08:	e001      	b.n	8001f0e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	50000100 	.word	0x50000100
 8001f1c:	50000300 	.word	0x50000300
 8001f20:	50000700 	.word	0x50000700
 8001f24:	50000400 	.word	0x50000400
 8001f28:	080026f1 	.word	0x080026f1
 8001f2c:	0800276b 	.word	0x0800276b
 8001f30:	08002787 	.word	0x08002787

08001f34 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b09b      	sub	sp, #108	; 0x6c
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x22>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e2cb      	b.n	80024ee <HAL_ADC_ConfigChannel+0x5ba>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f040 82af 	bne.w	80024cc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d81c      	bhi.n	8001fb0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	461a      	mov	r2, r3
 8001f8a:	231f      	movs	r3, #31
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4019      	ands	r1, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
 8001fae:	e063      	b.n	8002078 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d81e      	bhi.n	8001ff6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	3b1e      	subs	r3, #30
 8001fcc:	221f      	movs	r2, #31
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4019      	ands	r1, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	3b1e      	subs	r3, #30
 8001fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ff4:	e040      	b.n	8002078 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b0e      	cmp	r3, #14
 8001ffc:	d81e      	bhi.n	800203c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	3b3c      	subs	r3, #60	; 0x3c
 8002012:	221f      	movs	r2, #31
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	4019      	ands	r1, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	3b3c      	subs	r3, #60	; 0x3c
 800202e:	fa00 f203 	lsl.w	r2, r0, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	639a      	str	r2, [r3, #56]	; 0x38
 800203a:	e01d      	b.n	8002078 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	3b5a      	subs	r3, #90	; 0x5a
 8002050:	221f      	movs	r2, #31
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	4019      	ands	r1, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	3b5a      	subs	r3, #90	; 0x5a
 800206c:	fa00 f203 	lsl.w	r2, r0, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 80e5 	bne.w	8002252 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b09      	cmp	r3, #9
 800208e:	d91c      	bls.n	80020ca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6999      	ldr	r1, [r3, #24]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	3b1e      	subs	r3, #30
 80020a2:	2207      	movs	r2, #7
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4019      	ands	r1, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6898      	ldr	r0, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	3b1e      	subs	r3, #30
 80020bc:	fa00 f203 	lsl.w	r2, r0, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	619a      	str	r2, [r3, #24]
 80020c8:	e019      	b.n	80020fe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6959      	ldr	r1, [r3, #20]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	2207      	movs	r2, #7
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4019      	ands	r1, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6898      	ldr	r0, [r3, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	fa00 f203 	lsl.w	r2, r0, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	3b01      	subs	r3, #1
 800211c:	2b03      	cmp	r3, #3
 800211e:	d84f      	bhi.n	80021c0 <HAL_ADC_ConfigChannel+0x28c>
 8002120:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_ADC_ConfigChannel+0x1f4>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	08002139 	.word	0x08002139
 800212c:	0800215b 	.word	0x0800215b
 8002130:	0800217d 	.word	0x0800217d
 8002134:	0800219f 	.word	0x0800219f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800213e:	4b9f      	ldr	r3, [pc, #636]	; (80023bc <HAL_ADC_ConfigChannel+0x488>)
 8002140:	4013      	ands	r3, r2
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	0691      	lsls	r1, r2, #26
 8002148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800214a:	430a      	orrs	r2, r1
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002156:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002158:	e07e      	b.n	8002258 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002160:	4b96      	ldr	r3, [pc, #600]	; (80023bc <HAL_ADC_ConfigChannel+0x488>)
 8002162:	4013      	ands	r3, r2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	0691      	lsls	r1, r2, #26
 800216a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800216c:	430a      	orrs	r2, r1
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002178:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800217a:	e06d      	b.n	8002258 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002182:	4b8e      	ldr	r3, [pc, #568]	; (80023bc <HAL_ADC_ConfigChannel+0x488>)
 8002184:	4013      	ands	r3, r2
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	0691      	lsls	r1, r2, #26
 800218c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800218e:	430a      	orrs	r2, r1
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800219a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800219c:	e05c      	b.n	8002258 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021a4:	4b85      	ldr	r3, [pc, #532]	; (80023bc <HAL_ADC_ConfigChannel+0x488>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	0691      	lsls	r1, r2, #26
 80021ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021b0:	430a      	orrs	r2, r1
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021bc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80021be:	e04b      	b.n	8002258 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	069b      	lsls	r3, r3, #26
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021e2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	069b      	lsls	r3, r3, #26
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d107      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002206:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800220e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	429a      	cmp	r2, r3
 800221a:	d107      	bne.n	800222c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800222a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	429a      	cmp	r2, r3
 800223e:	d10a      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800224e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002250:	e001      	b.n	8002256 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002252:	bf00      	nop
 8002254:	e000      	b.n	8002258 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002256:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d108      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x344>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x344>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_ADC_ConfigChannel+0x346>
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8131 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d00f      	beq.n	80022a8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2201      	movs	r2, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	400a      	ands	r2, r1
 80022a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022a6:	e049      	b.n	800233c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2201      	movs	r2, #1
 80022b6:	409a      	lsls	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	d91c      	bls.n	8002304 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6999      	ldr	r1, [r3, #24]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	3b1b      	subs	r3, #27
 80022dc:	2207      	movs	r2, #7
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	4019      	ands	r1, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6898      	ldr	r0, [r3, #8]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1b      	subs	r3, #27
 80022f6:	fa00 f203 	lsl.w	r2, r0, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	619a      	str	r2, [r3, #24]
 8002302:	e01b      	b.n	800233c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6959      	ldr	r1, [r3, #20]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	2207      	movs	r2, #7
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	4019      	ands	r1, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6898      	ldr	r0, [r3, #8]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	fa00 f203 	lsl.w	r2, r0, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002344:	d004      	beq.n	8002350 <HAL_ADC_ConfigChannel+0x41c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_ADC_ConfigChannel+0x48c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x420>
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <HAL_ADC_ConfigChannel+0x490>)
 8002352:	e000      	b.n	8002356 <HAL_ADC_ConfigChannel+0x422>
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_ADC_ConfigChannel+0x494>)
 8002356:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b10      	cmp	r3, #16
 800235e:	d105      	bne.n	800236c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002368:	2b00      	cmp	r3, #0
 800236a:	d015      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002370:	2b11      	cmp	r3, #17
 8002372:	d105      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002384:	2b12      	cmp	r3, #18
 8002386:	f040 80ac 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800238a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 80a5 	bne.w	80024e2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a0:	d102      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x474>
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_ADC_ConfigChannel+0x48c>)
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e023      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x4bc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_ADC_ConfigChannel+0x48c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10c      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x498>
 80023b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e01a      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x4bc>
 80023ba:	bf00      	nop
 80023bc:	83fff000 	.word	0x83fff000
 80023c0:	50000100 	.word	0x50000100
 80023c4:	50000300 	.word	0x50000300
 80023c8:	50000700 	.word	0x50000700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a4a      	ldr	r2, [pc, #296]	; (80024fc <HAL_ADC_ConfigChannel+0x5c8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d102      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x4a8>
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_ADC_ConfigChannel+0x5cc>)
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e009      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x4bc>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a47      	ldr	r2, [pc, #284]	; (8002500 <HAL_ADC_ConfigChannel+0x5cc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d102      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x4b8>
 80023e6:	4b45      	ldr	r3, [pc, #276]	; (80024fc <HAL_ADC_ConfigChannel+0x5c8>)
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e001      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x4bc>
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d108      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x4dc>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x4dc>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_ADC_ConfigChannel+0x4de>
 8002410:	2300      	movs	r3, #0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d150      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002416:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x504>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x504>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_ADC_ConfigChannel+0x506>
 8002438:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800243a:	2b00      	cmp	r3, #0
 800243c:	d13c      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b10      	cmp	r3, #16
 8002444:	d11d      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x54e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800244e:	d118      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800245a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_ADC_ConfigChannel+0x5d0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a29      	ldr	r2, [pc, #164]	; (8002508 <HAL_ADC_ConfigChannel+0x5d4>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0c9a      	lsrs	r2, r3, #18
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002472:	e002      	b.n	800247a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3b01      	subs	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f9      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002480:	e02e      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b11      	cmp	r3, #17
 8002488:	d10b      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x56e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002492:	d106      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800249c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800249e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024a0:	e01e      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b12      	cmp	r3, #18
 80024a8:	d11a      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80024aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024b6:	e013      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f043 0220 	orr.w	r2, r3, #32
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024ca:	e00a      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024de:	e000      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024e0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	376c      	adds	r7, #108	; 0x6c
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	50000400 	.word	0x50000400
 8002500:	50000500 	.word	0x50000500
 8002504:	2000001c 	.word	0x2000001c
 8002508:	431bde83 	.word	0x431bde83

0800250c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800250c:	b480      	push	{r7}
 800250e:	b099      	sub	sp, #100	; 0x64
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002524:	d102      	bne.n	800252c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002526:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	e01a      	b.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6a      	ldr	r2, [pc, #424]	; (80026dc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d103      	bne.n	800253e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002536:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	e011      	b.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a67      	ldr	r2, [pc, #412]	; (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d102      	bne.n	800254e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002548:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	e009      	b.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a64      	ldr	r2, [pc, #400]	; (80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d102      	bne.n	800255e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002558:	4b61      	ldr	r3, [pc, #388]	; (80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	e001      	b.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b0      	b.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002576:	2302      	movs	r3, #2
 8002578:	e0a9      	b.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 808d 	bne.w	80026ac <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 8086 	bne.w	80026ac <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a8:	d004      	beq.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a4b      	ldr	r2, [pc, #300]	; (80026dc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80025b4:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80025b6:	e000      	b.n	80025ba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80025b8:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80025ba:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d040      	beq.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80025c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025d6:	035b      	lsls	r3, r3, #13
 80025d8:	430b      	orrs	r3, r1
 80025da:	431a      	orrs	r2, r3
 80025dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025de:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d108      	bne.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d15c      	bne.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002622:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d14b      	bne.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002630:	f023 030f 	bic.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	6811      	ldr	r1, [r2, #0]
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	6892      	ldr	r2, [r2, #8]
 800263c:	430a      	orrs	r2, r1
 800263e:	431a      	orrs	r2, r3
 8002640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002642:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002644:	e03c      	b.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800264e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002650:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d108      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d123      	bne.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d107      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002694:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	d112      	bne.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800269a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026a2:	f023 030f 	bic.w	r3, r3, #15
 80026a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026a8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026aa:	e009      	b.n	80026c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80026be:	e000      	b.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026c0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80026ce:	4618      	mov	r0, r3
 80026d0:	3764      	adds	r7, #100	; 0x64
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	50000100 	.word	0x50000100
 80026e0:	50000400 	.word	0x50000400
 80026e4:	50000500 	.word	0x50000500
 80026e8:	50000300 	.word	0x50000300
 80026ec:	50000700 	.word	0x50000700

080026f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002706:	2b00      	cmp	r3, #0
 8002708:	d126      	bne.n	8002758 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002720:	2b00      	cmp	r3, #0
 8002722:	d115      	bne.n	8002750 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d105      	bne.n	8002750 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7ff f8d5 	bl	8001900 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002756:	e004      	b.n	8002762 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	4798      	blx	r3
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff f8cb 	bl	8001914 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff f8bb 	bl	8001928 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d108      	bne.n	80027e8 <ADC_Enable+0x2c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <ADC_Enable+0x2c>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <ADC_Enable+0x2e>
 80027e8:	2300      	movs	r3, #0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d143      	bne.n	8002876 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <ADC_Enable+0xc4>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00d      	beq.n	8002818 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f043 0210 	orr.w	r2, r3, #16
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e02f      	b.n	8002878 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002828:	f7ff f83c 	bl	80018a4 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800282e:	e01b      	b.n	8002868 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002830:	f7ff f838 	bl	80018a4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d914      	bls.n	8002868 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d00d      	beq.n	8002868 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f043 0210 	orr.w	r2, r3, #16
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e007      	b.n	8002878 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d1dc      	bne.n	8002830 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	8000003f 	.word	0x8000003f

08002884 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d108      	bne.n	80028b0 <ADC_Disable+0x2c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <ADC_Disable+0x2c>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <ADC_Disable+0x2e>
 80028b0:	2300      	movs	r3, #0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d047      	beq.n	8002946 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030d 	and.w	r3, r3, #13
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10f      	bne.n	80028e4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0202 	orr.w	r2, r2, #2
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2203      	movs	r2, #3
 80028da:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80028dc:	f7fe ffe2 	bl	80018a4 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028e2:	e029      	b.n	8002938 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f043 0210 	orr.w	r2, r3, #16
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e023      	b.n	8002948 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002900:	f7fe ffd0 	bl	80018a4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d914      	bls.n	8002938 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10d      	bne.n	8002938 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f043 0210 	orr.w	r2, r3, #16
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	f043 0201 	orr.w	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e007      	b.n	8002948 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d0dc      	beq.n	8002900 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4907      	ldr	r1, [pc, #28]	; (80029ec <__NVIC_EnableIRQ+0x38>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d301      	bcc.n	8002ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00f      	b.n	8002ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <SysTick_Config+0x40>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aca:	210f      	movs	r1, #15
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f7ff ff8e 	bl	80029f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x40>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x40>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff29 	bl	8002950 <__NVIC_SetPriorityGrouping>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b18:	f7ff ff3e 	bl	8002998 <__NVIC_GetPriorityGrouping>
 8002b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff ff8e 	bl	8002a44 <NVIC_EncodePriority>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff5d 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b36:	bf00      	nop
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff31 	bl	80029b4 <__NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffa2 	bl	8002aac <SysTick_Config>
 8002b68:	4603      	mov	r3, r0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e037      	b.n	8002bf8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ba2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f98c 	bl	8002ef8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}  
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA_Start_IT+0x20>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e04a      	b.n	8002cb6 <HAL_DMA_Start_IT+0xb6>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d13a      	bne.n	8002ca8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f91f 	bl	8002e9a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 020e 	orr.w	r2, r2, #14
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e00f      	b.n	8002c96 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 020a 	orr.w	r2, r2, #10
 8002c84:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0204 	bic.w	r2, r2, #4
 8002c94:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e005      	b.n	8002cb4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d005      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e027      	b.n	8002d30 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 020e 	bic.w	r2, r2, #14
 8002cee:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
    } 
  }
  return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2204      	movs	r2, #4
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d024      	beq.n	8002dac <HAL_DMA_IRQHandler+0x72>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01f      	beq.n	8002dac <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d107      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0204 	bic.w	r2, r2, #4
 8002d88:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	2104      	movs	r1, #4
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06a      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002daa:	e065      	b.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	2202      	movs	r2, #2
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d02c      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xdc>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d027      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 020a 	bic.w	r2, r2, #10
 8002de2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	2102      	movs	r1, #2
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d035      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e14:	e030      	b.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d028      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d023      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 020e 	bic.w	r2, r2, #14
 8002e3e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
    }
  }
}  
 8002e76:	e7ff      	b.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	d108      	bne.n	8002eda <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ed8:	e007      	b.n	8002eea <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	60da      	str	r2, [r3, #12]
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <DMA_CalcBaseAndBitshift+0x60>)
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d80f      	bhi.n	8002f2c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <DMA_CalcBaseAndBitshift+0x64>)
 8002f14:	4413      	add	r3, r2
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <DMA_CalcBaseAndBitshift+0x68>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	009a      	lsls	r2, r3, #2
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0f      	ldr	r2, [pc, #60]	; (8002f64 <DMA_CalcBaseAndBitshift+0x6c>)
 8002f28:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002f2a:	e00e      	b.n	8002f4a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <DMA_CalcBaseAndBitshift+0x70>)
 8002f34:	4413      	add	r3, r2
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <DMA_CalcBaseAndBitshift+0x68>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	009a      	lsls	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a09      	ldr	r2, [pc, #36]	; (8002f6c <DMA_CalcBaseAndBitshift+0x74>)
 8002f48:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40020407 	.word	0x40020407
 8002f5c:	bffdfff8 	.word	0xbffdfff8
 8002f60:	cccccccd 	.word	0xcccccccd
 8002f64:	40020000 	.word	0x40020000
 8002f68:	bffdfbf8 	.word	0xbffdfbf8
 8002f6c:	40020400 	.word	0x40020400

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7e:	e154      	b.n	800322a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2101      	movs	r1, #1
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8146 	beq.w	8003224 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d005      	beq.n	8002fb0 <HAL_GPIO_Init+0x40>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d130      	bne.n	8003012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	f003 0201 	and.w	r2, r3, #1
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b03      	cmp	r3, #3
 800301c:	d017      	beq.n	800304e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	2203      	movs	r2, #3
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d123      	bne.n	80030a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	08da      	lsrs	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3208      	adds	r2, #8
 8003062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	220f      	movs	r2, #15
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	08da      	lsrs	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3208      	adds	r2, #8
 800309c:	6939      	ldr	r1, [r7, #16]
 800309e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	2203      	movs	r2, #3
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0203 	and.w	r2, r3, #3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80a0 	beq.w	8003224 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e4:	4b58      	ldr	r3, [pc, #352]	; (8003248 <HAL_GPIO_Init+0x2d8>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	4a57      	ldr	r2, [pc, #348]	; (8003248 <HAL_GPIO_Init+0x2d8>)
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	6193      	str	r3, [r2, #24]
 80030f0:	4b55      	ldr	r3, [pc, #340]	; (8003248 <HAL_GPIO_Init+0x2d8>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030fc:	4a53      	ldr	r2, [pc, #332]	; (800324c <HAL_GPIO_Init+0x2dc>)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003108:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	220f      	movs	r2, #15
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003126:	d019      	beq.n	800315c <HAL_GPIO_Init+0x1ec>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a49      	ldr	r2, [pc, #292]	; (8003250 <HAL_GPIO_Init+0x2e0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <HAL_GPIO_Init+0x1e8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a48      	ldr	r2, [pc, #288]	; (8003254 <HAL_GPIO_Init+0x2e4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00d      	beq.n	8003154 <HAL_GPIO_Init+0x1e4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a47      	ldr	r2, [pc, #284]	; (8003258 <HAL_GPIO_Init+0x2e8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d007      	beq.n	8003150 <HAL_GPIO_Init+0x1e0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a46      	ldr	r2, [pc, #280]	; (800325c <HAL_GPIO_Init+0x2ec>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_GPIO_Init+0x1dc>
 8003148:	2304      	movs	r3, #4
 800314a:	e008      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 800314c:	2305      	movs	r3, #5
 800314e:	e006      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 8003150:	2303      	movs	r3, #3
 8003152:	e004      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 8003154:	2302      	movs	r3, #2
 8003156:	e002      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 800315c:	2300      	movs	r3, #0
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	f002 0203 	and.w	r2, r2, #3
 8003164:	0092      	lsls	r2, r2, #2
 8003166:	4093      	lsls	r3, r2
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800316e:	4937      	ldr	r1, [pc, #220]	; (800324c <HAL_GPIO_Init+0x2dc>)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3302      	adds	r3, #2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800317c:	4b38      	ldr	r3, [pc, #224]	; (8003260 <HAL_GPIO_Init+0x2f0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031a0:	4a2f      	ldr	r2, [pc, #188]	; (8003260 <HAL_GPIO_Init+0x2f0>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031a6:	4b2e      	ldr	r3, [pc, #184]	; (8003260 <HAL_GPIO_Init+0x2f0>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031ca:	4a25      	ldr	r2, [pc, #148]	; (8003260 <HAL_GPIO_Init+0x2f0>)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031d0:	4b23      	ldr	r3, [pc, #140]	; (8003260 <HAL_GPIO_Init+0x2f0>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031f4:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <HAL_GPIO_Init+0x2f0>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_GPIO_Init+0x2f0>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800321e:	4a10      	ldr	r2, [pc, #64]	; (8003260 <HAL_GPIO_Init+0x2f0>)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3301      	adds	r3, #1
 8003228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	f47f aea3 	bne.w	8002f80 <HAL_GPIO_Init+0x10>
  }
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	40010000 	.word	0x40010000
 8003250:	48000400 	.word	0x48000400
 8003254:	48000800 	.word	0x48000800
 8003258:	48000c00 	.word	0x48000c00
 800325c:	48001000 	.word	0x48001000
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003280:	e002      	b.n	8003288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e081      	b.n	80033aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe f9bc 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	; 0x24
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	e006      	b.n	800331c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800331a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d104      	bne.n	800332e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800332c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800333c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003340:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003350:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033d0:	2b28      	cmp	r3, #40	; 0x28
 80033d2:	f040 808a 	bne.w	80034ea <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e07e      	b.n	80034ec <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80033ee:	f248 0101 	movw	r1, #32769	; 0x8001
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f001 f9fc 	bl	80047f0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8003402:	2302      	movs	r3, #2
 8003404:	e072      	b.n	80034ec <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b2a      	cmp	r3, #42	; 0x2a
 8003418:	d12a      	bne.n	8003470 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800341a:	2102      	movs	r1, #2
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f001 f9e7 	bl	80047f0 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003430:	d11e      	bne.n	8003470 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003440:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d012      	beq.n	8003470 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 8003450:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fc31 	bl	8002cbe <HAL_DMA_Abort_IT>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800346c:	4610      	mov	r0, r2
 800346e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2229      	movs	r2, #41	; 0x29
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003494:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a10      	ldr	r2, [pc, #64]	; (80034f8 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 80034b6:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	0c1b      	lsrs	r3, r3, #16
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d103      	bne.n	80034d4 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2208      	movs	r2, #8
 80034d2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80034dc:	f248 0101 	movw	r1, #32769	; 0x8001
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f001 f921 	bl	8004728 <I2C_Enable_IRQ>

    return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e000      	b.n	80034ec <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
  }
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	0800468f 	.word	0x0800468f
 80034f8:	0800381b 	.word	0x0800381b

080034fc <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003518:	2b28      	cmp	r3, #40	; 0x28
 800351a:	f040 808a 	bne.w	8003632 <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e07e      	b.n	8003634 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003536:	f248 0102 	movw	r1, #32770	; 0x8002
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f001 f958 	bl	80047f0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800354a:	2302      	movs	r3, #2
 800354c:	e072      	b.n	8003634 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b29      	cmp	r3, #41	; 0x29
 8003560:	d12a      	bne.n	80035b8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003562:	2101      	movs	r1, #1
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f001 f943 	bl	80047f0 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003578:	d11e      	bne.n	80035b8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003588:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	2b00      	cmp	r3, #0
 8003590:	d012      	beq.n	80035b8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	4a29      	ldr	r2, [pc, #164]	; (800363c <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 8003598:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fb8d 	bl	8002cbe <HAL_DMA_Abort_IT>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035b4:	4610      	mov	r0, r2
 80035b6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	222a      	movs	r2, #42	; 0x2a
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035dc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4a10      	ldr	r2, [pc, #64]	; (8003640 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 80035fe:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	0c1b      	lsrs	r3, r3, #16
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d103      	bne.n	800361c <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2208      	movs	r2, #8
 800361a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003624:	f248 0102 	movw	r1, #32770	; 0x8002
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f001 f87d 	bl	8004728 <I2C_Enable_IRQ>

    return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
  }
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	0800468f 	.word	0x0800468f
 8003640:	0800381b 	.word	0x0800381b

08003644 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b20      	cmp	r3, #32
 8003656:	d10d      	bne.n	8003674 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2228      	movs	r2, #40	; 0x28
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a07      	ldr	r2, [pc, #28]	; (8003680 <HAL_I2C_EnableListen_IT+0x3c>)
 8003664:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f001 f85c 	bl	8004728 <I2C_Enable_IRQ>

    return HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	0800381b 	.word	0x0800381b

08003684 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
  }
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	09db      	lsrs	r3, r3, #7
 80036e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036fc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	0a9b      	lsrs	r3, r3, #10
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d010      	beq.n	800372c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	09db      	lsrs	r3, r3, #7
 800370e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f043 0208 	orr.w	r2, r3, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800372a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	0a5b      	lsrs	r3, r3, #9
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	09db      	lsrs	r3, r3, #7
 800373c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	f043 0202 	orr.w	r2, r3, #2
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003758:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 030b 	and.w	r3, r3, #11
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fe73 	bl	8004458 <I2C_ITError>
  }
}
 8003772:	bf00      	nop
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <I2C_Slave_ISR_IT+0x24>
 800383a:	2302      	movs	r3, #2
 800383c:	e0ec      	b.n	8003a18 <I2C_Slave_ISR_IT+0x1fe>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800385e:	6939      	ldr	r1, [r7, #16]
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fc99 	bl	8004198 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d04d      	beq.n	800390e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800387a:	2b00      	cmp	r3, #0
 800387c:	d047      	beq.n	800390e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d128      	bne.n	80038da <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b28      	cmp	r3, #40	; 0x28
 8003892:	d108      	bne.n	80038a6 <I2C_Slave_ISR_IT+0x8c>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800389a:	d104      	bne.n	80038a6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800389c:	6939      	ldr	r1, [r7, #16]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fd84 	bl	80043ac <I2C_ITListenCplt>
 80038a4:	e032      	b.n	800390c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b29      	cmp	r3, #41	; 0x29
 80038b0:	d10e      	bne.n	80038d0 <I2C_Slave_ISR_IT+0xb6>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038b8:	d00a      	beq.n	80038d0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2210      	movs	r2, #16
 80038c0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 febf 	bl	8004646 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fb3d 	bl	8003f48 <I2C_ITSlaveSeqCplt>
 80038ce:	e01d      	b.n	800390c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2210      	movs	r2, #16
 80038d6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80038d8:	e096      	b.n	8003a08 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2210      	movs	r2, #16
 80038e0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f043 0204 	orr.w	r2, r3, #4
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <I2C_Slave_ISR_IT+0xe4>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038fa:	f040 8085 	bne.w	8003a08 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	4619      	mov	r1, r3
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fda7 	bl	8004458 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800390a:	e07d      	b.n	8003a08 <I2C_Slave_ISR_IT+0x1ee>
 800390c:	e07c      	b.n	8003a08 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d030      	beq.n	800397c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003922:	2b00      	cmp	r3, #0
 8003924:	d02a      	beq.n	800397c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d018      	beq.n	8003962 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d14f      	bne.n	8003a0c <I2C_Slave_ISR_IT+0x1f2>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003972:	d04b      	beq.n	8003a0c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fae7 	bl	8003f48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800397a:	e047      	b.n	8003a0c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	08db      	lsrs	r3, r3, #3
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	08db      	lsrs	r3, r3, #3
 800398c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003994:	6939      	ldr	r1, [r7, #16]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fa15 	bl	8003dc6 <I2C_ITAddrCplt>
 800399c:	e037      	b.n	8003a0e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d031      	beq.n	8003a0e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02b      	beq.n	8003a0e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d018      	beq.n	80039f2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80039f0:	e00d      	b.n	8003a0e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f8:	d002      	beq.n	8003a00 <I2C_Slave_ISR_IT+0x1e6>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 faa1 	bl	8003f48 <I2C_ITSlaveSeqCplt>
 8003a06:	e002      	b.n	8003a0e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003a08:	bf00      	nop
 8003a0a:	e000      	b.n	8003a0e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003a0c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <I2C_Master_ISR_DMA+0x1a>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e0e1      	b.n	8003bfe <I2C_Master_ISR_DMA+0x1de>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d017      	beq.n	8003a7e <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d011      	beq.n	8003a7e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2210      	movs	r2, #16
 8003a60:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f043 0204 	orr.w	r2, r3, #4
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003a6e:	2120      	movs	r1, #32
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fe59 	bl	8004728 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 fde5 	bl	8004646 <I2C_Flush_TXDR>
 8003a7c:	e0ba      	b.n	8003bf4 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	09db      	lsrs	r3, r3, #7
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d072      	beq.n	8003b70 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d06c      	beq.n	8003b70 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d04e      	beq.n	8003b4e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003abc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2bff      	cmp	r3, #255	; 0xff
 8003ac6:	d906      	bls.n	8003ad6 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	22ff      	movs	r2, #255	; 0xff
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003ace:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	e010      	b.n	8003af8 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ae8:	d003      	beq.n	8003af2 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e002      	b.n	8003af8 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003af6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	8a79      	ldrh	r1, [r7, #18]
 8003b00:	2300      	movs	r3, #0
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fde0 	bl	80046cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b22      	cmp	r3, #34	; 0x22
 8003b28:	d108      	bne.n	8003b3c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b3a:	e05b      	b.n	8003bf4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b4a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003b4c:	e052      	b.n	8003bf4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b5c:	d003      	beq.n	8003b66 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f9b5 	bl	8003ece <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003b64:	e046      	b.n	8003bf4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b66:	2140      	movs	r1, #64	; 0x40
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fc75 	bl	8004458 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003b6e:	e041      	b.n	8003bf4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	099b      	lsrs	r3, r3, #6
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d029      	beq.n	8003bd0 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	099b      	lsrs	r3, r3, #6
 8003b80:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d023      	beq.n	8003bd0 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d119      	bne.n	8003bc6 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ba0:	d027      	beq.n	8003bf2 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003baa:	d108      	bne.n	8003bbe <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bba:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003bbc:	e019      	b.n	8003bf2 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f985 	bl	8003ece <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003bc4:	e015      	b.n	8003bf2 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003bc6:	2140      	movs	r1, #64	; 0x40
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fc45 	bl	8004458 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003bce:	e010      	b.n	8003bf2 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00b      	beq.n	8003bf4 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fa0a 	bl	8004004 <I2C_ITMasterCplt>
 8003bf0:	e000      	b.n	8003bf4 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003bf2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b088      	sub	sp, #32
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <I2C_Slave_ISR_DMA+0x24>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0c9      	b.n	8003dbe <I2C_Slave_ISR_DMA+0x1b8>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 faa3 	bl	8004198 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 809a 	beq.w	8003d94 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8093 	beq.w	8003d94 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	0b9b      	lsrs	r3, r3, #14
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d105      	bne.n	8003c86 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	0bdb      	lsrs	r3, r3, #15
 8003c7e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d07f      	beq.n	8003d86 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00d      	beq.n	8003caa <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	0bdb      	lsrs	r3, r3, #15
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0b9b      	lsrs	r3, r3, #14
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d128      	bne.n	8003d26 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b28      	cmp	r3, #40	; 0x28
 8003cde:	d108      	bne.n	8003cf2 <I2C_Slave_ISR_DMA+0xec>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ce6:	d104      	bne.n	8003cf2 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fb5e 	bl	80043ac <I2C_ITListenCplt>
 8003cf0:	e048      	b.n	8003d84 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b29      	cmp	r3, #41	; 0x29
 8003cfc:	d10e      	bne.n	8003d1c <I2C_Slave_ISR_DMA+0x116>
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d04:	d00a      	beq.n	8003d1c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fc99 	bl	8004646 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f917 	bl	8003f48 <I2C_ITSlaveSeqCplt>
 8003d1a:	e033      	b.n	8003d84 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2210      	movs	r2, #16
 8003d22:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003d24:	e034      	b.n	8003d90 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	f043 0204 	orr.w	r2, r3, #4
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d40:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <I2C_Slave_ISR_DMA+0x14a>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d4e:	d11f      	bne.n	8003d90 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	2b21      	cmp	r3, #33	; 0x21
 8003d54:	d002      	beq.n	8003d5c <I2C_Slave_ISR_DMA+0x156>
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b29      	cmp	r3, #41	; 0x29
 8003d5a:	d103      	bne.n	8003d64 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2221      	movs	r2, #33	; 0x21
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
 8003d62:	e008      	b.n	8003d76 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b22      	cmp	r3, #34	; 0x22
 8003d68:	d002      	beq.n	8003d70 <I2C_Slave_ISR_DMA+0x16a>
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d6e:	d102      	bne.n	8003d76 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2222      	movs	r2, #34	; 0x22
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fb6b 	bl	8004458 <I2C_ITError>
      if (treatdmanack == 1U)
 8003d82:	e005      	b.n	8003d90 <I2C_Slave_ISR_DMA+0x18a>
 8003d84:	e004      	b.n	8003d90 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d8e:	e011      	b.n	8003db4 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003d90:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d92:	e00f      	b.n	8003db4 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	08db      	lsrs	r3, r3, #3
 8003da4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f809 	bl	8003dc6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ddc:	2b28      	cmp	r3, #40	; 0x28
 8003dde:	d16a      	bne.n	8003eb6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	0c1b      	lsrs	r3, r3, #16
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	0c1b      	lsrs	r3, r3, #16
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003dfe:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e0c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e1a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d138      	bne.n	8003e96 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003e24:	897b      	ldrh	r3, [r7, #10]
 8003e26:	09db      	lsrs	r3, r3, #7
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	89bb      	ldrh	r3, [r7, #12]
 8003e2c:	4053      	eors	r3, r2
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f003 0306 	and.w	r3, r3, #6
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11c      	bne.n	8003e72 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003e38:	897b      	ldrh	r3, [r7, #10]
 8003e3a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d13b      	bne.n	8003ec6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2208      	movs	r2, #8
 8003e5a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e64:	89ba      	ldrh	r2, [r7, #12]
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fc fdca 	bl	8000a04 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e70:	e029      	b.n	8003ec6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003e72:	893b      	ldrh	r3, [r7, #8]
 8003e74:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fcb8 	bl	80047f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e88:	89ba      	ldrh	r2, [r7, #12]
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fc fdb8 	bl	8000a04 <HAL_I2C_AddrCallback>
}
 8003e94:	e017      	b.n	8003ec6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fca8 	bl	80047f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ea8:	89ba      	ldrh	r2, [r7, #12]
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fc fda8 	bl	8000a04 <HAL_I2C_AddrCallback>
}
 8003eb4:	e007      	b.n	8003ec6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b21      	cmp	r3, #33	; 0x21
 8003ee8:	d115      	bne.n	8003f16 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2211      	movs	r2, #17
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003efe:	2101      	movs	r1, #1
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fc75 	bl	80047f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff fc33 	bl	800377a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f14:	e014      	b.n	8003f40 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2212      	movs	r2, #18
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fc5f 	bl	80047f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fc27 	bl	800378e <HAL_I2C_MasterRxCpltCallback>
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	0b9b      	lsrs	r3, r3, #14
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e00d      	b.n	8003f9a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	0bdb      	lsrs	r3, r3, #15
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b29      	cmp	r3, #41	; 0x29
 8003fa4:	d112      	bne.n	8003fcc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2228      	movs	r2, #40	; 0x28
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2221      	movs	r2, #33	; 0x21
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fc1a 	bl	80047f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff fbec 	bl	80037a2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003fca:	e017      	b.n	8003ffc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd6:	d111      	bne.n	8003ffc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2228      	movs	r2, #40	; 0x28
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2222      	movs	r2, #34	; 0x22
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fc01 	bl	80047f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff fbdd 	bl	80037b6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2220      	movs	r2, #32
 8004018:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b21      	cmp	r3, #33	; 0x21
 8004024:	d107      	bne.n	8004036 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004026:	2101      	movs	r1, #1
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fbe1 	bl	80047f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2211      	movs	r2, #17
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
 8004034:	e00c      	b.n	8004050 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b22      	cmp	r3, #34	; 0x22
 8004040:	d106      	bne.n	8004050 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004042:	2102      	movs	r1, #2
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fbd3 	bl	80047f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2212      	movs	r2, #18
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b4d      	ldr	r3, [pc, #308]	; (8004190 <I2C_ITMasterCplt+0x18c>)
 800405c:	400b      	ands	r3, r1
 800405e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4a      	ldr	r2, [pc, #296]	; (8004194 <I2C_ITMasterCplt+0x190>)
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d009      	beq.n	800408c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2210      	movs	r2, #16
 800407e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004084:	f043 0204 	orr.w	r2, r3, #4
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b60      	cmp	r3, #96	; 0x60
 8004096:	d10b      	bne.n	80040b0 <I2C_ITMasterCplt+0xac>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80040ae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fac8 	bl	8004646 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d002      	beq.n	80040ce <I2C_ITMasterCplt+0xca>
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d006      	beq.n	80040dc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	4619      	mov	r1, r3
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f9bf 	bl	8004458 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80040da:	e054      	b.n	8004186 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b21      	cmp	r3, #33	; 0x21
 80040e6:	d124      	bne.n	8004132 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d10b      	bne.n	800411a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff fb59 	bl	80037ca <HAL_I2C_MemTxCpltCallback>
}
 8004118:	e035      	b.n	8004186 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff fb25 	bl	800377a <HAL_I2C_MasterTxCpltCallback>
}
 8004130:	e029      	b.n	8004186 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b22      	cmp	r3, #34	; 0x22
 800413c:	d123      	bne.n	8004186 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d10b      	bne.n	8004170 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fb38 	bl	80037de <HAL_I2C_MemRxCpltCallback>
}
 800416e:	e00a      	b.n	8004186 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fb04 	bl	800378e <HAL_I2C_MasterRxCpltCallback>
}
 8004186:	bf00      	nop
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	fe00e800 	.word	0xfe00e800
 8004194:	ffff0000 	.word	0xffff0000

08004198 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2220      	movs	r2, #32
 80041bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b21      	cmp	r3, #33	; 0x21
 80041c2:	d002      	beq.n	80041ca <I2C_ITSlaveCplt+0x32>
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b29      	cmp	r3, #41	; 0x29
 80041c8:	d108      	bne.n	80041dc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80041ca:	f248 0101 	movw	r1, #32769	; 0x8001
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fb0e 	bl	80047f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2221      	movs	r2, #33	; 0x21
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
 80041da:	e00d      	b.n	80041f8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b22      	cmp	r3, #34	; 0x22
 80041e0:	d002      	beq.n	80041e8 <I2C_ITSlaveCplt+0x50>
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b2a      	cmp	r3, #42	; 0x2a
 80041e6:	d107      	bne.n	80041f8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80041e8:	f248 0102 	movw	r1, #32770	; 0x8002
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 faff 	bl	80047f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2222      	movs	r2, #34	; 0x22
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004206:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b64      	ldr	r3, [pc, #400]	; (80043a4 <I2C_ITSlaveCplt+0x20c>)
 8004214:	400b      	ands	r3, r1
 8004216:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fa14 	bl	8004646 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	0b9b      	lsrs	r3, r3, #14
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d013      	beq.n	8004252 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004238:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	2b00      	cmp	r3, #0
 8004240:	d020      	beq.n	8004284 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004250:	e018      	b.n	8004284 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	0bdb      	lsrs	r3, r3, #15
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d012      	beq.n	8004284 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800426c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d006      	beq.n	8004284 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d020      	beq.n	80042d2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0304 	bic.w	r3, r3, #4
 8004296:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00c      	beq.n	80042d2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	f043 0204 	orr.w	r2, r3, #4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d010      	beq.n	8004320 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	4619      	mov	r1, r3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f8a7 	bl	8004458 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b28      	cmp	r3, #40	; 0x28
 8004314:	d141      	bne.n	800439a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f847 	bl	80043ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800431e:	e03c      	b.n	800439a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004328:	d014      	beq.n	8004354 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fe0c 	bl	8003f48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a1d      	ldr	r2, [pc, #116]	; (80043a8 <I2C_ITSlaveCplt+0x210>)
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fc fbef 	bl	8000b30 <HAL_I2C_ListenCpltCallback>
}
 8004352:	e022      	b.n	800439a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b22      	cmp	r3, #34	; 0x22
 800435e:	d10e      	bne.n	800437e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fa1d 	bl	80037b6 <HAL_I2C_SlaveRxCpltCallback>
}
 800437c:	e00d      	b.n	800439a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff fa04 	bl	80037a2 <HAL_I2C_SlaveTxCpltCallback>
}
 800439a:	bf00      	nop
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	fe00e800 	.word	0xfe00e800
 80043a8:	ffff0000 	.word	0xffff0000

080043ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a26      	ldr	r2, [pc, #152]	; (8004454 <I2C_ITListenCplt+0xa8>)
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	089b      	lsrs	r3, r3, #2
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d022      	beq.n	800442a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d012      	beq.n	800442a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f043 0204 	orr.w	r2, r3, #4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800442a:	f248 0103 	movw	r1, #32771	; 0x8003
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f9de 	bl	80047f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2210      	movs	r2, #16
 800443a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fc fb73 	bl	8000b30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	ffff0000 	.word	0xffff0000

08004458 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a5d      	ldr	r2, [pc, #372]	; (80045ec <I2C_ITError+0x194>)
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	2b28      	cmp	r3, #40	; 0x28
 800448e:	d005      	beq.n	800449c <I2C_ITError+0x44>
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b29      	cmp	r3, #41	; 0x29
 8004494:	d002      	beq.n	800449c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	2b2a      	cmp	r3, #42	; 0x2a
 800449a:	d10b      	bne.n	80044b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800449c:	2103      	movs	r1, #3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9a6 	bl	80047f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2228      	movs	r2, #40	; 0x28
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a50      	ldr	r2, [pc, #320]	; (80045f0 <I2C_ITError+0x198>)
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34
 80044b2:	e011      	b.n	80044d8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80044b4:	f248 0103 	movw	r1, #32771	; 0x8003
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f999 	bl	80047f0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b60      	cmp	r3, #96	; 0x60
 80044c8:	d003      	beq.n	80044d2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d039      	beq.n	800455a <I2C_ITError+0x102>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b11      	cmp	r3, #17
 80044ea:	d002      	beq.n	80044f2 <I2C_ITError+0x9a>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b21      	cmp	r3, #33	; 0x21
 80044f0:	d133      	bne.n	800455a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004500:	d107      	bne.n	8004512 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004510:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fcb2 	bl	8002e80 <HAL_DMA_GetState>
 800451c:	4603      	mov	r3, r0
 800451e:	2b01      	cmp	r3, #1
 8004520:	d017      	beq.n	8004552 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4a33      	ldr	r2, [pc, #204]	; (80045f4 <I2C_ITError+0x19c>)
 8004528:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fbc1 	bl	8002cbe <HAL_DMA_Abort_IT>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d04d      	beq.n	80045de <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800454c:	4610      	mov	r0, r2
 800454e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004550:	e045      	b.n	80045de <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f850 	bl	80045f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004558:	e041      	b.n	80045de <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d039      	beq.n	80045d6 <I2C_ITError+0x17e>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b12      	cmp	r3, #18
 8004566:	d002      	beq.n	800456e <I2C_ITError+0x116>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b22      	cmp	r3, #34	; 0x22
 800456c:	d133      	bne.n	80045d6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457c:	d107      	bne.n	800458e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800458c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe fc74 	bl	8002e80 <HAL_DMA_GetState>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d017      	beq.n	80045ce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <I2C_ITError+0x19c>)
 80045a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fb83 	bl	8002cbe <HAL_DMA_Abort_IT>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d011      	beq.n	80045e2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045c8:	4610      	mov	r0, r2
 80045ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045cc:	e009      	b.n	80045e2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f812 	bl	80045f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045d4:	e005      	b.n	80045e2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f80e 	bl	80045f8 <I2C_TreatErrorCallback>
  }
}
 80045dc:	e002      	b.n	80045e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045de:	bf00      	nop
 80045e0:	e000      	b.n	80045e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045e2:	bf00      	nop
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	ffff0000 	.word	0xffff0000
 80045f0:	0800381b 	.word	0x0800381b
 80045f4:	0800468f 	.word	0x0800468f

080045f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b60      	cmp	r3, #96	; 0x60
 800460a:	d10e      	bne.n	800462a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff f8ef 	bl	8003806 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004628:	e009      	b.n	800463e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff f8da 	bl	80037f2 <HAL_I2C_ErrorCallback>
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b02      	cmp	r3, #2
 800465a:	d103      	bne.n	8004664 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2200      	movs	r2, #0
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b01      	cmp	r3, #1
 8004670:	d007      	beq.n	8004682 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0201 	orr.w	r2, r2, #1
 8004680:	619a      	str	r2, [r3, #24]
  }
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	2200      	movs	r2, #0
 80046aa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	2200      	movs	r2, #0
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff ff9b 	bl	80045f8 <I2C_TreatErrorCallback>
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	817b      	strh	r3, [r7, #10]
 80046da:	4613      	mov	r3, r2
 80046dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	0d5b      	lsrs	r3, r3, #21
 80046e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <I2C_TransferConfig+0x58>)
 80046ee:	430b      	orrs	r3, r1
 80046f0:	43db      	mvns	r3, r3
 80046f2:	ea02 0103 	and.w	r1, r2, r3
 80046f6:	897b      	ldrh	r3, [r7, #10]
 80046f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046fc:	7a7b      	ldrb	r3, [r7, #9]
 80046fe:	041b      	lsls	r3, r3, #16
 8004700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	431a      	orrs	r2, r3
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	431a      	orrs	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	03ff63ff 	.word	0x03ff63ff

08004728 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <I2C_Enable_IRQ+0xc0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004746:	4a29      	ldr	r2, [pc, #164]	; (80047ec <I2C_Enable_IRQ+0xc4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d11d      	bne.n	8004788 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800474c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004750:	2b00      	cmp	r3, #0
 8004752:	da03      	bge.n	800475c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800475a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800475c:	887b      	ldrh	r3, [r7, #2]
 800475e:	2b10      	cmp	r3, #16
 8004760:	d103      	bne.n	800476a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004768:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800476a:	887b      	ldrh	r3, [r7, #2]
 800476c:	2b20      	cmp	r3, #32
 800476e:	d103      	bne.n	8004778 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004776:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004778:	887b      	ldrh	r3, [r7, #2]
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d125      	bne.n	80047ca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004784:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004786:	e020      	b.n	80047ca <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004788:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800478c:	2b00      	cmp	r3, #0
 800478e:	da03      	bge.n	8004798 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004796:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004798:	887b      	ldrh	r3, [r7, #2]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80047a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80047aa:	887b      	ldrh	r3, [r7, #2]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80047ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047bc:	887b      	ldrh	r3, [r7, #2]
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d103      	bne.n	80047ca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f043 0320 	orr.w	r3, r3, #32
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6819      	ldr	r1, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	08003a21 	.word	0x08003a21
 80047ec:	08003c07 	.word	0x08003c07

080047f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004800:	887b      	ldrh	r3, [r7, #2]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00f      	beq.n	800482a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004810:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800481e:	2b28      	cmp	r3, #40	; 0x28
 8004820:	d003      	beq.n	800482a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004828:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800482a:	887b      	ldrh	r3, [r7, #2]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00f      	beq.n	8004854 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800483a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004848:	2b28      	cmp	r3, #40	; 0x28
 800484a:	d003      	beq.n	8004854 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004852:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004854:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004858:	2b00      	cmp	r3, #0
 800485a:	da03      	bge.n	8004864 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004862:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004864:	887b      	ldrh	r3, [r7, #2]
 8004866:	2b10      	cmp	r3, #16
 8004868:	d103      	bne.n	8004872 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004870:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004872:	887b      	ldrh	r3, [r7, #2]
 8004874:	2b20      	cmp	r3, #32
 8004876:	d103      	bne.n	8004880 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f043 0320 	orr.w	r3, r3, #32
 800487e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004880:	887b      	ldrh	r3, [r7, #2]
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d103      	bne.n	800488e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800488c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	43da      	mvns	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	400a      	ands	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d138      	bne.n	8004934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e032      	b.n	8004936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	; 0x24
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0201 	bic.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6819      	ldr	r1, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b20      	cmp	r3, #32
 8004956:	d139      	bne.n	80049cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004962:	2302      	movs	r3, #2
 8004964:	e033      	b.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2224      	movs	r2, #36	; 0x24
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004994:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	1d3b      	adds	r3, r7, #4
 80049e6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d102      	bne.n	80049f6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	f000 bef4 	b.w	80057de <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f6:	1d3b      	adds	r3, r7, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f000 816a 	beq.w	8004cda <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a06:	4bb3      	ldr	r3, [pc, #716]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d00c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a12:	4bb0      	ldr	r3, [pc, #704]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d159      	bne.n	8004ad2 <HAL_RCC_OscConfig+0xf6>
 8004a1e:	4bad      	ldr	r3, [pc, #692]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2a:	d152      	bne.n	8004ad2 <HAL_RCC_OscConfig+0xf6>
 8004a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a30:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a34:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a38:	fa93 f3a3 	rbit	r3, r3
 8004a3c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a40:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	fab3 f383 	clz	r3, r3
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d102      	bne.n	8004a5e <HAL_RCC_OscConfig+0x82>
 8004a58:	4b9e      	ldr	r3, [pc, #632]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0xae>
 8004a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a62:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004a6a:	fa93 f3a3 	rbit	r3, r3
 8004a6e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a76:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004a7a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004a86:	4b93      	ldr	r3, [pc, #588]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a8e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004a92:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a96:	fa92 f2a2 	rbit	r2, r2
 8004a9a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004a9e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004aa2:	fab2 f282 	clz	r2, r2
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	f042 0220 	orr.w	r2, r2, #32
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	f002 021f 	and.w	r2, r2, #31
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 810c 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x2fc>
 8004ac0:	1d3b      	adds	r3, r7, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 8106 	bne.w	8004cd8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	f000 be86 	b.w	80057de <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004adc:	d106      	bne.n	8004aec <HAL_RCC_OscConfig+0x110>
 8004ade:	4b7d      	ldr	r3, [pc, #500]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a7c      	ldr	r2, [pc, #496]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e030      	b.n	8004b4e <HAL_RCC_OscConfig+0x172>
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0x134>
 8004af6:	4b77      	ldr	r3, [pc, #476]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a76      	ldr	r2, [pc, #472]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	4b74      	ldr	r3, [pc, #464]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a73      	ldr	r2, [pc, #460]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e01e      	b.n	8004b4e <HAL_RCC_OscConfig+0x172>
 8004b10:	1d3b      	adds	r3, r7, #4
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b1a:	d10c      	bne.n	8004b36 <HAL_RCC_OscConfig+0x15a>
 8004b1c:	4b6d      	ldr	r3, [pc, #436]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6c      	ldr	r2, [pc, #432]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4b6a      	ldr	r3, [pc, #424]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a69      	ldr	r2, [pc, #420]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	e00b      	b.n	8004b4e <HAL_RCC_OscConfig+0x172>
 8004b36:	4b67      	ldr	r3, [pc, #412]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a66      	ldr	r2, [pc, #408]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	4b64      	ldr	r3, [pc, #400]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a63      	ldr	r2, [pc, #396]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b4e:	4b61      	ldr	r3, [pc, #388]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	f023 020f 	bic.w	r2, r3, #15
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	495d      	ldr	r1, [pc, #372]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b62:	1d3b      	adds	r3, r7, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d059      	beq.n	8004c20 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6c:	f7fc fe9a 	bl	80018a4 <HAL_GetTick>
 8004b70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b76:	f7fc fe95 	bl	80018a4 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	; 0x64
 8004b84:	d902      	bls.n	8004b8c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	f000 be29 	b.w	80057de <HAL_RCC_OscConfig+0xe02>
 8004b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b90:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b94:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b98:	fa93 f3a3 	rbit	r3, r3
 8004b9c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004ba0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba4:	fab3 f383 	clz	r3, r3
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d102      	bne.n	8004bbe <HAL_RCC_OscConfig+0x1e2>
 8004bb8:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	e015      	b.n	8004bea <HAL_RCC_OscConfig+0x20e>
 8004bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bc2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004bca:	fa93 f3a3 	rbit	r3, r3
 8004bce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004bda:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004be6:	4b3b      	ldr	r3, [pc, #236]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bee:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004bf2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004bf6:	fa92 f2a2 	rbit	r2, r2
 8004bfa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004bfe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004c02:	fab2 f282 	clz	r2, r2
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	f042 0220 	orr.w	r2, r2, #32
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	f002 021f 	and.w	r2, r2, #31
 8004c12:	2101      	movs	r1, #1
 8004c14:	fa01 f202 	lsl.w	r2, r1, r2
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ab      	beq.n	8004b76 <HAL_RCC_OscConfig+0x19a>
 8004c1e:	e05c      	b.n	8004cda <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fc fe40 	bl	80018a4 <HAL_GetTick>
 8004c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c2a:	f7fc fe3b 	bl	80018a4 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	; 0x64
 8004c38:	d902      	bls.n	8004c40 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	f000 bdcf 	b.w	80057de <HAL_RCC_OscConfig+0xe02>
 8004c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c44:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004c4c:	fa93 f3a3 	rbit	r3, r3
 8004c50:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004c54:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c58:	fab3 f383 	clz	r3, r3
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d102      	bne.n	8004c72 <HAL_RCC_OscConfig+0x296>
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	e015      	b.n	8004c9e <HAL_RCC_OscConfig+0x2c2>
 8004c72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c76:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c7e:	fa93 f3a3 	rbit	r3, r3
 8004c82:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c8a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c8e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004c92:	fa93 f3a3 	rbit	r3, r3
 8004c96:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c9a:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <HAL_RCC_OscConfig+0x2f8>)
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ca2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004ca6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004caa:	fa92 f2a2 	rbit	r2, r2
 8004cae:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004cb2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004cb6:	fab2 f282 	clz	r2, r2
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	f042 0220 	orr.w	r2, r2, #32
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	f002 021f 	and.w	r2, r2, #31
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1ab      	bne.n	8004c2a <HAL_RCC_OscConfig+0x24e>
 8004cd2:	e002      	b.n	8004cda <HAL_RCC_OscConfig+0x2fe>
 8004cd4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cda:	1d3b      	adds	r3, r7, #4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 816f 	beq.w	8004fc8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004cea:	4bd0      	ldr	r3, [pc, #832]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00b      	beq.n	8004d0e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cf6:	4bcd      	ldr	r3, [pc, #820]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d16c      	bne.n	8004ddc <HAL_RCC_OscConfig+0x400>
 8004d02:	4bca      	ldr	r3, [pc, #808]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d166      	bne.n	8004ddc <HAL_RCC_OscConfig+0x400>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d14:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d18:	fa93 f3a3 	rbit	r3, r3
 8004d1c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d20:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d24:	fab3 f383 	clz	r3, r3
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d102      	bne.n	8004d3e <HAL_RCC_OscConfig+0x362>
 8004d38:	4bbc      	ldr	r3, [pc, #752]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	e013      	b.n	8004d66 <HAL_RCC_OscConfig+0x38a>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d44:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d48:	fa93 f3a3 	rbit	r3, r3
 8004d4c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004d50:	2302      	movs	r3, #2
 8004d52:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004d56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004d5a:	fa93 f3a3 	rbit	r3, r3
 8004d5e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004d62:	4bb2      	ldr	r3, [pc, #712]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2202      	movs	r2, #2
 8004d68:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d6c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d70:	fa92 f2a2 	rbit	r2, r2
 8004d74:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004d78:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004d7c:	fab2 f282 	clz	r2, r2
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	f042 0220 	orr.w	r2, r2, #32
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	f002 021f 	and.w	r2, r2, #31
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <HAL_RCC_OscConfig+0x3cc>
 8004d98:	1d3b      	adds	r3, r7, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d002      	beq.n	8004da8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f000 bd1b 	b.w	80057de <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da8:	4ba0      	ldr	r3, [pc, #640]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db0:	1d3b      	adds	r3, r7, #4
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	21f8      	movs	r1, #248	; 0xf8
 8004db8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004dc0:	fa91 f1a1 	rbit	r1, r1
 8004dc4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004dc8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004dcc:	fab1 f181 	clz	r1, r1
 8004dd0:	b2c9      	uxtb	r1, r1
 8004dd2:	408b      	lsls	r3, r1
 8004dd4:	4995      	ldr	r1, [pc, #596]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dda:	e0f5      	b.n	8004fc8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ddc:	1d3b      	adds	r3, r7, #4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8085 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x516>
 8004de8:	2301      	movs	r3, #1
 8004dea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004df2:	fa93 f3a3 	rbit	r3, r3
 8004df6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004dfa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfe:	fab3 f383 	clz	r3, r3
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2301      	movs	r3, #1
 8004e12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fc fd46 	bl	80018a4 <HAL_GetTick>
 8004e18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e1e:	f7fc fd41 	bl	80018a4 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d902      	bls.n	8004e34 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	f000 bcd5 	b.w	80057de <HAL_RCC_OscConfig+0xe02>
 8004e34:	2302      	movs	r3, #2
 8004e36:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004e46:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4a:	fab3 f383 	clz	r3, r3
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d102      	bne.n	8004e64 <HAL_RCC_OscConfig+0x488>
 8004e5e:	4b73      	ldr	r3, [pc, #460]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	e013      	b.n	8004e8c <HAL_RCC_OscConfig+0x4b0>
 8004e64:	2302      	movs	r3, #2
 8004e66:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e76:	2302      	movs	r3, #2
 8004e78:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e7c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e80:	fa93 f3a3 	rbit	r3, r3
 8004e84:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e88:	4b68      	ldr	r3, [pc, #416]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004e92:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e96:	fa92 f2a2 	rbit	r2, r2
 8004e9a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004e9e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004ea2:	fab2 f282 	clz	r2, r2
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	f042 0220 	orr.w	r2, r2, #32
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	f002 021f 	and.w	r2, r2, #31
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0af      	beq.n	8004e1e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebe:	4b5b      	ldr	r3, [pc, #364]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ec6:	1d3b      	adds	r3, r7, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	21f8      	movs	r1, #248	; 0xf8
 8004ece:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ed6:	fa91 f1a1 	rbit	r1, r1
 8004eda:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004ede:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004ee2:	fab1 f181 	clz	r1, r1
 8004ee6:	b2c9      	uxtb	r1, r1
 8004ee8:	408b      	lsls	r3, r1
 8004eea:	4950      	ldr	r1, [pc, #320]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	600b      	str	r3, [r1, #0]
 8004ef0:	e06a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x5ec>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004efc:	fa93 f3a3 	rbit	r3, r3
 8004f00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f08:	fab3 f383 	clz	r3, r3
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1e:	f7fc fcc1 	bl	80018a4 <HAL_GetTick>
 8004f22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f28:	f7fc fcbc 	bl	80018a4 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d902      	bls.n	8004f3e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	f000 bc50 	b.w	80057de <HAL_RCC_OscConfig+0xe02>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f48:	fa93 f3a3 	rbit	r3, r3
 8004f4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f54:	fab3 f383 	clz	r3, r3
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d102      	bne.n	8004f6e <HAL_RCC_OscConfig+0x592>
 8004f68:	4b30      	ldr	r3, [pc, #192]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	e013      	b.n	8004f96 <HAL_RCC_OscConfig+0x5ba>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f78:	fa93 f3a3 	rbit	r3, r3
 8004f7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f80:	2302      	movs	r3, #2
 8004f82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f8a:	fa93 f3a3 	rbit	r3, r3
 8004f8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f92:	4b26      	ldr	r3, [pc, #152]	; (800502c <HAL_RCC_OscConfig+0x650>)
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	2202      	movs	r2, #2
 8004f98:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004f9c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004fa0:	fa92 f2a2 	rbit	r2, r2
 8004fa4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004fa8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004fac:	fab2 f282 	clz	r2, r2
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	f042 0220 	orr.w	r2, r2, #32
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	f002 021f 	and.w	r2, r2, #31
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1af      	bne.n	8004f28 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fc8:	1d3b      	adds	r3, r7, #4
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80da 	beq.w	800518c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fd8:	1d3b      	adds	r3, r7, #4
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d069      	beq.n	80050b6 <HAL_RCC_OscConfig+0x6da>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fec:	fa93 f3a3 	rbit	r3, r3
 8004ff0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff8:	fab3 f383 	clz	r3, r3
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_RCC_OscConfig+0x654>)
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	461a      	mov	r2, r3
 8005008:	2301      	movs	r3, #1
 800500a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500c:	f7fc fc4a 	bl	80018a4 <HAL_GetTick>
 8005010:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005014:	e00e      	b.n	8005034 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005016:	f7fc fc45 	bl	80018a4 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d906      	bls.n	8005034 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e3d9      	b.n	80057de <HAL_RCC_OscConfig+0xe02>
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000
 8005030:	10908120 	.word	0x10908120
 8005034:	2302      	movs	r3, #2
 8005036:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800503e:	fa93 f3a3 	rbit	r3, r3
 8005042:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005046:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800504a:	2202      	movs	r2, #2
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	fa93 f2a3 	rbit	r2, r3
 8005058:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005062:	2202      	movs	r2, #2
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	fa93 f2a3 	rbit	r2, r3
 8005070:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005074:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005076:	4ba5      	ldr	r3, [pc, #660]	; (800530c <HAL_RCC_OscConfig+0x930>)
 8005078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800507a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800507e:	2102      	movs	r1, #2
 8005080:	6019      	str	r1, [r3, #0]
 8005082:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	fa93 f1a3 	rbit	r1, r3
 800508c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005090:	6019      	str	r1, [r3, #0]
  return result;
 8005092:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	fab3 f383 	clz	r3, r3
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2101      	movs	r1, #1
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0b0      	beq.n	8005016 <HAL_RCC_OscConfig+0x63a>
 80050b4:	e06a      	b.n	800518c <HAL_RCC_OscConfig+0x7b0>
 80050b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80050ba:	2201      	movs	r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	fa93 f2a3 	rbit	r2, r3
 80050c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050cc:	601a      	str	r2, [r3, #0]
  return result;
 80050ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80050d2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d4:	fab3 f383 	clz	r3, r3
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	4b8c      	ldr	r3, [pc, #560]	; (8005310 <HAL_RCC_OscConfig+0x934>)
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	461a      	mov	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e8:	f7fc fbdc 	bl	80018a4 <HAL_GetTick>
 80050ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f0:	e009      	b.n	8005106 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050f2:	f7fc fbd7 	bl	80018a4 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e36b      	b.n	80057de <HAL_RCC_OscConfig+0xe02>
 8005106:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800510a:	2202      	movs	r2, #2
 800510c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	fa93 f2a3 	rbit	r2, r3
 8005118:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005122:	2202      	movs	r2, #2
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	fa93 f2a3 	rbit	r2, r3
 8005130:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800513a:	2202      	movs	r2, #2
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	fa93 f2a3 	rbit	r2, r3
 8005148:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800514c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800514e:	4b6f      	ldr	r3, [pc, #444]	; (800530c <HAL_RCC_OscConfig+0x930>)
 8005150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005152:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005156:	2102      	movs	r1, #2
 8005158:	6019      	str	r1, [r3, #0]
 800515a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	fa93 f1a3 	rbit	r1, r3
 8005164:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005168:	6019      	str	r1, [r3, #0]
  return result;
 800516a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	fab3 f383 	clz	r3, r3
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2101      	movs	r1, #1
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	4013      	ands	r3, r2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1b2      	bne.n	80050f2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800518c:	1d3b      	adds	r3, r7, #4
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8158 	beq.w	800544c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519c:	2300      	movs	r3, #0
 800519e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a2:	4b5a      	ldr	r3, [pc, #360]	; (800530c <HAL_RCC_OscConfig+0x930>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d112      	bne.n	80051d4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ae:	4b57      	ldr	r3, [pc, #348]	; (800530c <HAL_RCC_OscConfig+0x930>)
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	4a56      	ldr	r2, [pc, #344]	; (800530c <HAL_RCC_OscConfig+0x930>)
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	61d3      	str	r3, [r2, #28]
 80051ba:	4b54      	ldr	r3, [pc, #336]	; (800530c <HAL_RCC_OscConfig+0x930>)
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80051c2:	f107 0308 	add.w	r3, r7, #8
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f107 0308 	add.w	r3, r7, #8
 80051cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d4:	4b4f      	ldr	r3, [pc, #316]	; (8005314 <HAL_RCC_OscConfig+0x938>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d11a      	bne.n	8005216 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e0:	4b4c      	ldr	r3, [pc, #304]	; (8005314 <HAL_RCC_OscConfig+0x938>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a4b      	ldr	r2, [pc, #300]	; (8005314 <HAL_RCC_OscConfig+0x938>)
 80051e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ec:	f7fc fb5a 	bl	80018a4 <HAL_GetTick>
 80051f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	e009      	b.n	800520a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f6:	f7fc fb55 	bl	80018a4 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	; 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e2e9      	b.n	80057de <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520a:	4b42      	ldr	r3, [pc, #264]	; (8005314 <HAL_RCC_OscConfig+0x938>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0ef      	beq.n	80051f6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005216:	1d3b      	adds	r3, r7, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d106      	bne.n	800522e <HAL_RCC_OscConfig+0x852>
 8005220:	4b3a      	ldr	r3, [pc, #232]	; (800530c <HAL_RCC_OscConfig+0x930>)
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	4a39      	ldr	r2, [pc, #228]	; (800530c <HAL_RCC_OscConfig+0x930>)
 8005226:	f043 0301 	orr.w	r3, r3, #1
 800522a:	6213      	str	r3, [r2, #32]
 800522c:	e02f      	b.n	800528e <HAL_RCC_OscConfig+0x8b2>
 800522e:	1d3b      	adds	r3, r7, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10c      	bne.n	8005252 <HAL_RCC_OscConfig+0x876>
 8005238:	4b34      	ldr	r3, [pc, #208]	; (800530c <HAL_RCC_OscConfig+0x930>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	4a33      	ldr	r2, [pc, #204]	; (800530c <HAL_RCC_OscConfig+0x930>)
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	6213      	str	r3, [r2, #32]
 8005244:	4b31      	ldr	r3, [pc, #196]	; (800530c <HAL_RCC_OscConfig+0x930>)
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	4a30      	ldr	r2, [pc, #192]	; (800530c <HAL_RCC_OscConfig+0x930>)
 800524a:	f023 0304 	bic.w	r3, r3, #4
 800524e:	6213      	str	r3, [r2, #32]
 8005250:	e01d      	b.n	800528e <HAL_RCC_OscConfig+0x8b2>
 8005252:	1d3b      	adds	r3, r7, #4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	2b05      	cmp	r3, #5
 800525a:	d10c      	bne.n	8005276 <HAL_RCC_OscConfig+0x89a>
 800525c:	4b2b      	ldr	r3, [pc, #172]	; (800530c <HAL_RCC_OscConfig+0x930>)
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	4a2a      	ldr	r2, [pc, #168]	; (800530c <HAL_RCC_OscConfig+0x930>)
 8005262:	f043 0304 	orr.w	r3, r3, #4
 8005266:	6213      	str	r3, [r2, #32]
 8005268:	4b28      	ldr	r3, [pc, #160]	; (800530c <HAL_RCC_OscConfig+0x930>)
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	4a27      	ldr	r2, [pc, #156]	; (800530c <HAL_RCC_OscConfig+0x930>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	6213      	str	r3, [r2, #32]
 8005274:	e00b      	b.n	800528e <HAL_RCC_OscConfig+0x8b2>
 8005276:	4b25      	ldr	r3, [pc, #148]	; (800530c <HAL_RCC_OscConfig+0x930>)
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4a24      	ldr	r2, [pc, #144]	; (800530c <HAL_RCC_OscConfig+0x930>)
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	6213      	str	r3, [r2, #32]
 8005282:	4b22      	ldr	r3, [pc, #136]	; (800530c <HAL_RCC_OscConfig+0x930>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	4a21      	ldr	r2, [pc, #132]	; (800530c <HAL_RCC_OscConfig+0x930>)
 8005288:	f023 0304 	bic.w	r3, r3, #4
 800528c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d06b      	beq.n	8005370 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005298:	f7fc fb04 	bl	80018a4 <HAL_GetTick>
 800529c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a0:	e00b      	b.n	80052ba <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fc faff 	bl	80018a4 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e291      	b.n	80057de <HAL_RCC_OscConfig+0xe02>
 80052ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80052be:	2202      	movs	r2, #2
 80052c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	fa93 f2a3 	rbit	r2, r3
 80052cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80052d6:	2202      	movs	r2, #2
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	fa93 f2a3 	rbit	r2, r3
 80052e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80052e8:	601a      	str	r2, [r3, #0]
  return result;
 80052ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80052ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f0:	fab3 f383 	clz	r3, r3
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f043 0302 	orr.w	r3, r3, #2
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d109      	bne.n	8005318 <HAL_RCC_OscConfig+0x93c>
 8005304:	4b01      	ldr	r3, [pc, #4]	; (800530c <HAL_RCC_OscConfig+0x930>)
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	e014      	b.n	8005334 <HAL_RCC_OscConfig+0x958>
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000
 8005310:	10908120 	.word	0x10908120
 8005314:	40007000 	.word	0x40007000
 8005318:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800531c:	2202      	movs	r2, #2
 800531e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005320:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	fa93 f2a3 	rbit	r2, r3
 800532a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	4bbb      	ldr	r3, [pc, #748]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005338:	2102      	movs	r1, #2
 800533a:	6011      	str	r1, [r2, #0]
 800533c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	fa92 f1a2 	rbit	r1, r2
 8005346:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800534a:	6011      	str	r1, [r2, #0]
  return result;
 800534c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	fab2 f282 	clz	r2, r2
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800535c:	b2d2      	uxtb	r2, r2
 800535e:	f002 021f 	and.w	r2, r2, #31
 8005362:	2101      	movs	r1, #1
 8005364:	fa01 f202 	lsl.w	r2, r1, r2
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d099      	beq.n	80052a2 <HAL_RCC_OscConfig+0x8c6>
 800536e:	e063      	b.n	8005438 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005370:	f7fc fa98 	bl	80018a4 <HAL_GetTick>
 8005374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005378:	e00b      	b.n	8005392 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800537a:	f7fc fa93 	bl	80018a4 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	; 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e225      	b.n	80057de <HAL_RCC_OscConfig+0xe02>
 8005392:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005396:	2202      	movs	r2, #2
 8005398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	fa93 f2a3 	rbit	r2, r3
 80053a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80053ae:	2202      	movs	r2, #2
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	fa93 f2a3 	rbit	r2, r3
 80053bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80053c0:	601a      	str	r2, [r3, #0]
  return result;
 80053c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80053c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c8:	fab3 f383 	clz	r3, r3
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f043 0302 	orr.w	r3, r3, #2
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d102      	bne.n	80053e2 <HAL_RCC_OscConfig+0xa06>
 80053dc:	4b90      	ldr	r3, [pc, #576]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	e00d      	b.n	80053fe <HAL_RCC_OscConfig+0xa22>
 80053e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80053e6:	2202      	movs	r2, #2
 80053e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	fa93 f2a3 	rbit	r2, r3
 80053f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	4b89      	ldr	r3, [pc, #548]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 80053fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005402:	2102      	movs	r1, #2
 8005404:	6011      	str	r1, [r2, #0]
 8005406:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	fa92 f1a2 	rbit	r1, r2
 8005410:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005414:	6011      	str	r1, [r2, #0]
  return result;
 8005416:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	fab2 f282 	clz	r2, r2
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	f002 021f 	and.w	r2, r2, #31
 800542c:	2101      	movs	r1, #1
 800542e:	fa01 f202 	lsl.w	r2, r1, r2
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1a0      	bne.n	800537a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005438:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b77      	ldr	r3, [pc, #476]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	4a76      	ldr	r2, [pc, #472]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 8005446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800544c:	1d3b      	adds	r3, r7, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 81c2 	beq.w	80057dc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005458:	4b71      	ldr	r3, [pc, #452]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 030c 	and.w	r3, r3, #12
 8005460:	2b08      	cmp	r3, #8
 8005462:	f000 819c 	beq.w	800579e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005466:	1d3b      	adds	r3, r7, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	2b02      	cmp	r3, #2
 800546e:	f040 8114 	bne.w	800569a <HAL_RCC_OscConfig+0xcbe>
 8005472:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005476:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800547a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	fa93 f2a3 	rbit	r2, r3
 8005486:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800548a:	601a      	str	r2, [r3, #0]
  return result;
 800548c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005490:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005492:	fab3 f383 	clz	r3, r3
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800549c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	461a      	mov	r2, r3
 80054a4:	2300      	movs	r3, #0
 80054a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fc f9fc 	bl	80018a4 <HAL_GetTick>
 80054ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054b0:	e009      	b.n	80054c6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b2:	f7fc f9f7 	bl	80018a4 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e18b      	b.n	80057de <HAL_RCC_OscConfig+0xe02>
 80054c6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80054ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	fa93 f2a3 	rbit	r2, r3
 80054da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80054de:	601a      	str	r2, [r3, #0]
  return result;
 80054e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80054e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e6:	fab3 f383 	clz	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d102      	bne.n	8005500 <HAL_RCC_OscConfig+0xb24>
 80054fa:	4b49      	ldr	r3, [pc, #292]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	e01b      	b.n	8005538 <HAL_RCC_OscConfig+0xb5c>
 8005500:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	fa93 f2a3 	rbit	r2, r3
 8005514:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800551e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	fa93 f2a3 	rbit	r2, r3
 800552e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	4b3a      	ldr	r3, [pc, #232]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800553c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005540:	6011      	str	r1, [r2, #0]
 8005542:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	fa92 f1a2 	rbit	r1, r2
 800554c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005550:	6011      	str	r1, [r2, #0]
  return result;
 8005552:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	fab2 f282 	clz	r2, r2
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	f042 0220 	orr.w	r2, r2, #32
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	f002 021f 	and.w	r2, r2, #31
 8005568:	2101      	movs	r1, #1
 800556a:	fa01 f202 	lsl.w	r2, r1, r2
 800556e:	4013      	ands	r3, r2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d19e      	bne.n	80054b2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005574:	4b2a      	ldr	r3, [pc, #168]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800557c:	1d3b      	adds	r3, r7, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	430b      	orrs	r3, r1
 800558a:	4925      	ldr	r1, [pc, #148]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 800558c:	4313      	orrs	r3, r2
 800558e:	604b      	str	r3, [r1, #4]
 8005590:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005594:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	fa93 f2a3 	rbit	r2, r3
 80055a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055a8:	601a      	str	r2, [r3, #0]
  return result;
 80055aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055ae:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	461a      	mov	r2, r3
 80055c2:	2301      	movs	r3, #1
 80055c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c6:	f7fc f96d 	bl	80018a4 <HAL_GetTick>
 80055ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055ce:	e009      	b.n	80055e4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d0:	f7fc f968 	bl	80018a4 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e0fc      	b.n	80057de <HAL_RCC_OscConfig+0xe02>
 80055e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	fa93 f2a3 	rbit	r2, r3
 80055f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80055fc:	601a      	str	r2, [r3, #0]
  return result;
 80055fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005602:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005604:	fab3 f383 	clz	r3, r3
 8005608:	b2db      	uxtb	r3, r3
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d105      	bne.n	8005624 <HAL_RCC_OscConfig+0xc48>
 8005618:	4b01      	ldr	r3, [pc, #4]	; (8005620 <HAL_RCC_OscConfig+0xc44>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	e01e      	b.n	800565c <HAL_RCC_OscConfig+0xc80>
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000
 8005624:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800562c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	fa93 f2a3 	rbit	r2, r3
 8005638:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	fa93 f2a3 	rbit	r2, r3
 8005652:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	4b63      	ldr	r3, [pc, #396]	; (80057e8 <HAL_RCC_OscConfig+0xe0c>)
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005660:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005664:	6011      	str	r1, [r2, #0]
 8005666:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	fa92 f1a2 	rbit	r1, r2
 8005670:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005674:	6011      	str	r1, [r2, #0]
  return result;
 8005676:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	fab2 f282 	clz	r2, r2
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	f042 0220 	orr.w	r2, r2, #32
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	f002 021f 	and.w	r2, r2, #31
 800568c:	2101      	movs	r1, #1
 800568e:	fa01 f202 	lsl.w	r2, r1, r2
 8005692:	4013      	ands	r3, r2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d09b      	beq.n	80055d0 <HAL_RCC_OscConfig+0xbf4>
 8005698:	e0a0      	b.n	80057dc <HAL_RCC_OscConfig+0xe00>
 800569a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800569e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	fa93 f2a3 	rbit	r2, r3
 80056ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056b2:	601a      	str	r2, [r3, #0]
  return result;
 80056b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ba:	fab3 f383 	clz	r3, r3
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	461a      	mov	r2, r3
 80056cc:	2300      	movs	r3, #0
 80056ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fc f8e8 	bl	80018a4 <HAL_GetTick>
 80056d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056d8:	e009      	b.n	80056ee <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056da:	f7fc f8e3 	bl	80018a4 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e077      	b.n	80057de <HAL_RCC_OscConfig+0xe02>
 80056ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	fa93 f2a3 	rbit	r2, r3
 8005702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005706:	601a      	str	r2, [r3, #0]
  return result;
 8005708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800570c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800570e:	fab3 f383 	clz	r3, r3
 8005712:	b2db      	uxtb	r3, r3
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d102      	bne.n	8005728 <HAL_RCC_OscConfig+0xd4c>
 8005722:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <HAL_RCC_OscConfig+0xe0c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	e01b      	b.n	8005760 <HAL_RCC_OscConfig+0xd84>
 8005728:	f107 0320 	add.w	r3, r7, #32
 800572c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005732:	f107 0320 	add.w	r3, r7, #32
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	fa93 f2a3 	rbit	r2, r3
 800573c:	f107 031c 	add.w	r3, r7, #28
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	f107 0318 	add.w	r3, r7, #24
 8005746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	f107 0318 	add.w	r3, r7, #24
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	fa93 f2a3 	rbit	r2, r3
 8005756:	f107 0314 	add.w	r3, r7, #20
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	4b22      	ldr	r3, [pc, #136]	; (80057e8 <HAL_RCC_OscConfig+0xe0c>)
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	f107 0210 	add.w	r2, r7, #16
 8005764:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	f107 0210 	add.w	r2, r7, #16
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	fa92 f1a2 	rbit	r1, r2
 8005774:	f107 020c 	add.w	r2, r7, #12
 8005778:	6011      	str	r1, [r2, #0]
  return result;
 800577a:	f107 020c 	add.w	r2, r7, #12
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	fab2 f282 	clz	r2, r2
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	f042 0220 	orr.w	r2, r2, #32
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	f002 021f 	and.w	r2, r2, #31
 8005790:	2101      	movs	r1, #1
 8005792:	fa01 f202 	lsl.w	r2, r1, r2
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d19e      	bne.n	80056da <HAL_RCC_OscConfig+0xcfe>
 800579c:	e01e      	b.n	80057dc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e018      	b.n	80057de <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057ac:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <HAL_RCC_OscConfig+0xe0c>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d108      	bne.n	80057d8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80057c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057ce:	1d3b      	adds	r3, r7, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40021000 	.word	0x40021000

080057ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b09e      	sub	sp, #120	; 0x78
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e162      	b.n	8005aca <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005804:	4b90      	ldr	r3, [pc, #576]	; (8005a48 <HAL_RCC_ClockConfig+0x25c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d910      	bls.n	8005834 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005812:	4b8d      	ldr	r3, [pc, #564]	; (8005a48 <HAL_RCC_ClockConfig+0x25c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 0207 	bic.w	r2, r3, #7
 800581a:	498b      	ldr	r1, [pc, #556]	; (8005a48 <HAL_RCC_ClockConfig+0x25c>)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	4313      	orrs	r3, r2
 8005820:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005822:	4b89      	ldr	r3, [pc, #548]	; (8005a48 <HAL_RCC_ClockConfig+0x25c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d001      	beq.n	8005834 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e14a      	b.n	8005aca <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005840:	4b82      	ldr	r3, [pc, #520]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	497f      	ldr	r1, [pc, #508]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 800584e:	4313      	orrs	r3, r2
 8005850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80dc 	beq.w	8005a18 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d13c      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xf6>
 8005868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800586c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005870:	fa93 f3a3 	rbit	r3, r3
 8005874:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005878:	fab3 f383 	clz	r3, r3
 800587c:	b2db      	uxtb	r3, r3
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	d102      	bne.n	8005892 <HAL_RCC_ClockConfig+0xa6>
 800588c:	4b6f      	ldr	r3, [pc, #444]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	e00f      	b.n	80058b2 <HAL_RCC_ClockConfig+0xc6>
 8005892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005896:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005898:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800589a:	fa93 f3a3 	rbit	r3, r3
 800589e:	667b      	str	r3, [r7, #100]	; 0x64
 80058a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058a4:	663b      	str	r3, [r7, #96]	; 0x60
 80058a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058a8:	fa93 f3a3 	rbit	r3, r3
 80058ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058ae:	4b67      	ldr	r3, [pc, #412]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80058b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ba:	fa92 f2a2 	rbit	r2, r2
 80058be:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80058c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058c2:	fab2 f282 	clz	r2, r2
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	f042 0220 	orr.w	r2, r2, #32
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	f002 021f 	and.w	r2, r2, #31
 80058d2:	2101      	movs	r1, #1
 80058d4:	fa01 f202 	lsl.w	r2, r1, r2
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d17b      	bne.n	80059d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e0f3      	b.n	8005aca <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d13c      	bne.n	8005964 <HAL_RCC_ClockConfig+0x178>
 80058ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f2:	fa93 f3a3 	rbit	r3, r3
 80058f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80058f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fa:	fab3 f383 	clz	r3, r3
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	b2db      	uxtb	r3, r3
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b01      	cmp	r3, #1
 800590c:	d102      	bne.n	8005914 <HAL_RCC_ClockConfig+0x128>
 800590e:	4b4f      	ldr	r3, [pc, #316]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	e00f      	b.n	8005934 <HAL_RCC_ClockConfig+0x148>
 8005914:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005918:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591c:	fa93 f3a3 	rbit	r3, r3
 8005920:	647b      	str	r3, [r7, #68]	; 0x44
 8005922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005926:	643b      	str	r3, [r7, #64]	; 0x40
 8005928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592a:	fa93 f3a3 	rbit	r3, r3
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005930:	4b46      	ldr	r3, [pc, #280]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005938:	63ba      	str	r2, [r7, #56]	; 0x38
 800593a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800593c:	fa92 f2a2 	rbit	r2, r2
 8005940:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005944:	fab2 f282 	clz	r2, r2
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	f042 0220 	orr.w	r2, r2, #32
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	f002 021f 	and.w	r2, r2, #31
 8005954:	2101      	movs	r1, #1
 8005956:	fa01 f202 	lsl.w	r2, r1, r2
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d13a      	bne.n	80059d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e0b2      	b.n	8005aca <HAL_RCC_ClockConfig+0x2de>
 8005964:	2302      	movs	r3, #2
 8005966:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	fa93 f3a3 	rbit	r3, r3
 800596e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005972:	fab3 f383 	clz	r3, r3
 8005976:	b2db      	uxtb	r3, r3
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d102      	bne.n	800598c <HAL_RCC_ClockConfig+0x1a0>
 8005986:	4b31      	ldr	r3, [pc, #196]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	e00d      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1bc>
 800598c:	2302      	movs	r3, #2
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	fa93 f3a3 	rbit	r3, r3
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
 8005998:	2302      	movs	r3, #2
 800599a:	623b      	str	r3, [r7, #32]
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	fa93 f3a3 	rbit	r3, r3
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	4b29      	ldr	r3, [pc, #164]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	2202      	movs	r2, #2
 80059aa:	61ba      	str	r2, [r7, #24]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	fa92 f2a2 	rbit	r2, r2
 80059b2:	617a      	str	r2, [r7, #20]
  return result;
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	fab2 f282 	clz	r2, r2
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	f042 0220 	orr.w	r2, r2, #32
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	f002 021f 	and.w	r2, r2, #31
 80059c6:	2101      	movs	r1, #1
 80059c8:	fa01 f202 	lsl.w	r2, r1, r2
 80059cc:	4013      	ands	r3, r2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e079      	b.n	8005aca <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059d6:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f023 0203 	bic.w	r2, r3, #3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	491a      	ldr	r1, [pc, #104]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e8:	f7fb ff5c 	bl	80018a4 <HAL_GetTick>
 80059ec:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ee:	e00a      	b.n	8005a06 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f0:	f7fb ff58 	bl	80018a4 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e061      	b.n	8005aca <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a06:	4b11      	ldr	r3, [pc, #68]	; (8005a4c <HAL_RCC_ClockConfig+0x260>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f003 020c 	and.w	r2, r3, #12
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d1eb      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <HAL_RCC_ClockConfig+0x25c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d214      	bcs.n	8005a50 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a26:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <HAL_RCC_ClockConfig+0x25c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f023 0207 	bic.w	r2, r3, #7
 8005a2e:	4906      	ldr	r1, [pc, #24]	; (8005a48 <HAL_RCC_ClockConfig+0x25c>)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a36:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <HAL_RCC_ClockConfig+0x25c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d005      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e040      	b.n	8005aca <HAL_RCC_ClockConfig+0x2de>
 8005a48:	40022000 	.word	0x40022000
 8005a4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d008      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	491a      	ldr	r1, [pc, #104]	; (8005ad4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d009      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a7a:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4912      	ldr	r1, [pc, #72]	; (8005ad4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a8e:	f000 f829 	bl	8005ae4 <HAL_RCC_GetSysClockFreq>
 8005a92:	4601      	mov	r1, r0
 8005a94:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a9c:	22f0      	movs	r2, #240	; 0xf0
 8005a9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	fa92 f2a2 	rbit	r2, r2
 8005aa6:	60fa      	str	r2, [r7, #12]
  return result;
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	fab2 f282 	clz	r2, r2
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	40d3      	lsrs	r3, r2
 8005ab2:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <HAL_RCC_ClockConfig+0x2ec>)
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
 8005ab6:	fa21 f303 	lsr.w	r3, r1, r3
 8005aba:	4a08      	ldr	r2, [pc, #32]	; (8005adc <HAL_RCC_ClockConfig+0x2f0>)
 8005abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005abe:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <HAL_RCC_ClockConfig+0x2f4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fb feaa 	bl	800181c <HAL_InitTick>
  
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3778      	adds	r7, #120	; 0x78
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	08006048 	.word	0x08006048
 8005adc:	2000001c 	.word	0x2000001c
 8005ae0:	20000020 	.word	0x20000020

08005ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b08b      	sub	sp, #44	; 0x2c
 8005ae8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	2300      	movs	r3, #0
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005afe:	4b29      	ldr	r3, [pc, #164]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d002      	beq.n	8005b14 <HAL_RCC_GetSysClockFreq+0x30>
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d003      	beq.n	8005b1a <HAL_RCC_GetSysClockFreq+0x36>
 8005b12:	e03c      	b.n	8005b8e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b14:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b16:	623b      	str	r3, [r7, #32]
      break;
 8005b18:	e03c      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b20:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b24:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	fa92 f2a2 	rbit	r2, r2
 8005b2c:	607a      	str	r2, [r7, #4]
  return result;
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	fab2 f282 	clz	r2, r2
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	40d3      	lsrs	r3, r2
 8005b38:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b3a:	5cd3      	ldrb	r3, [r2, r3]
 8005b3c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b3e:	4b19      	ldr	r3, [pc, #100]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	220f      	movs	r2, #15
 8005b48:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	fa92 f2a2 	rbit	r2, r2
 8005b50:	60fa      	str	r2, [r7, #12]
  return result;
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	fab2 f282 	clz	r2, r2
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	40d3      	lsrs	r3, r2
 8005b5c:	4a14      	ldr	r2, [pc, #80]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b5e:	5cd3      	ldrb	r3, [r2, r3]
 8005b60:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b6c:	4a0e      	ldr	r2, [pc, #56]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7c:	e004      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	4a0c      	ldr	r2, [pc, #48]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	623b      	str	r3, [r7, #32]
      break;
 8005b8c:	e002      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b8e:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b90:	623b      	str	r3, [r7, #32]
      break;
 8005b92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b94:	6a3b      	ldr	r3, [r7, #32]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	372c      	adds	r7, #44	; 0x2c
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	007a1200 	.word	0x007a1200
 8005bac:	08006058 	.word	0x08006058
 8005bb0:	08006068 	.word	0x08006068
 8005bb4:	003d0900 	.word	0x003d0900

08005bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b092      	sub	sp, #72	; 0x48
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 80d4 	beq.w	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bdc:	4b4e      	ldr	r3, [pc, #312]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10e      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be8:	4b4b      	ldr	r3, [pc, #300]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	4a4a      	ldr	r2, [pc, #296]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	61d3      	str	r3, [r2, #28]
 8005bf4:	4b48      	ldr	r3, [pc, #288]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c06:	4b45      	ldr	r3, [pc, #276]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d118      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c12:	4b42      	ldr	r3, [pc, #264]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a41      	ldr	r2, [pc, #260]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c1e:	f7fb fe41 	bl	80018a4 <HAL_GetTick>
 8005c22:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c24:	e008      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c26:	f7fb fe3d 	bl	80018a4 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b64      	cmp	r3, #100	; 0x64
 8005c32:	d901      	bls.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e169      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c38:	4b38      	ldr	r3, [pc, #224]	; (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0f0      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c44:	4b34      	ldr	r3, [pc, #208]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8084 	beq.w	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d07c      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c64:	4b2c      	ldr	r3, [pc, #176]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	fa93 f3a3 	rbit	r3, r3
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c7e:	fab3 f383 	clz	r3, r3
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	4b26      	ldr	r3, [pc, #152]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2301      	movs	r3, #1
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	fa93 f3a3 	rbit	r3, r3
 8005c9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ca2:	fab3 f383 	clz	r3, r3
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005cb6:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d04b      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc6:	f7fb fded 	bl	80018a4 <HAL_GetTick>
 8005cca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ccc:	e00a      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cce:	f7fb fde9 	bl	80018a4 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e113      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	fa93 f3a3 	rbit	r3, r3
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	623b      	str	r3, [r7, #32]
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	fa93 f3a3 	rbit	r3, r3
 8005cfa:	61fb      	str	r3, [r7, #28]
  return result;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cfe:	fab3 f383 	clz	r3, r3
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f043 0302 	orr.w	r3, r3, #2
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d108      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005d12:	4b01      	ldr	r3, [pc, #4]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	e00d      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	40007000 	.word	0x40007000
 8005d20:	10908100 	.word	0x10908100
 8005d24:	2302      	movs	r3, #2
 8005d26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	fa93 f3a3 	rbit	r3, r3
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	4b78      	ldr	r3, [pc, #480]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2202      	movs	r2, #2
 8005d36:	613a      	str	r2, [r7, #16]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	fa92 f2a2 	rbit	r2, r2
 8005d3e:	60fa      	str	r2, [r7, #12]
  return result;
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	fab2 f282 	clz	r2, r2
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	f002 021f 	and.w	r2, r2, #31
 8005d52:	2101      	movs	r1, #1
 8005d54:	fa01 f202 	lsl.w	r2, r1, r2
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0b7      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005d5e:	4b6d      	ldr	r3, [pc, #436]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	496a      	ldr	r1, [pc, #424]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d105      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d78:	4b66      	ldr	r3, [pc, #408]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	4a65      	ldr	r2, [pc, #404]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d90:	4b60      	ldr	r3, [pc, #384]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	f023 0203 	bic.w	r2, r3, #3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	495d      	ldr	r1, [pc, #372]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dae:	4b59      	ldr	r3, [pc, #356]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	4956      	ldr	r1, [pc, #344]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dcc:	4b51      	ldr	r3, [pc, #324]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	494e      	ldr	r1, [pc, #312]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dea:	4b4a      	ldr	r3, [pc, #296]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	f023 0210 	bic.w	r2, r3, #16
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	4947      	ldr	r1, [pc, #284]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d008      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005e08:	4b42      	ldr	r3, [pc, #264]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e14:	493f      	ldr	r1, [pc, #252]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e26:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	f023 0220 	bic.w	r2, r3, #32
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	4938      	ldr	r1, [pc, #224]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e44:	4b33      	ldr	r3, [pc, #204]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	4930      	ldr	r1, [pc, #192]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e62:	4b2c      	ldr	r3, [pc, #176]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	4929      	ldr	r1, [pc, #164]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e80:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	4921      	ldr	r1, [pc, #132]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e9e:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	491a      	ldr	r1, [pc, #104]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d008      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	4912      	ldr	r1, [pc, #72]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d008      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005eda:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	490b      	ldr	r1, [pc, #44]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d008      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f04:	4903      	ldr	r1, [pc, #12]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3748      	adds	r7, #72	; 0x48
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40021000 	.word	0x40021000

08005f18 <__libc_init_array>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	4e0d      	ldr	r6, [pc, #52]	; (8005f50 <__libc_init_array+0x38>)
 8005f1c:	4c0d      	ldr	r4, [pc, #52]	; (8005f54 <__libc_init_array+0x3c>)
 8005f1e:	1ba4      	subs	r4, r4, r6
 8005f20:	10a4      	asrs	r4, r4, #2
 8005f22:	2500      	movs	r5, #0
 8005f24:	42a5      	cmp	r5, r4
 8005f26:	d109      	bne.n	8005f3c <__libc_init_array+0x24>
 8005f28:	4e0b      	ldr	r6, [pc, #44]	; (8005f58 <__libc_init_array+0x40>)
 8005f2a:	4c0c      	ldr	r4, [pc, #48]	; (8005f5c <__libc_init_array+0x44>)
 8005f2c:	f000 f820 	bl	8005f70 <_init>
 8005f30:	1ba4      	subs	r4, r4, r6
 8005f32:	10a4      	asrs	r4, r4, #2
 8005f34:	2500      	movs	r5, #0
 8005f36:	42a5      	cmp	r5, r4
 8005f38:	d105      	bne.n	8005f46 <__libc_init_array+0x2e>
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}
 8005f3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f40:	4798      	blx	r3
 8005f42:	3501      	adds	r5, #1
 8005f44:	e7ee      	b.n	8005f24 <__libc_init_array+0xc>
 8005f46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f4a:	4798      	blx	r3
 8005f4c:	3501      	adds	r5, #1
 8005f4e:	e7f2      	b.n	8005f36 <__libc_init_array+0x1e>
 8005f50:	08006078 	.word	0x08006078
 8005f54:	08006078 	.word	0x08006078
 8005f58:	08006078 	.word	0x08006078
 8005f5c:	0800607c 	.word	0x0800607c

08005f60 <memset>:
 8005f60:	4402      	add	r2, r0
 8005f62:	4603      	mov	r3, r0
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d100      	bne.n	8005f6a <memset+0xa>
 8005f68:	4770      	bx	lr
 8005f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6e:	e7f9      	b.n	8005f64 <memset+0x4>

08005f70 <_init>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr

08005f7c <_fini>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr
